
Mouse_Maze_Test.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000002  00800100  00004b86  00004c1a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00004b86  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000666  00800102  00800102  00004c1c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00004c1c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000044  00000000  00000000  00004c4c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000460  00000000  00000000  00004c90  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00005050  00000000  00000000  000050f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000010cb  00000000  00000000  0000a140  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00003d24  00000000  00000000  0000b20b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000a7c  00000000  00000000  0000ef30  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000117d  00000000  00000000  0000f9ac  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000020bf  00000000  00000000  00010b29  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000438  00000000  00000000  00012be8  2**3
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 3a 00 	jmp	0x74	; 0x74 <__ctors_end>
       4:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
       8:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
       c:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
      10:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
      14:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
      18:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
      1c:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
      20:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
      24:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
      28:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
      2c:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
      30:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
      34:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
      38:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
      3c:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
      40:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
      44:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
      48:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
      4c:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
      50:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
      54:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
      58:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
      5c:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
      60:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
      64:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
      68:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
      6c:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
      70:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>

00000074 <__ctors_end>:
      74:	11 24       	eor	r1, r1
      76:	1f be       	out	0x3f, r1	; 63
      78:	cf ef       	ldi	r28, 0xFF	; 255
      7a:	d8 e0       	ldi	r29, 0x08	; 8
      7c:	de bf       	out	0x3e, r29	; 62
      7e:	cd bf       	out	0x3d, r28	; 61

00000080 <__do_copy_data>:
      80:	11 e0       	ldi	r17, 0x01	; 1
      82:	a0 e0       	ldi	r26, 0x00	; 0
      84:	b1 e0       	ldi	r27, 0x01	; 1
      86:	e6 e8       	ldi	r30, 0x86	; 134
      88:	fb e4       	ldi	r31, 0x4B	; 75
      8a:	02 c0       	rjmp	.+4      	; 0x90 <__do_copy_data+0x10>
      8c:	05 90       	lpm	r0, Z+
      8e:	0d 92       	st	X+, r0
      90:	a2 30       	cpi	r26, 0x02	; 2
      92:	b1 07       	cpc	r27, r17
      94:	d9 f7       	brne	.-10     	; 0x8c <__do_copy_data+0xc>

00000096 <__do_clear_bss>:
      96:	27 e0       	ldi	r18, 0x07	; 7
      98:	a2 e0       	ldi	r26, 0x02	; 2
      9a:	b1 e0       	ldi	r27, 0x01	; 1
      9c:	01 c0       	rjmp	.+2      	; 0xa0 <.do_clear_bss_start>

0000009e <.do_clear_bss_loop>:
      9e:	1d 92       	st	X+, r1

000000a0 <.do_clear_bss_start>:
      a0:	a8 36       	cpi	r26, 0x68	; 104
      a2:	b2 07       	cpc	r27, r18
      a4:	e1 f7       	brne	.-8      	; 0x9e <.do_clear_bss_loop>
      a6:	0e 94 ab 20 	call	0x4156	; 0x4156 <main>
      aa:	0c 94 c1 25 	jmp	0x4b82	; 0x4b82 <_exit>

000000ae <__bad_interrupt>:
      ae:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000b2 <add_right>:
}

// Function to increment the right tick count
void add_right()
{
    ticks_r++;
      b2:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <ticks_r>
      b6:	90 91 0b 01 	lds	r25, 0x010B	; 0x80010b <ticks_r+0x1>
      ba:	a0 91 0c 01 	lds	r26, 0x010C	; 0x80010c <ticks_r+0x2>
      be:	b0 91 0d 01 	lds	r27, 0x010D	; 0x80010d <ticks_r+0x3>
      c2:	01 96       	adiw	r24, 0x01	; 1
      c4:	a1 1d       	adc	r26, r1
      c6:	b1 1d       	adc	r27, r1
      c8:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <ticks_r>
      cc:	90 93 0b 01 	sts	0x010B, r25	; 0x80010b <ticks_r+0x1>
      d0:	a0 93 0c 01 	sts	0x010C, r26	; 0x80010c <ticks_r+0x2>
      d4:	b0 93 0d 01 	sts	0x010D, r27	; 0x80010d <ticks_r+0x3>
      d8:	08 95       	ret

000000da <add_left>:
}

// Function to increment the left tick count
void add_left()
{
    ticks_l++;
      da:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <ticks_l>
      de:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <ticks_l+0x1>
      e2:	a0 91 08 01 	lds	r26, 0x0108	; 0x800108 <ticks_l+0x2>
      e6:	b0 91 09 01 	lds	r27, 0x0109	; 0x800109 <ticks_l+0x3>
      ea:	01 96       	adiw	r24, 0x01	; 1
      ec:	a1 1d       	adc	r26, r1
      ee:	b1 1d       	adc	r27, r1
      f0:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <ticks_l>
      f4:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <ticks_l+0x1>
      f8:	a0 93 08 01 	sts	0x0108, r26	; 0x800108 <ticks_l+0x2>
      fc:	b0 93 09 01 	sts	0x0109, r27	; 0x800109 <ticks_l+0x3>
     100:	08 95       	ret

00000102 <Reset_eeprom>:
}
void Reset_eeprom()
{
   EEPROM_erase(0,1023);
     102:	6f ef       	ldi	r22, 0xFF	; 255
     104:	73 e0       	ldi	r23, 0x03	; 3
     106:	80 e0       	ldi	r24, 0x00	; 0
     108:	90 e0       	ldi	r25, 0x00	; 0
     10a:	0e 94 ec 20 	call	0x41d8	; 0x41d8 <EEPROM_erase>
     10e:	08 95       	ret

00000110 <array_null>:
uint8_t way_left, way_front, way_right;

// Function to set all maze-related arrays to zero
void array_null()
{
    for (uint8_t n = 0; n < ROWS; n++)
     110:	50 e0       	ldi	r21, 0x00	; 0
     112:	1e c0       	rjmp	.+60     	; 0x150 <array_null+0x40>
    {
        for (uint8_t m = 0; m < COLS; m++)
        {
            trail[m][n] = 0;
     114:	85 2f       	mov	r24, r21
     116:	90 e0       	ldi	r25, 0x00	; 0
     118:	60 e1       	ldi	r22, 0x10	; 16
     11a:	46 9f       	mul	r20, r22
     11c:	90 01       	movw	r18, r0
     11e:	11 24       	eor	r1, r1
     120:	f9 01       	movw	r30, r18
     122:	e3 5b       	subi	r30, 0xB3	; 179
     124:	fa 4f       	sbci	r31, 0xFA	; 250
     126:	e8 0f       	add	r30, r24
     128:	f9 1f       	adc	r31, r25
     12a:	10 82       	st	Z, r1
            deadend[m][n] = 0;
     12c:	f9 01       	movw	r30, r18
     12e:	e3 5b       	subi	r30, 0xB3	; 179
     130:	fb 4f       	sbci	r31, 0xFB	; 251
     132:	e8 0f       	add	r30, r24
     134:	f9 1f       	adc	r31, r25
     136:	10 82       	st	Z, r1
            pot_field[m][n] = 0;
     138:	24 5b       	subi	r18, 0xB4	; 180
     13a:	3c 4f       	sbci	r19, 0xFC	; 252
     13c:	f9 01       	movw	r30, r18
     13e:	e8 0f       	add	r30, r24
     140:	f9 1f       	adc	r31, r25
     142:	10 82       	st	Z, r1
// Function to set all maze-related arrays to zero
void array_null()
{
    for (uint8_t n = 0; n < ROWS; n++)
    {
        for (uint8_t m = 0; m < COLS; m++)
     144:	4f 5f       	subi	r20, 0xFF	; 255
     146:	01 c0       	rjmp	.+2      	; 0x14a <array_null+0x3a>
     148:	40 e0       	ldi	r20, 0x00	; 0
     14a:	40 31       	cpi	r20, 0x10	; 16
     14c:	18 f3       	brcs	.-58     	; 0x114 <array_null+0x4>
uint8_t way_left, way_front, way_right;

// Function to set all maze-related arrays to zero
void array_null()
{
    for (uint8_t n = 0; n < ROWS; n++)
     14e:	5f 5f       	subi	r21, 0xFF	; 255
     150:	50 31       	cpi	r21, 0x10	; 16
     152:	d0 f3       	brcs	.-12     	; 0x148 <array_null+0x38>
            trail[m][n] = 0;
            deadend[m][n] = 0;
            pot_field[m][n] = 0;
        }
    }
}
     154:	08 95       	ret

00000156 <Cells_init_FloodFill>:
}

// Function to initialize maze cells for flood-fill algorithm
void Cells_init_FloodFill(void)
{
    for (uint8_t i = 0; i < ROWS; i++)
     156:	b0 e0       	ldi	r27, 0x00	; 0
     158:	2c c0       	rjmp	.+88     	; 0x1b2 <Cells_init_FloodFill+0x5c>
    {
        for (uint8_t j = 0; j < COLS; j++)
        {
            pot_field[i][j] = (uint8_t)abs(8 - i) + (uint8_t)abs(8 - j);
     15a:	8b 2f       	mov	r24, r27
     15c:	90 e0       	ldi	r25, 0x00	; 0
     15e:	48 e0       	ldi	r20, 0x08	; 8
     160:	50 e0       	ldi	r21, 0x00	; 0
     162:	48 1b       	sub	r20, r24
     164:	59 0b       	sbc	r21, r25
     166:	9a 01       	movw	r18, r20
     168:	22 f4       	brpl	.+8      	; 0x172 <Cells_init_FloodFill+0x1c>
     16a:	22 27       	eor	r18, r18
     16c:	33 27       	eor	r19, r19
     16e:	24 1b       	sub	r18, r20
     170:	35 0b       	sbc	r19, r21
     172:	42 2f       	mov	r20, r18
     174:	6a 2f       	mov	r22, r26
     176:	70 e0       	ldi	r23, 0x00	; 0
     178:	e8 e0       	ldi	r30, 0x08	; 8
     17a:	f0 e0       	ldi	r31, 0x00	; 0
     17c:	e6 1b       	sub	r30, r22
     17e:	f7 0b       	sbc	r31, r23
     180:	9f 01       	movw	r18, r30
     182:	22 f4       	brpl	.+8      	; 0x18c <Cells_init_FloodFill+0x36>
     184:	22 27       	eor	r18, r18
     186:	33 27       	eor	r19, r19
     188:	2e 1b       	sub	r18, r30
     18a:	3f 0b       	sbc	r19, r31
     18c:	82 95       	swap	r24
     18e:	92 95       	swap	r25
     190:	90 7f       	andi	r25, 0xF0	; 240
     192:	98 27       	eor	r25, r24
     194:	80 7f       	andi	r24, 0xF0	; 240
     196:	98 27       	eor	r25, r24
     198:	84 5b       	subi	r24, 0xB4	; 180
     19a:	9c 4f       	sbci	r25, 0xFC	; 252
     19c:	fc 01       	movw	r30, r24
     19e:	e6 0f       	add	r30, r22
     1a0:	f7 1f       	adc	r31, r23
     1a2:	24 0f       	add	r18, r20
     1a4:	20 83       	st	Z, r18
// Function to initialize maze cells for flood-fill algorithm
void Cells_init_FloodFill(void)
{
    for (uint8_t i = 0; i < ROWS; i++)
    {
        for (uint8_t j = 0; j < COLS; j++)
     1a6:	af 5f       	subi	r26, 0xFF	; 255
     1a8:	01 c0       	rjmp	.+2      	; 0x1ac <Cells_init_FloodFill+0x56>
     1aa:	a0 e0       	ldi	r26, 0x00	; 0
     1ac:	a0 31       	cpi	r26, 0x10	; 16
     1ae:	a8 f2       	brcs	.-86     	; 0x15a <Cells_init_FloodFill+0x4>
}

// Function to initialize maze cells for flood-fill algorithm
void Cells_init_FloodFill(void)
{
    for (uint8_t i = 0; i < ROWS; i++)
     1b0:	bf 5f       	subi	r27, 0xFF	; 255
     1b2:	b0 31       	cpi	r27, 0x10	; 16
     1b4:	d0 f3       	brcs	.-12     	; 0x1aa <Cells_init_FloodFill+0x54>
        for (uint8_t j = 0; j < COLS; j++)
        {
            pot_field[i][j] = (uint8_t)abs(8 - i) + (uint8_t)abs(8 - j);
        }
    }
}
     1b6:	08 95       	ret

000001b8 <G_Init>:
}
// Initialization function for the robot
void G_Init()
{
    // ACTUATORS
    MCAL_GPIO_SET_Pin(MOTOR_PORTS, Output, Motor_A_6);
     1b8:	46 e0       	ldi	r20, 0x06	; 6
     1ba:	61 e0       	ldi	r22, 0x01	; 1
     1bc:	80 e3       	ldi	r24, 0x30	; 48
     1be:	90 e0       	ldi	r25, 0x00	; 0
     1c0:	0e 94 2b 21 	call	0x4256	; 0x4256 <MCAL_GPIO_SET_Pin>
    MCAL_GPIO_SET_Pin(MOTOR_PORTS, Output, Motor_A_5); // OC1A
     1c4:	45 e0       	ldi	r20, 0x05	; 5
     1c6:	61 e0       	ldi	r22, 0x01	; 1
     1c8:	80 e3       	ldi	r24, 0x30	; 48
     1ca:	90 e0       	ldi	r25, 0x00	; 0
     1cc:	0e 94 2b 21 	call	0x4256	; 0x4256 <MCAL_GPIO_SET_Pin>
    MCAL_GPIO_SET_Pin(MOTOR_PORTS, Output, Motor_B_3);
     1d0:	43 e0       	ldi	r20, 0x03	; 3
     1d2:	61 e0       	ldi	r22, 0x01	; 1
     1d4:	80 e3       	ldi	r24, 0x30	; 48
     1d6:	90 e0       	ldi	r25, 0x00	; 0
     1d8:	0e 94 2b 21 	call	0x4256	; 0x4256 <MCAL_GPIO_SET_Pin>
    MCAL_GPIO_SET_Pin(MOTOR_PORTS, Output, Motor_B_4); // OC1B
     1dc:	44 e0       	ldi	r20, 0x04	; 4
     1de:	61 e0       	ldi	r22, 0x01	; 1
     1e0:	80 e3       	ldi	r24, 0x30	; 48
     1e2:	90 e0       	ldi	r25, 0x00	; 0
     1e4:	0e 94 2b 21 	call	0x4256	; 0x4256 <MCAL_GPIO_SET_Pin>

    // SENSORS
    MCAL_GPIO_SET_Pin(US_PORT, Output, ltrigger);
     1e8:	4c e0       	ldi	r20, 0x0C	; 12
     1ea:	61 e0       	ldi	r22, 0x01	; 1
     1ec:	89 e3       	ldi	r24, 0x39	; 57
     1ee:	90 e0       	ldi	r25, 0x00	; 0
     1f0:	0e 94 2b 21 	call	0x4256	; 0x4256 <MCAL_GPIO_SET_Pin>
    MCAL_GPIO_SET_Pin(US_PORT, Output, ftrigger);
     1f4:	48 e0       	ldi	r20, 0x08	; 8
     1f6:	61 e0       	ldi	r22, 0x01	; 1
     1f8:	89 e3       	ldi	r24, 0x39	; 57
     1fa:	90 e0       	ldi	r25, 0x00	; 0
     1fc:	0e 94 2b 21 	call	0x4256	; 0x4256 <MCAL_GPIO_SET_Pin>
    MCAL_GPIO_SET_Pin(US_PORT, Output, rtrigger);
     200:	44 e0       	ldi	r20, 0x04	; 4
     202:	61 e0       	ldi	r22, 0x01	; 1
     204:	89 e3       	ldi	r24, 0x39	; 57
     206:	90 e0       	ldi	r25, 0x00	; 0
     208:	0e 94 2b 21 	call	0x4256	; 0x4256 <MCAL_GPIO_SET_Pin>
    MCAL_GPIO_SET_Pin(US_PORT, Input, lecho);
     20c:	4d e0       	ldi	r20, 0x0D	; 13
     20e:	60 e0       	ldi	r22, 0x00	; 0
     210:	89 e3       	ldi	r24, 0x39	; 57
     212:	90 e0       	ldi	r25, 0x00	; 0
     214:	0e 94 2b 21 	call	0x4256	; 0x4256 <MCAL_GPIO_SET_Pin>
    MCAL_GPIO_SET_Pin(US_PORT, Input, fecho);
     218:	4b e0       	ldi	r20, 0x0B	; 11
     21a:	60 e0       	ldi	r22, 0x00	; 0
     21c:	89 e3       	ldi	r24, 0x39	; 57
     21e:	90 e0       	ldi	r25, 0x00	; 0
     220:	0e 94 2b 21 	call	0x4256	; 0x4256 <MCAL_GPIO_SET_Pin>
    MCAL_GPIO_SET_Pin(US_PORT, Input, recho);
     224:	47 e0       	ldi	r20, 0x07	; 7
     226:	60 e0       	ldi	r22, 0x00	; 0
     228:	89 e3       	ldi	r24, 0x39	; 57
     22a:	90 e0       	ldi	r25, 0x00	; 0
     22c:	0e 94 2b 21 	call	0x4256	; 0x4256 <MCAL_GPIO_SET_Pin>
    Ultra_Init(US_PORT, ltrigger, lecho);
     230:	4d e0       	ldi	r20, 0x0D	; 13
     232:	6c e0       	ldi	r22, 0x0C	; 12
     234:	89 e3       	ldi	r24, 0x39	; 57
     236:	90 e0       	ldi	r25, 0x00	; 0
     238:	0e 94 15 20 	call	0x402a	; 0x402a <Ultra_Init>
    Ultra_Init(US_PORT, rtrigger, recho);
     23c:	47 e0       	ldi	r20, 0x07	; 7
     23e:	64 e0       	ldi	r22, 0x04	; 4
     240:	89 e3       	ldi	r24, 0x39	; 57
     242:	90 e0       	ldi	r25, 0x00	; 0
     244:	0e 94 15 20 	call	0x402a	; 0x402a <Ultra_Init>
    Ultra_Init(US_PORT, ftrigger, fecho);
     248:	4b e0       	ldi	r20, 0x0B	; 11
     24a:	68 e0       	ldi	r22, 0x08	; 8
     24c:	89 e3       	ldi	r24, 0x39	; 57
     24e:	90 e0       	ldi	r25, 0x00	; 0
     250:	0e 94 15 20 	call	0x402a	; 0x402a <Ultra_Init>

    // Switches
    MCAL_GPIO_SET_Pin(Switches_PORT, Input, NAV_switch);
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	60 e0       	ldi	r22, 0x00	; 0
     258:	86 e3       	ldi	r24, 0x36	; 54
     25a:	90 e0       	ldi	r25, 0x00	; 0
     25c:	0e 94 2b 21 	call	0x4256	; 0x4256 <MCAL_GPIO_SET_Pin>
    MCAL_GPIO_SET_Pin(Switches_PORT, Input, RUN_switch);
     260:	41 e0       	ldi	r20, 0x01	; 1
     262:	60 e0       	ldi	r22, 0x00	; 0
     264:	86 e3       	ldi	r24, 0x36	; 54
     266:	90 e0       	ldi	r25, 0x00	; 0
     268:	0e 94 2b 21 	call	0x4256	; 0x4256 <MCAL_GPIO_SET_Pin>
    MCAL_GPIO_SET_Pin(Switches_PORT, Input, CLR_EEPROM_switch);
     26c:	42 e0       	ldi	r20, 0x02	; 2
     26e:	60 e0       	ldi	r22, 0x00	; 0
     270:	86 e3       	ldi	r24, 0x36	; 54
     272:	90 e0       	ldi	r25, 0x00	; 0
     274:	0e 94 2b 21 	call	0x4256	; 0x4256 <MCAL_GPIO_SET_Pin>

    INT_0_init(on_change);
     278:	81 e0       	ldi	r24, 0x01	; 1
     27a:	0e 94 60 21 	call	0x42c0	; 0x42c0 <INT_0_init>
    INT_1_init(on_change);
     27e:	81 e0       	ldi	r24, 0x01	; 1
     280:	0e 94 6a 21 	call	0x42d4	; 0x42d4 <INT_1_init>
    INT_2_init(rising_edge);
     284:	83 e0       	ldi	r24, 0x03	; 3
     286:	0e 94 74 21 	call	0x42e8	; 0x42e8 <INT_2_init>

    INT0_CallBack(add_left);
     28a:	8d e6       	ldi	r24, 0x6D	; 109
     28c:	90 e0       	ldi	r25, 0x00	; 0
     28e:	0e 94 7b 21 	call	0x42f6	; 0x42f6 <INT0_CallBack>
    INT1_CallBack(add_right);
     292:	89 e5       	ldi	r24, 0x59	; 89
     294:	90 e0       	ldi	r25, 0x00	; 0
     296:	0e 94 82 21 	call	0x4304	; 0x4304 <INT1_CallBack>
    INT2_CallBack(Reset_eeprom);
     29a:	81 e8       	ldi	r24, 0x81	; 129
     29c:	90 e0       	ldi	r25, 0x00	; 0
     29e:	0e 94 89 21 	call	0x4312	; 0x4312 <INT2_CallBack>

    configuartion->mode = Normal;
     2a2:	e0 91 04 01 	lds	r30, 0x0104	; 0x800104 <configuartion>
     2a6:	f0 91 05 01 	lds	r31, 0x0105	; 0x800105 <configuartion+0x1>
     2aa:	10 82       	st	Z, r1
    configuartion->Overflow = TOIE_ENABLE;
     2ac:	e0 91 04 01 	lds	r30, 0x0104	; 0x800104 <configuartion>
     2b0:	f0 91 05 01 	lds	r31, 0x0105	; 0x800105 <configuartion+0x1>
     2b4:	81 e0       	ldi	r24, 0x01	; 1
     2b6:	81 83       	std	Z+1, r24	; 0x01
    configuartion->Compare = OCIE_ENABLE; // to control the ultraSonic and motors
     2b8:	e0 91 04 01 	lds	r30, 0x0104	; 0x800104 <configuartion>
     2bc:	f0 91 05 01 	lds	r31, 0x0105	; 0x800105 <configuartion+0x1>
     2c0:	92 e0       	ldi	r25, 0x02	; 2
     2c2:	92 83       	std	Z+2, r25	; 0x02
    configuartion->CLK = PRESCALING_CLK64;
     2c4:	83 e0       	ldi	r24, 0x03	; 3
     2c6:	83 83       	std	Z+3, r24	; 0x03
    configuartion->PWM0_MODE = Fast_PWM;
     2c8:	20 e4       	ldi	r18, 0x40	; 64
     2ca:	24 83       	std	Z+4, r18	; 0x04
    configuartion->PWM0_STATE = PWM0_STATE_Disable;
     2cc:	15 82       	std	Z+5, r1	; 0x05

    configuartion_1->MODE = PWM1_Fast_ICR1_MODE;
     2ce:	e0 91 02 01 	lds	r30, 0x0102	; 0x800102 <__data_end>
     2d2:	f0 91 03 01 	lds	r31, 0x0103	; 0x800103 <__data_end+0x1>
     2d6:	2e e0       	ldi	r18, 0x0E	; 14
     2d8:	20 83       	st	Z, r18
    configuartion_1->OCAM_Interrupt = OCMIE1A_Enable;
     2da:	e0 91 02 01 	lds	r30, 0x0102	; 0x800102 <__data_end>
     2de:	f0 91 03 01 	lds	r31, 0x0103	; 0x800103 <__data_end+0x1>
     2e2:	20 e1       	ldi	r18, 0x10	; 16
     2e4:	23 83       	std	Z+3, r18	; 0x03
    configuartion_1->OCBM_Interrupt = OCMIE1B_Enable;
     2e6:	28 e0       	ldi	r18, 0x08	; 8
     2e8:	24 83       	std	Z+4, r18	; 0x04
    configuartion_1->SELECT_CHANNEL = TIMER1_SELECT_CHANNEL_A_B;
     2ea:	91 83       	std	Z+1, r25	; 0x01
    configuartion_1->PRESCALER_CLK = PRESCALING_CLK64;
     2ec:	e0 91 02 01 	lds	r30, 0x0102	; 0x800102 <__data_end>
     2f0:	f0 91 03 01 	lds	r31, 0x0103	; 0x800103 <__data_end+0x1>
     2f4:	82 83       	std	Z+2, r24	; 0x02
    configuartion_1->OVF_Interrupt = TOVIE1_Disable;
     2f6:	8b ef       	ldi	r24, 0xFB	; 251
     2f8:	85 83       	std	Z+5, r24	; 0x05
    configuartion_1->PWM1_STATE = PWM1_STATE_CHA_CHB_INVERTING;
     2fa:	80 ef       	ldi	r24, 0xF0	; 240
     2fc:	86 83       	std	Z+6, r24	; 0x06

    TIMER0_Init(configuartion);
     2fe:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <configuartion>
     302:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <configuartion+0x1>
     306:	0e 94 e4 21 	call	0x43c8	; 0x43c8 <TIMER0_Init>
    TIMER1_Init(configuartion_1);
     30a:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__data_end>
     30e:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <__data_end+0x1>
     312:	0e 94 35 22 	call	0x446a	; 0x446a <TIMER1_Init>

    TIMER1_SetICR1Value(0x00FF);
     316:	8f ef       	ldi	r24, 0xFF	; 255
     318:	90 e0       	ldi	r25, 0x00	; 0
     31a:	0e 94 a7 22 	call	0x454e	; 0x454e <TIMER1_SetICR1Value>

    TIMER0_Stop();
     31e:	0e 94 9a 21 	call	0x4334	; 0x4334 <TIMER0_Stop>
    TIMER1_Stop();
     322:	0e 94 a3 22 	call	0x4546	; 0x4546 <TIMER1_Stop>

    GIE_enable();
     326:	0e 94 58 21 	call	0x42b0	; 0x42b0 <GIE_enable>

    // Initial position and orientation
    x_cor = 0;
     32a:	10 92 4d 06 	sts	0x064D, r1	; 0x80064d <x_cor>
    y_cor = 0;
     32e:	10 92 48 03 	sts	0x0348, r1	; 0x800348 <y_cor>
    face = north;
     332:	10 92 49 03 	sts	0x0349, r1	; 0x800349 <face>

    // Initialize maze-related arrays
    array_null();
     336:	0e 94 88 00 	call	0x110	; 0x110 <array_null>
    if (isNavigating)
     33a:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
     33e:	88 23       	and	r24, r24
     340:	19 f0       	breq	.+6      	; 0x348 <G_Init+0x190>
        Cells_init_FloodFill();
     342:	0e 94 ab 00 	call	0x156	; 0x156 <Cells_init_FloodFill>
     346:	08 95       	ret
    else
        readMazeFromEEPROM();
     348:	0e 94 a7 01 	call	0x34e	; 0x34e <readMazeFromEEPROM>
     34c:	08 95       	ret

0000034e <readMazeFromEEPROM>:
    {
        lowestIndex = west;
    }

    return lowestIndex;
}
     34e:	0f 93       	push	r16
     350:	1f 93       	push	r17
     352:	cf 93       	push	r28
     354:	df 93       	push	r29
     356:	00 e0       	ldi	r16, 0x00	; 0
     358:	10 e0       	ldi	r17, 0x00	; 0
     35a:	1e c0       	rjmp	.+60     	; 0x398 <readMazeFromEEPROM+0x4a>
     35c:	90 2f       	mov	r25, r16
     35e:	99 0f       	add	r25, r25
     360:	89 2f       	mov	r24, r25
     362:	88 0f       	add	r24, r24
     364:	88 0f       	add	r24, r24
     366:	89 0f       	add	r24, r25
     368:	8c 0f       	add	r24, r28
     36a:	0e 94 00 21 	call	0x4200	; 0x4200 <EEPROM_read>
     36e:	f8 01       	movw	r30, r16
     370:	e2 95       	swap	r30
     372:	f2 95       	swap	r31
     374:	f0 7f       	andi	r31, 0xF0	; 240
     376:	fe 27       	eor	r31, r30
     378:	e0 7f       	andi	r30, 0xF0	; 240
     37a:	fe 27       	eor	r31, r30
     37c:	e1 5b       	subi	r30, 0xB1	; 177
     37e:	f9 4f       	sbci	r31, 0xF9	; 249
     380:	ec 0f       	add	r30, r28
     382:	fd 1f       	adc	r31, r29
     384:	80 83       	st	Z, r24
     386:	21 96       	adiw	r28, 0x01	; 1
     388:	02 c0       	rjmp	.+4      	; 0x38e <readMazeFromEEPROM+0x40>
     38a:	c0 e0       	ldi	r28, 0x00	; 0
     38c:	d0 e0       	ldi	r29, 0x00	; 0
     38e:	c0 31       	cpi	r28, 0x10	; 16
     390:	d1 05       	cpc	r29, r1
     392:	24 f3       	brlt	.-56     	; 0x35c <readMazeFromEEPROM+0xe>
     394:	0f 5f       	subi	r16, 0xFF	; 255
     396:	1f 4f       	sbci	r17, 0xFF	; 255
     398:	00 31       	cpi	r16, 0x10	; 16
     39a:	11 05       	cpc	r17, r1
     39c:	b4 f3       	brlt	.-20     	; 0x38a <readMazeFromEEPROM+0x3c>
     39e:	00 e0       	ldi	r16, 0x00	; 0
     3a0:	10 e0       	ldi	r17, 0x00	; 0
     3a2:	1d c0       	rjmp	.+58     	; 0x3de <readMazeFromEEPROM+0x90>
     3a4:	8c 2f       	mov	r24, r28
     3a6:	90 e1       	ldi	r25, 0x10	; 16
     3a8:	09 9f       	mul	r16, r25
     3aa:	80 0d       	add	r24, r0
     3ac:	11 24       	eor	r1, r1
     3ae:	8a 55       	subi	r24, 0x5A	; 90
     3b0:	0e 94 00 21 	call	0x4200	; 0x4200 <EEPROM_read>
     3b4:	f8 01       	movw	r30, r16
     3b6:	e2 95       	swap	r30
     3b8:	f2 95       	swap	r31
     3ba:	f0 7f       	andi	r31, 0xF0	; 240
     3bc:	fe 27       	eor	r31, r30
     3be:	e0 7f       	andi	r30, 0xF0	; 240
     3c0:	fe 27       	eor	r31, r30
     3c2:	e2 5e       	subi	r30, 0xE2	; 226
     3c4:	fd 4f       	sbci	r31, 0xFD	; 253
     3c6:	ec 0f       	add	r30, r28
     3c8:	fd 1f       	adc	r31, r29
     3ca:	80 83       	st	Z, r24
     3cc:	21 96       	adiw	r28, 0x01	; 1
     3ce:	02 c0       	rjmp	.+4      	; 0x3d4 <readMazeFromEEPROM+0x86>
     3d0:	c0 e0       	ldi	r28, 0x00	; 0
     3d2:	d0 e0       	ldi	r29, 0x00	; 0
     3d4:	c0 31       	cpi	r28, 0x10	; 16
     3d6:	d1 05       	cpc	r29, r1
     3d8:	2c f3       	brlt	.-54     	; 0x3a4 <readMazeFromEEPROM+0x56>
     3da:	0f 5f       	subi	r16, 0xFF	; 255
     3dc:	1f 4f       	sbci	r17, 0xFF	; 255
     3de:	01 31       	cpi	r16, 0x11	; 17
     3e0:	11 05       	cpc	r17, r1
     3e2:	b4 f3       	brlt	.-20     	; 0x3d0 <readMazeFromEEPROM+0x82>
     3e4:	00 e0       	ldi	r16, 0x00	; 0
     3e6:	10 e0       	ldi	r17, 0x00	; 0
     3e8:	1c c0       	rjmp	.+56     	; 0x422 <__EEPROM_REGION_LENGTH__+0x22>
     3ea:	8c 2f       	mov	r24, r28
     3ec:	90 e1       	ldi	r25, 0x10	; 16
     3ee:	09 9f       	mul	r16, r25
     3f0:	80 0d       	add	r24, r0
     3f2:	11 24       	eor	r1, r1
     3f4:	84 5b       	subi	r24, 0xB4	; 180
     3f6:	0e 94 00 21 	call	0x4200	; 0x4200 <EEPROM_read>
     3fa:	91 e1       	ldi	r25, 0x11	; 17
     3fc:	90 9f       	mul	r25, r16
     3fe:	f0 01       	movw	r30, r0
     400:	91 9f       	mul	r25, r17
     402:	f0 0d       	add	r31, r0
     404:	11 24       	eor	r1, r1
     406:	e2 5f       	subi	r30, 0xF2	; 242
     408:	fe 4f       	sbci	r31, 0xFE	; 254
     40a:	ec 0f       	add	r30, r28
     40c:	fd 1f       	adc	r31, r29
     40e:	80 83       	st	Z, r24
     410:	21 96       	adiw	r28, 0x01	; 1
     412:	02 c0       	rjmp	.+4      	; 0x418 <__EEPROM_REGION_LENGTH__+0x18>
     414:	c0 e0       	ldi	r28, 0x00	; 0
     416:	d0 e0       	ldi	r29, 0x00	; 0
     418:	c1 31       	cpi	r28, 0x11	; 17
     41a:	d1 05       	cpc	r29, r1
     41c:	34 f3       	brlt	.-52     	; 0x3ea <readMazeFromEEPROM+0x9c>
     41e:	0f 5f       	subi	r16, 0xFF	; 255
     420:	1f 4f       	sbci	r17, 0xFF	; 255
     422:	00 31       	cpi	r16, 0x10	; 16
     424:	11 05       	cpc	r17, r1
     426:	b4 f3       	brlt	.-20     	; 0x414 <__EEPROM_REGION_LENGTH__+0x14>
     428:	df 91       	pop	r29
     42a:	cf 91       	pop	r28
     42c:	1f 91       	pop	r17
     42e:	0f 91       	pop	r16
     430:	08 95       	ret

00000432 <setVerticalWall>:
     432:	81 31       	cpi	r24, 0x11	; 17
     434:	78 f4       	brcc	.+30     	; 0x454 <setVerticalWall+0x22>
     436:	60 31       	cpi	r22, 0x10	; 16
     438:	68 f4       	brcc	.+26     	; 0x454 <setVerticalWall+0x22>
     43a:	28 2f       	mov	r18, r24
     43c:	86 2f       	mov	r24, r22
     43e:	90 e0       	ldi	r25, 0x00	; 0
     440:	30 e1       	ldi	r19, 0x10	; 16
     442:	23 9f       	mul	r18, r19
     444:	80 0d       	add	r24, r0
     446:	91 1d       	adc	r25, r1
     448:	11 24       	eor	r1, r1
     44a:	61 e0       	ldi	r22, 0x01	; 1
     44c:	8a 55       	subi	r24, 0x5A	; 90
     44e:	9f 4f       	sbci	r25, 0xFF	; 255
     450:	0e 94 e1 20 	call	0x41c2	; 0x41c2 <EEPROM_write>
     454:	08 95       	ret

00000456 <setHorizontalWall>:
     456:	80 31       	cpi	r24, 0x10	; 16
     458:	78 f4       	brcc	.+30     	; 0x478 <setHorizontalWall+0x22>
     45a:	61 31       	cpi	r22, 0x11	; 17
     45c:	68 f4       	brcc	.+26     	; 0x478 <setHorizontalWall+0x22>
     45e:	28 2f       	mov	r18, r24
     460:	86 2f       	mov	r24, r22
     462:	90 e0       	ldi	r25, 0x00	; 0
     464:	30 e1       	ldi	r19, 0x10	; 16
     466:	23 9f       	mul	r18, r19
     468:	80 0d       	add	r24, r0
     46a:	91 1d       	adc	r25, r1
     46c:	11 24       	eor	r1, r1
     46e:	61 e0       	ldi	r22, 0x01	; 1
     470:	84 5b       	subi	r24, 0xB4	; 180
     472:	9e 4f       	sbci	r25, 0xFE	; 254
     474:	0e 94 e1 20 	call	0x41c2	; 0x41c2 <EEPROM_write>
     478:	08 95       	ret

0000047a <Solve_2_ways>:
     47a:	cf 93       	push	r28
     47c:	df 93       	push	r29
     47e:	80 91 4e 06 	lds	r24, 0x064E	; 0x80064e <way_front>
     482:	88 23       	and	r24, r24
     484:	09 f4       	brne	.+2      	; 0x488 <Solve_2_ways+0xe>
     486:	3f c2       	rjmp	.+1150   	; 0x906 <__stack+0x7>
     488:	80 91 49 03 	lds	r24, 0x0349	; 0x800349 <face>
     48c:	81 11       	cpse	r24, r1
     48e:	91 c0       	rjmp	.+290    	; 0x5b2 <Solve_2_ways+0x138>
     490:	20 91 4d 06 	lds	r18, 0x064D	; 0x80064d <x_cor>
     494:	30 e0       	ldi	r19, 0x00	; 0
     496:	a9 01       	movw	r20, r18
     498:	4f 5f       	subi	r20, 0xFF	; 255
     49a:	5f 4f       	sbci	r21, 0xFF	; 255
     49c:	80 91 48 03 	lds	r24, 0x0348	; 0x800348 <y_cor>
     4a0:	90 e0       	ldi	r25, 0x00	; 0
     4a2:	fa 01       	movw	r30, r20
     4a4:	e2 95       	swap	r30
     4a6:	f2 95       	swap	r31
     4a8:	f0 7f       	andi	r31, 0xF0	; 240
     4aa:	fe 27       	eor	r31, r30
     4ac:	e0 7f       	andi	r30, 0xF0	; 240
     4ae:	fe 27       	eor	r31, r30
     4b0:	e3 5b       	subi	r30, 0xB3	; 179
     4b2:	fa 4f       	sbci	r31, 0xFA	; 250
     4b4:	e8 0f       	add	r30, r24
     4b6:	f9 1f       	adc	r31, r25
     4b8:	a0 81       	ld	r26, Z
     4ba:	b9 01       	movw	r22, r18
     4bc:	61 50       	subi	r22, 0x01	; 1
     4be:	71 09       	sbc	r23, r1
     4c0:	fb 01       	movw	r30, r22
     4c2:	e2 95       	swap	r30
     4c4:	f2 95       	swap	r31
     4c6:	f0 7f       	andi	r31, 0xF0	; 240
     4c8:	fe 27       	eor	r31, r30
     4ca:	e0 7f       	andi	r30, 0xF0	; 240
     4cc:	fe 27       	eor	r31, r30
     4ce:	e3 5b       	subi	r30, 0xB3	; 179
     4d0:	fa 4f       	sbci	r31, 0xFA	; 250
     4d2:	e8 0f       	add	r30, r24
     4d4:	f9 1f       	adc	r31, r25
     4d6:	e0 81       	ld	r30, Z
     4d8:	ae 13       	cpse	r26, r30
     4da:	5c c0       	rjmp	.+184    	; 0x594 <Solve_2_ways+0x11a>
     4dc:	da 01       	movw	r26, r20
     4de:	a8 0f       	add	r26, r24
     4e0:	b9 1f       	adc	r27, r25
     4e2:	fc 01       	movw	r30, r24
     4e4:	e6 0f       	add	r30, r22
     4e6:	f7 1f       	adc	r31, r23
     4e8:	ae 17       	cp	r26, r30
     4ea:	bf 07       	cpc	r27, r31
     4ec:	2c f4       	brge	.+10     	; 0x4f8 <Solve_2_ways+0x7e>
     4ee:	0e 94 55 12 	call	0x24aa	; 0x24aa <rotate_right>
     4f2:	0e 94 9e 12 	call	0x253c	; 0x253c <forward>
     4f6:	0c c7       	rjmp	.+3608   	; 0x1310 <__stack+0xa11>
     4f8:	ea 17       	cp	r30, r26
     4fa:	fb 07       	cpc	r31, r27
     4fc:	2c f4       	brge	.+10     	; 0x508 <Solve_2_ways+0x8e>
     4fe:	0e 94 0c 12 	call	0x2418	; 0x2418 <rotate_left>
     502:	0e 94 9e 12 	call	0x253c	; 0x253c <forward>
     506:	04 c7       	rjmp	.+3592   	; 0x1310 <__stack+0xa11>
     508:	f9 01       	movw	r30, r18
     50a:	32 96       	adiw	r30, 0x02	; 2
     50c:	e2 95       	swap	r30
     50e:	f2 95       	swap	r31
     510:	f0 7f       	andi	r31, 0xF0	; 240
     512:	fe 27       	eor	r31, r30
     514:	e0 7f       	andi	r30, 0xF0	; 240
     516:	fe 27       	eor	r31, r30
     518:	e2 5e       	subi	r30, 0xE2	; 226
     51a:	fd 4f       	sbci	r31, 0xFD	; 253
     51c:	e8 0f       	add	r30, r24
     51e:	f9 1f       	adc	r31, r25
     520:	b0 81       	ld	r27, Z
     522:	a1 e1       	ldi	r26, 0x11	; 17
     524:	a4 9f       	mul	r26, r20
     526:	f0 01       	movw	r30, r0
     528:	a5 9f       	mul	r26, r21
     52a:	f0 0d       	add	r31, r0
     52c:	11 24       	eor	r1, r1
     52e:	e2 5f       	subi	r30, 0xF2	; 242
     530:	fe 4f       	sbci	r31, 0xFE	; 254
     532:	e8 0f       	add	r30, r24
     534:	f9 1f       	adc	r31, r25
     536:	20 81       	ld	r18, Z
     538:	30 e0       	ldi	r19, 0x00	; 0
     53a:	2b 0f       	add	r18, r27
     53c:	31 1d       	adc	r19, r1
     53e:	fb 01       	movw	r30, r22
     540:	e2 95       	swap	r30
     542:	f2 95       	swap	r31
     544:	f0 7f       	andi	r31, 0xF0	; 240
     546:	fe 27       	eor	r31, r30
     548:	e0 7f       	andi	r30, 0xF0	; 240
     54a:	fe 27       	eor	r31, r30
     54c:	e2 5e       	subi	r30, 0xE2	; 226
     54e:	fd 4f       	sbci	r31, 0xFD	; 253
     550:	e8 0f       	add	r30, r24
     552:	f9 1f       	adc	r31, r25
     554:	e0 81       	ld	r30, Z
     556:	a6 9f       	mul	r26, r22
     558:	a0 01       	movw	r20, r0
     55a:	a7 9f       	mul	r26, r23
     55c:	50 0d       	add	r21, r0
     55e:	11 24       	eor	r1, r1
     560:	42 5f       	subi	r20, 0xF2	; 242
     562:	5e 4f       	sbci	r21, 0xFE	; 254
     564:	da 01       	movw	r26, r20
     566:	a8 0f       	add	r26, r24
     568:	b9 1f       	adc	r27, r25
     56a:	8c 91       	ld	r24, X
     56c:	90 e0       	ldi	r25, 0x00	; 0
     56e:	8e 0f       	add	r24, r30
     570:	91 1d       	adc	r25, r1
     572:	28 17       	cp	r18, r24
     574:	39 07       	cpc	r19, r25
     576:	2c f4       	brge	.+10     	; 0x582 <Solve_2_ways+0x108>
     578:	0e 94 55 12 	call	0x24aa	; 0x24aa <rotate_right>
     57c:	0e 94 9e 12 	call	0x253c	; 0x253c <forward>
     580:	c7 c6       	rjmp	.+3470   	; 0x1310 <__stack+0xa11>
     582:	82 17       	cp	r24, r18
     584:	93 07       	cpc	r25, r19
     586:	0c f0       	brlt	.+2      	; 0x58a <Solve_2_ways+0x110>
     588:	c3 c6       	rjmp	.+3462   	; 0x1310 <__stack+0xa11>
     58a:	0e 94 0c 12 	call	0x2418	; 0x2418 <rotate_left>
     58e:	0e 94 9e 12 	call	0x253c	; 0x253c <forward>
     592:	be c6       	rjmp	.+3452   	; 0x1310 <__stack+0xa11>
     594:	ae 17       	cp	r26, r30
     596:	28 f4       	brcc	.+10     	; 0x5a2 <Solve_2_ways+0x128>
     598:	0e 94 55 12 	call	0x24aa	; 0x24aa <rotate_right>
     59c:	0e 94 9e 12 	call	0x253c	; 0x253c <forward>
     5a0:	b7 c6       	rjmp	.+3438   	; 0x1310 <__stack+0xa11>
     5a2:	ea 17       	cp	r30, r26
     5a4:	08 f0       	brcs	.+2      	; 0x5a8 <Solve_2_ways+0x12e>
     5a6:	b4 c6       	rjmp	.+3432   	; 0x1310 <__stack+0xa11>
     5a8:	0e 94 0c 12 	call	0x2418	; 0x2418 <rotate_left>
     5ac:	0e 94 9e 12 	call	0x253c	; 0x253c <forward>
     5b0:	af c6       	rjmp	.+3422   	; 0x1310 <__stack+0xa11>
     5b2:	82 30       	cpi	r24, 0x02	; 2
     5b4:	09 f0       	breq	.+2      	; 0x5b8 <Solve_2_ways+0x13e>
     5b6:	91 c0       	rjmp	.+290    	; 0x6da <Solve_2_ways+0x260>
     5b8:	20 91 4d 06 	lds	r18, 0x064D	; 0x80064d <x_cor>
     5bc:	30 e0       	ldi	r19, 0x00	; 0
     5be:	a9 01       	movw	r20, r18
     5c0:	4f 5f       	subi	r20, 0xFF	; 255
     5c2:	5f 4f       	sbci	r21, 0xFF	; 255
     5c4:	80 91 48 03 	lds	r24, 0x0348	; 0x800348 <y_cor>
     5c8:	90 e0       	ldi	r25, 0x00	; 0
     5ca:	fa 01       	movw	r30, r20
     5cc:	e2 95       	swap	r30
     5ce:	f2 95       	swap	r31
     5d0:	f0 7f       	andi	r31, 0xF0	; 240
     5d2:	fe 27       	eor	r31, r30
     5d4:	e0 7f       	andi	r30, 0xF0	; 240
     5d6:	fe 27       	eor	r31, r30
     5d8:	e3 5b       	subi	r30, 0xB3	; 179
     5da:	fa 4f       	sbci	r31, 0xFA	; 250
     5dc:	e8 0f       	add	r30, r24
     5de:	f9 1f       	adc	r31, r25
     5e0:	a0 81       	ld	r26, Z
     5e2:	b9 01       	movw	r22, r18
     5e4:	61 50       	subi	r22, 0x01	; 1
     5e6:	71 09       	sbc	r23, r1
     5e8:	fb 01       	movw	r30, r22
     5ea:	e2 95       	swap	r30
     5ec:	f2 95       	swap	r31
     5ee:	f0 7f       	andi	r31, 0xF0	; 240
     5f0:	fe 27       	eor	r31, r30
     5f2:	e0 7f       	andi	r30, 0xF0	; 240
     5f4:	fe 27       	eor	r31, r30
     5f6:	e3 5b       	subi	r30, 0xB3	; 179
     5f8:	fa 4f       	sbci	r31, 0xFA	; 250
     5fa:	e8 0f       	add	r30, r24
     5fc:	f9 1f       	adc	r31, r25
     5fe:	e0 81       	ld	r30, Z
     600:	ae 13       	cpse	r26, r30
     602:	5c c0       	rjmp	.+184    	; 0x6bc <Solve_2_ways+0x242>
     604:	da 01       	movw	r26, r20
     606:	a8 0f       	add	r26, r24
     608:	b9 1f       	adc	r27, r25
     60a:	fc 01       	movw	r30, r24
     60c:	e6 0f       	add	r30, r22
     60e:	f7 1f       	adc	r31, r23
     610:	ae 17       	cp	r26, r30
     612:	bf 07       	cpc	r27, r31
     614:	2c f4       	brge	.+10     	; 0x620 <Solve_2_ways+0x1a6>
     616:	0e 94 0c 12 	call	0x2418	; 0x2418 <rotate_left>
     61a:	0e 94 9e 12 	call	0x253c	; 0x253c <forward>
     61e:	78 c6       	rjmp	.+3312   	; 0x1310 <__stack+0xa11>
     620:	ea 17       	cp	r30, r26
     622:	fb 07       	cpc	r31, r27
     624:	2c f4       	brge	.+10     	; 0x630 <Solve_2_ways+0x1b6>
     626:	0e 94 55 12 	call	0x24aa	; 0x24aa <rotate_right>
     62a:	0e 94 9e 12 	call	0x253c	; 0x253c <forward>
     62e:	70 c6       	rjmp	.+3296   	; 0x1310 <__stack+0xa11>
     630:	f9 01       	movw	r30, r18
     632:	32 96       	adiw	r30, 0x02	; 2
     634:	e2 95       	swap	r30
     636:	f2 95       	swap	r31
     638:	f0 7f       	andi	r31, 0xF0	; 240
     63a:	fe 27       	eor	r31, r30
     63c:	e0 7f       	andi	r30, 0xF0	; 240
     63e:	fe 27       	eor	r31, r30
     640:	e2 5e       	subi	r30, 0xE2	; 226
     642:	fd 4f       	sbci	r31, 0xFD	; 253
     644:	e8 0f       	add	r30, r24
     646:	f9 1f       	adc	r31, r25
     648:	b0 81       	ld	r27, Z
     64a:	a1 e1       	ldi	r26, 0x11	; 17
     64c:	a4 9f       	mul	r26, r20
     64e:	f0 01       	movw	r30, r0
     650:	a5 9f       	mul	r26, r21
     652:	f0 0d       	add	r31, r0
     654:	11 24       	eor	r1, r1
     656:	e2 5f       	subi	r30, 0xF2	; 242
     658:	fe 4f       	sbci	r31, 0xFE	; 254
     65a:	e8 0f       	add	r30, r24
     65c:	f9 1f       	adc	r31, r25
     65e:	20 81       	ld	r18, Z
     660:	30 e0       	ldi	r19, 0x00	; 0
     662:	2b 0f       	add	r18, r27
     664:	31 1d       	adc	r19, r1
     666:	fb 01       	movw	r30, r22
     668:	e2 95       	swap	r30
     66a:	f2 95       	swap	r31
     66c:	f0 7f       	andi	r31, 0xF0	; 240
     66e:	fe 27       	eor	r31, r30
     670:	e0 7f       	andi	r30, 0xF0	; 240
     672:	fe 27       	eor	r31, r30
     674:	e2 5e       	subi	r30, 0xE2	; 226
     676:	fd 4f       	sbci	r31, 0xFD	; 253
     678:	e8 0f       	add	r30, r24
     67a:	f9 1f       	adc	r31, r25
     67c:	e0 81       	ld	r30, Z
     67e:	a6 9f       	mul	r26, r22
     680:	a0 01       	movw	r20, r0
     682:	a7 9f       	mul	r26, r23
     684:	50 0d       	add	r21, r0
     686:	11 24       	eor	r1, r1
     688:	42 5f       	subi	r20, 0xF2	; 242
     68a:	5e 4f       	sbci	r21, 0xFE	; 254
     68c:	da 01       	movw	r26, r20
     68e:	a8 0f       	add	r26, r24
     690:	b9 1f       	adc	r27, r25
     692:	8c 91       	ld	r24, X
     694:	90 e0       	ldi	r25, 0x00	; 0
     696:	8e 0f       	add	r24, r30
     698:	91 1d       	adc	r25, r1
     69a:	28 17       	cp	r18, r24
     69c:	39 07       	cpc	r19, r25
     69e:	2c f4       	brge	.+10     	; 0x6aa <Solve_2_ways+0x230>
     6a0:	0e 94 0c 12 	call	0x2418	; 0x2418 <rotate_left>
     6a4:	0e 94 9e 12 	call	0x253c	; 0x253c <forward>
     6a8:	33 c6       	rjmp	.+3174   	; 0x1310 <__stack+0xa11>
     6aa:	82 17       	cp	r24, r18
     6ac:	93 07       	cpc	r25, r19
     6ae:	0c f0       	brlt	.+2      	; 0x6b2 <Solve_2_ways+0x238>
     6b0:	2f c6       	rjmp	.+3166   	; 0x1310 <__stack+0xa11>
     6b2:	0e 94 55 12 	call	0x24aa	; 0x24aa <rotate_right>
     6b6:	0e 94 9e 12 	call	0x253c	; 0x253c <forward>
     6ba:	2a c6       	rjmp	.+3156   	; 0x1310 <__stack+0xa11>
     6bc:	ae 17       	cp	r26, r30
     6be:	28 f4       	brcc	.+10     	; 0x6ca <Solve_2_ways+0x250>
     6c0:	0e 94 0c 12 	call	0x2418	; 0x2418 <rotate_left>
     6c4:	0e 94 9e 12 	call	0x253c	; 0x253c <forward>
     6c8:	23 c6       	rjmp	.+3142   	; 0x1310 <__stack+0xa11>
     6ca:	ea 17       	cp	r30, r26
     6cc:	08 f0       	brcs	.+2      	; 0x6d0 <Solve_2_ways+0x256>
     6ce:	20 c6       	rjmp	.+3136   	; 0x1310 <__stack+0xa11>
     6d0:	0e 94 55 12 	call	0x24aa	; 0x24aa <rotate_right>
     6d4:	0e 94 9e 12 	call	0x253c	; 0x253c <forward>
     6d8:	1b c6       	rjmp	.+3126   	; 0x1310 <__stack+0xa11>
     6da:	81 30       	cpi	r24, 0x01	; 1
     6dc:	09 f0       	breq	.+2      	; 0x6e0 <Solve_2_ways+0x266>
     6de:	88 c0       	rjmp	.+272    	; 0x7f0 <Solve_2_ways+0x376>
     6e0:	80 91 4d 06 	lds	r24, 0x064D	; 0x80064d <x_cor>
     6e4:	48 2f       	mov	r20, r24
     6e6:	50 e0       	ldi	r21, 0x00	; 0
     6e8:	90 91 48 03 	lds	r25, 0x0348	; 0x800348 <y_cor>
     6ec:	89 2f       	mov	r24, r25
     6ee:	90 e0       	ldi	r25, 0x00	; 0
     6f0:	fc 01       	movw	r30, r24
     6f2:	31 96       	adiw	r30, 0x01	; 1
     6f4:	9a 01       	movw	r18, r20
     6f6:	22 95       	swap	r18
     6f8:	32 95       	swap	r19
     6fa:	30 7f       	andi	r19, 0xF0	; 240
     6fc:	32 27       	eor	r19, r18
     6fe:	20 7f       	andi	r18, 0xF0	; 240
     700:	32 27       	eor	r19, r18
     702:	23 5b       	subi	r18, 0xB3	; 179
     704:	3a 4f       	sbci	r19, 0xFA	; 250
     706:	d9 01       	movw	r26, r18
     708:	ae 0f       	add	r26, r30
     70a:	bf 1f       	adc	r27, r31
     70c:	6c 91       	ld	r22, X
     70e:	01 97       	sbiw	r24, 0x01	; 1
     710:	d9 01       	movw	r26, r18
     712:	a8 0f       	add	r26, r24
     714:	b9 1f       	adc	r27, r25
     716:	2c 91       	ld	r18, X
     718:	62 13       	cpse	r22, r18
     71a:	5b c0       	rjmp	.+182    	; 0x7d2 <Solve_2_ways+0x358>
     71c:	e4 0f       	add	r30, r20
     71e:	f5 1f       	adc	r31, r21
     720:	84 0f       	add	r24, r20
     722:	95 1f       	adc	r25, r21
     724:	e8 17       	cp	r30, r24
     726:	f9 07       	cpc	r31, r25
     728:	24 f4       	brge	.+8      	; 0x732 <Solve_2_ways+0x2b8>
     72a:	0e 94 0c 12 	call	0x2418	; 0x2418 <rotate_left>
     72e:	0e 94 9e 12 	call	0x253c	; 0x253c <forward>
     732:	20 91 4d 06 	lds	r18, 0x064D	; 0x80064d <x_cor>
     736:	30 e0       	ldi	r19, 0x00	; 0
     738:	80 91 48 03 	lds	r24, 0x0348	; 0x800348 <y_cor>
     73c:	90 e0       	ldi	r25, 0x00	; 0
     73e:	dc 01       	movw	r26, r24
     740:	11 96       	adiw	r26, 0x01	; 1
     742:	b9 01       	movw	r22, r18
     744:	6a 0f       	add	r22, r26
     746:	7b 1f       	adc	r23, r27
     748:	01 97       	sbiw	r24, 0x01	; 1
     74a:	a9 01       	movw	r20, r18
     74c:	48 0f       	add	r20, r24
     74e:	59 1f       	adc	r21, r25
     750:	46 17       	cp	r20, r22
     752:	57 07       	cpc	r21, r23
     754:	2c f4       	brge	.+10     	; 0x760 <Solve_2_ways+0x2e6>
     756:	0e 94 55 12 	call	0x24aa	; 0x24aa <rotate_right>
     75a:	0e 94 9e 12 	call	0x253c	; 0x253c <forward>
     75e:	d8 c5       	rjmp	.+2992   	; 0x1310 <__stack+0xa11>
     760:	f9 01       	movw	r30, r18
     762:	e2 95       	swap	r30
     764:	f2 95       	swap	r31
     766:	f0 7f       	andi	r31, 0xF0	; 240
     768:	fe 27       	eor	r31, r30
     76a:	e0 7f       	andi	r30, 0xF0	; 240
     76c:	fe 27       	eor	r31, r30
     76e:	bf 01       	movw	r22, r30
     770:	62 5e       	subi	r22, 0xE2	; 226
     772:	7d 4f       	sbci	r23, 0xFD	; 253
     774:	fb 01       	movw	r30, r22
     776:	ea 0f       	add	r30, r26
     778:	fb 1f       	adc	r31, r27
     77a:	c0 81       	ld	r28, Z
     77c:	e1 e1       	ldi	r30, 0x11	; 17
     77e:	e2 9f       	mul	r30, r18
     780:	a0 01       	movw	r20, r0
     782:	e3 9f       	mul	r30, r19
     784:	50 0d       	add	r21, r0
     786:	11 24       	eor	r1, r1
     788:	42 5f       	subi	r20, 0xF2	; 242
     78a:	5e 4f       	sbci	r21, 0xFE	; 254
     78c:	fa 01       	movw	r30, r20
     78e:	ea 0f       	add	r30, r26
     790:	fb 1f       	adc	r31, r27
     792:	20 81       	ld	r18, Z
     794:	30 e0       	ldi	r19, 0x00	; 0
     796:	2c 0f       	add	r18, r28
     798:	31 1d       	adc	r19, r1
     79a:	fb 01       	movw	r30, r22
     79c:	e8 0f       	add	r30, r24
     79e:	f9 1f       	adc	r31, r25
     7a0:	60 81       	ld	r22, Z
     7a2:	fa 01       	movw	r30, r20
     7a4:	e8 0f       	add	r30, r24
     7a6:	f9 1f       	adc	r31, r25
     7a8:	80 81       	ld	r24, Z
     7aa:	90 e0       	ldi	r25, 0x00	; 0
     7ac:	86 0f       	add	r24, r22
     7ae:	91 1d       	adc	r25, r1
     7b0:	28 17       	cp	r18, r24
     7b2:	39 07       	cpc	r19, r25
     7b4:	2c f4       	brge	.+10     	; 0x7c0 <Solve_2_ways+0x346>
     7b6:	0e 94 0c 12 	call	0x2418	; 0x2418 <rotate_left>
     7ba:	0e 94 9e 12 	call	0x253c	; 0x253c <forward>
     7be:	a8 c5       	rjmp	.+2896   	; 0x1310 <__stack+0xa11>
     7c0:	82 17       	cp	r24, r18
     7c2:	93 07       	cpc	r25, r19
     7c4:	0c f0       	brlt	.+2      	; 0x7c8 <Solve_2_ways+0x34e>
     7c6:	a4 c5       	rjmp	.+2888   	; 0x1310 <__stack+0xa11>
     7c8:	0e 94 55 12 	call	0x24aa	; 0x24aa <rotate_right>
     7cc:	0e 94 9e 12 	call	0x253c	; 0x253c <forward>
     7d0:	9f c5       	rjmp	.+2878   	; 0x1310 <__stack+0xa11>
     7d2:	62 17       	cp	r22, r18
     7d4:	28 f4       	brcc	.+10     	; 0x7e0 <Solve_2_ways+0x366>
     7d6:	0e 94 0c 12 	call	0x2418	; 0x2418 <rotate_left>
     7da:	0e 94 9e 12 	call	0x253c	; 0x253c <forward>
     7de:	98 c5       	rjmp	.+2864   	; 0x1310 <__stack+0xa11>
     7e0:	26 17       	cp	r18, r22
     7e2:	08 f0       	brcs	.+2      	; 0x7e6 <Solve_2_ways+0x36c>
     7e4:	95 c5       	rjmp	.+2858   	; 0x1310 <__stack+0xa11>
     7e6:	0e 94 55 12 	call	0x24aa	; 0x24aa <rotate_right>
     7ea:	0e 94 9e 12 	call	0x253c	; 0x253c <forward>
     7ee:	90 c5       	rjmp	.+2848   	; 0x1310 <__stack+0xa11>
     7f0:	83 30       	cpi	r24, 0x03	; 3
     7f2:	09 f0       	breq	.+2      	; 0x7f6 <Solve_2_ways+0x37c>
     7f4:	8d c5       	rjmp	.+2842   	; 0x1310 <__stack+0xa11>
     7f6:	80 91 4d 06 	lds	r24, 0x064D	; 0x80064d <x_cor>
     7fa:	48 2f       	mov	r20, r24
     7fc:	50 e0       	ldi	r21, 0x00	; 0
     7fe:	90 91 48 03 	lds	r25, 0x0348	; 0x800348 <y_cor>
     802:	89 2f       	mov	r24, r25
     804:	90 e0       	ldi	r25, 0x00	; 0
     806:	fc 01       	movw	r30, r24
     808:	31 96       	adiw	r30, 0x01	; 1
     80a:	9a 01       	movw	r18, r20
     80c:	22 95       	swap	r18
     80e:	32 95       	swap	r19
     810:	30 7f       	andi	r19, 0xF0	; 240
     812:	32 27       	eor	r19, r18
     814:	20 7f       	andi	r18, 0xF0	; 240
     816:	32 27       	eor	r19, r18
     818:	23 5b       	subi	r18, 0xB3	; 179
     81a:	3a 4f       	sbci	r19, 0xFA	; 250
     81c:	d9 01       	movw	r26, r18
     81e:	ae 0f       	add	r26, r30
     820:	bf 1f       	adc	r27, r31
     822:	6c 91       	ld	r22, X
     824:	01 97       	sbiw	r24, 0x01	; 1
     826:	d9 01       	movw	r26, r18
     828:	a8 0f       	add	r26, r24
     82a:	b9 1f       	adc	r27, r25
     82c:	2c 91       	ld	r18, X
     82e:	62 13       	cpse	r22, r18
     830:	5b c0       	rjmp	.+182    	; 0x8e8 <__DATA_REGION_LENGTH__+0xe8>
     832:	e4 0f       	add	r30, r20
     834:	f5 1f       	adc	r31, r21
     836:	84 0f       	add	r24, r20
     838:	95 1f       	adc	r25, r21
     83a:	e8 17       	cp	r30, r24
     83c:	f9 07       	cpc	r31, r25
     83e:	24 f4       	brge	.+8      	; 0x848 <__DATA_REGION_LENGTH__+0x48>
     840:	0e 94 55 12 	call	0x24aa	; 0x24aa <rotate_right>
     844:	0e 94 9e 12 	call	0x253c	; 0x253c <forward>
     848:	20 91 4d 06 	lds	r18, 0x064D	; 0x80064d <x_cor>
     84c:	30 e0       	ldi	r19, 0x00	; 0
     84e:	80 91 48 03 	lds	r24, 0x0348	; 0x800348 <y_cor>
     852:	90 e0       	ldi	r25, 0x00	; 0
     854:	dc 01       	movw	r26, r24
     856:	11 96       	adiw	r26, 0x01	; 1
     858:	b9 01       	movw	r22, r18
     85a:	6a 0f       	add	r22, r26
     85c:	7b 1f       	adc	r23, r27
     85e:	01 97       	sbiw	r24, 0x01	; 1
     860:	a9 01       	movw	r20, r18
     862:	48 0f       	add	r20, r24
     864:	59 1f       	adc	r21, r25
     866:	46 17       	cp	r20, r22
     868:	57 07       	cpc	r21, r23
     86a:	2c f4       	brge	.+10     	; 0x876 <__DATA_REGION_LENGTH__+0x76>
     86c:	0e 94 0c 12 	call	0x2418	; 0x2418 <rotate_left>
     870:	0e 94 9e 12 	call	0x253c	; 0x253c <forward>
     874:	4d c5       	rjmp	.+2714   	; 0x1310 <__stack+0xa11>
     876:	f9 01       	movw	r30, r18
     878:	e2 95       	swap	r30
     87a:	f2 95       	swap	r31
     87c:	f0 7f       	andi	r31, 0xF0	; 240
     87e:	fe 27       	eor	r31, r30
     880:	e0 7f       	andi	r30, 0xF0	; 240
     882:	fe 27       	eor	r31, r30
     884:	bf 01       	movw	r22, r30
     886:	62 5e       	subi	r22, 0xE2	; 226
     888:	7d 4f       	sbci	r23, 0xFD	; 253
     88a:	fb 01       	movw	r30, r22
     88c:	ea 0f       	add	r30, r26
     88e:	fb 1f       	adc	r31, r27
     890:	c0 81       	ld	r28, Z
     892:	e1 e1       	ldi	r30, 0x11	; 17
     894:	e2 9f       	mul	r30, r18
     896:	a0 01       	movw	r20, r0
     898:	e3 9f       	mul	r30, r19
     89a:	50 0d       	add	r21, r0
     89c:	11 24       	eor	r1, r1
     89e:	42 5f       	subi	r20, 0xF2	; 242
     8a0:	5e 4f       	sbci	r21, 0xFE	; 254
     8a2:	fa 01       	movw	r30, r20
     8a4:	ea 0f       	add	r30, r26
     8a6:	fb 1f       	adc	r31, r27
     8a8:	20 81       	ld	r18, Z
     8aa:	30 e0       	ldi	r19, 0x00	; 0
     8ac:	2c 0f       	add	r18, r28
     8ae:	31 1d       	adc	r19, r1
     8b0:	fb 01       	movw	r30, r22
     8b2:	e8 0f       	add	r30, r24
     8b4:	f9 1f       	adc	r31, r25
     8b6:	60 81       	ld	r22, Z
     8b8:	fa 01       	movw	r30, r20
     8ba:	e8 0f       	add	r30, r24
     8bc:	f9 1f       	adc	r31, r25
     8be:	80 81       	ld	r24, Z
     8c0:	90 e0       	ldi	r25, 0x00	; 0
     8c2:	86 0f       	add	r24, r22
     8c4:	91 1d       	adc	r25, r1
     8c6:	28 17       	cp	r18, r24
     8c8:	39 07       	cpc	r19, r25
     8ca:	2c f4       	brge	.+10     	; 0x8d6 <__DATA_REGION_LENGTH__+0xd6>
     8cc:	0e 94 55 12 	call	0x24aa	; 0x24aa <rotate_right>
     8d0:	0e 94 9e 12 	call	0x253c	; 0x253c <forward>
     8d4:	1d c5       	rjmp	.+2618   	; 0x1310 <__stack+0xa11>
     8d6:	82 17       	cp	r24, r18
     8d8:	93 07       	cpc	r25, r19
     8da:	0c f0       	brlt	.+2      	; 0x8de <__DATA_REGION_LENGTH__+0xde>
     8dc:	19 c5       	rjmp	.+2610   	; 0x1310 <__stack+0xa11>
     8de:	0e 94 0c 12 	call	0x2418	; 0x2418 <rotate_left>
     8e2:	0e 94 9e 12 	call	0x253c	; 0x253c <forward>
     8e6:	14 c5       	rjmp	.+2600   	; 0x1310 <__stack+0xa11>
     8e8:	62 17       	cp	r22, r18
     8ea:	28 f4       	brcc	.+10     	; 0x8f6 <__DATA_REGION_LENGTH__+0xf6>
     8ec:	0e 94 55 12 	call	0x24aa	; 0x24aa <rotate_right>
     8f0:	0e 94 9e 12 	call	0x253c	; 0x253c <forward>
     8f4:	0d c5       	rjmp	.+2586   	; 0x1310 <__stack+0xa11>
     8f6:	26 17       	cp	r18, r22
     8f8:	08 f0       	brcs	.+2      	; 0x8fc <__DATA_REGION_LENGTH__+0xfc>
     8fa:	0a c5       	rjmp	.+2580   	; 0x1310 <__stack+0xa11>
     8fc:	0e 94 0c 12 	call	0x2418	; 0x2418 <rotate_left>
     900:	0e 94 9e 12 	call	0x253c	; 0x253c <forward>
     904:	05 c5       	rjmp	.+2570   	; 0x1310 <__stack+0xa11>
     906:	80 91 4c 04 	lds	r24, 0x044C	; 0x80044c <way_left>
     90a:	88 23       	and	r24, r24
     90c:	09 f4       	brne	.+2      	; 0x910 <__stack+0x11>
     90e:	73 c2       	rjmp	.+1254   	; 0xdf6 <__stack+0x4f7>
     910:	80 91 49 03 	lds	r24, 0x0349	; 0x800349 <face>
     914:	81 11       	cpse	r24, r1
     916:	9c c0       	rjmp	.+312    	; 0xa50 <__stack+0x151>
     918:	20 91 4d 06 	lds	r18, 0x064D	; 0x80064d <x_cor>
     91c:	30 e0       	ldi	r19, 0x00	; 0
     91e:	80 91 48 03 	lds	r24, 0x0348	; 0x800348 <y_cor>
     922:	90 e0       	ldi	r25, 0x00	; 0
     924:	bc 01       	movw	r22, r24
     926:	6f 5f       	subi	r22, 0xFF	; 255
     928:	7f 4f       	sbci	r23, 0xFF	; 255
     92a:	f9 01       	movw	r30, r18
     92c:	e2 95       	swap	r30
     92e:	f2 95       	swap	r31
     930:	f0 7f       	andi	r31, 0xF0	; 240
     932:	fe 27       	eor	r31, r30
     934:	e0 7f       	andi	r30, 0xF0	; 240
     936:	fe 27       	eor	r31, r30
     938:	e3 5b       	subi	r30, 0xB3	; 179
     93a:	fa 4f       	sbci	r31, 0xFA	; 250
     93c:	e6 0f       	add	r30, r22
     93e:	f7 1f       	adc	r31, r23
     940:	50 81       	ld	r21, Z
     942:	d9 01       	movw	r26, r18
     944:	11 96       	adiw	r26, 0x01	; 1
     946:	fd 01       	movw	r30, r26
     948:	e2 95       	swap	r30
     94a:	f2 95       	swap	r31
     94c:	f0 7f       	andi	r31, 0xF0	; 240
     94e:	fe 27       	eor	r31, r30
     950:	e0 7f       	andi	r30, 0xF0	; 240
     952:	fe 27       	eor	r31, r30
     954:	e3 5b       	subi	r30, 0xB3	; 179
     956:	fa 4f       	sbci	r31, 0xFA	; 250
     958:	e8 0f       	add	r30, r24
     95a:	f9 1f       	adc	r31, r25
     95c:	40 81       	ld	r20, Z
     95e:	54 13       	cpse	r21, r20
     960:	6a c0       	rjmp	.+212    	; 0xa36 <__stack+0x137>
     962:	26 0f       	add	r18, r22
     964:	37 1f       	adc	r19, r23
     966:	8a 0f       	add	r24, r26
     968:	9b 1f       	adc	r25, r27
     96a:	28 17       	cp	r18, r24
     96c:	39 07       	cpc	r19, r25
     96e:	14 f4       	brge	.+4      	; 0x974 <__stack+0x75>
     970:	0e 94 9e 12 	call	0x253c	; 0x253c <forward>
     974:	80 91 4d 06 	lds	r24, 0x064D	; 0x80064d <x_cor>
     978:	90 e0       	ldi	r25, 0x00	; 0
     97a:	20 91 48 03 	lds	r18, 0x0348	; 0x800348 <y_cor>
     97e:	30 e0       	ldi	r19, 0x00	; 0
     980:	a9 01       	movw	r20, r18
     982:	4f 5f       	subi	r20, 0xFF	; 255
     984:	5f 4f       	sbci	r21, 0xFF	; 255
     986:	dc 01       	movw	r26, r24
     988:	a4 0f       	add	r26, r20
     98a:	b5 1f       	adc	r27, r21
     98c:	bc 01       	movw	r22, r24
     98e:	6f 5f       	subi	r22, 0xFF	; 255
     990:	7f 4f       	sbci	r23, 0xFF	; 255
     992:	f9 01       	movw	r30, r18
     994:	e6 0f       	add	r30, r22
     996:	f7 1f       	adc	r31, r23
     998:	ea 17       	cp	r30, r26
     99a:	fb 07       	cpc	r31, r27
     99c:	2c f4       	brge	.+10     	; 0x9a8 <__stack+0xa9>
     99e:	0e 94 55 12 	call	0x24aa	; 0x24aa <rotate_right>
     9a2:	0e 94 9e 12 	call	0x253c	; 0x253c <forward>
     9a6:	b4 c4       	rjmp	.+2408   	; 0x1310 <__stack+0xa11>
     9a8:	fc 01       	movw	r30, r24
     9aa:	e2 95       	swap	r30
     9ac:	f2 95       	swap	r31
     9ae:	f0 7f       	andi	r31, 0xF0	; 240
     9b0:	fe 27       	eor	r31, r30
     9b2:	e0 7f       	andi	r30, 0xF0	; 240
     9b4:	fe 27       	eor	r31, r30
     9b6:	e2 5e       	subi	r30, 0xE2	; 226
     9b8:	fd 4f       	sbci	r31, 0xFD	; 253
     9ba:	e4 0f       	add	r30, r20
     9bc:	f5 1f       	adc	r31, r21
     9be:	b0 81       	ld	r27, Z
     9c0:	a9 01       	movw	r20, r18
     9c2:	4e 5f       	subi	r20, 0xFE	; 254
     9c4:	5f 4f       	sbci	r21, 0xFF	; 255
     9c6:	a1 e1       	ldi	r26, 0x11	; 17
     9c8:	a8 9f       	mul	r26, r24
     9ca:	f0 01       	movw	r30, r0
     9cc:	a9 9f       	mul	r26, r25
     9ce:	f0 0d       	add	r31, r0
     9d0:	11 24       	eor	r1, r1
     9d2:	e2 5f       	subi	r30, 0xF2	; 242
     9d4:	fe 4f       	sbci	r31, 0xFE	; 254
     9d6:	e4 0f       	add	r30, r20
     9d8:	f5 1f       	adc	r31, r21
     9da:	40 81       	ld	r20, Z
     9dc:	50 e0       	ldi	r21, 0x00	; 0
     9de:	4b 0f       	add	r20, r27
     9e0:	51 1d       	adc	r21, r1
     9e2:	fc 01       	movw	r30, r24
     9e4:	32 96       	adiw	r30, 0x02	; 2
     9e6:	e2 95       	swap	r30
     9e8:	f2 95       	swap	r31
     9ea:	f0 7f       	andi	r31, 0xF0	; 240
     9ec:	fe 27       	eor	r31, r30
     9ee:	e0 7f       	andi	r30, 0xF0	; 240
     9f0:	fe 27       	eor	r31, r30
     9f2:	e2 5e       	subi	r30, 0xE2	; 226
     9f4:	fd 4f       	sbci	r31, 0xFD	; 253
     9f6:	e2 0f       	add	r30, r18
     9f8:	f3 1f       	adc	r31, r19
     9fa:	e0 81       	ld	r30, Z
     9fc:	a6 9f       	mul	r26, r22
     9fe:	c0 01       	movw	r24, r0
     a00:	a7 9f       	mul	r26, r23
     a02:	90 0d       	add	r25, r0
     a04:	11 24       	eor	r1, r1
     a06:	82 5f       	subi	r24, 0xF2	; 242
     a08:	9e 4f       	sbci	r25, 0xFE	; 254
     a0a:	dc 01       	movw	r26, r24
     a0c:	a2 0f       	add	r26, r18
     a0e:	b3 1f       	adc	r27, r19
     a10:	8c 91       	ld	r24, X
     a12:	90 e0       	ldi	r25, 0x00	; 0
     a14:	8e 0f       	add	r24, r30
     a16:	91 1d       	adc	r25, r1
     a18:	48 17       	cp	r20, r24
     a1a:	59 07       	cpc	r21, r25
     a1c:	1c f4       	brge	.+6      	; 0xa24 <__stack+0x125>
     a1e:	0e 94 9e 12 	call	0x253c	; 0x253c <forward>
     a22:	76 c4       	rjmp	.+2284   	; 0x1310 <__stack+0xa11>
     a24:	84 17       	cp	r24, r20
     a26:	95 07       	cpc	r25, r21
     a28:	0c f0       	brlt	.+2      	; 0xa2c <__stack+0x12d>
     a2a:	72 c4       	rjmp	.+2276   	; 0x1310 <__stack+0xa11>
     a2c:	0e 94 55 12 	call	0x24aa	; 0x24aa <rotate_right>
     a30:	0e 94 9e 12 	call	0x253c	; 0x253c <forward>
     a34:	6d c4       	rjmp	.+2266   	; 0x1310 <__stack+0xa11>
     a36:	54 17       	cp	r21, r20
     a38:	18 f4       	brcc	.+6      	; 0xa40 <__stack+0x141>
     a3a:	0e 94 9e 12 	call	0x253c	; 0x253c <forward>
     a3e:	68 c4       	rjmp	.+2256   	; 0x1310 <__stack+0xa11>
     a40:	45 17       	cp	r20, r21
     a42:	08 f0       	brcs	.+2      	; 0xa46 <__stack+0x147>
     a44:	65 c4       	rjmp	.+2250   	; 0x1310 <__stack+0xa11>
     a46:	0e 94 55 12 	call	0x24aa	; 0x24aa <rotate_right>
     a4a:	0e 94 9e 12 	call	0x253c	; 0x253c <forward>
     a4e:	60 c4       	rjmp	.+2240   	; 0x1310 <__stack+0xa11>
     a50:	82 30       	cpi	r24, 0x02	; 2
     a52:	09 f0       	breq	.+2      	; 0xa56 <__stack+0x157>
     a54:	97 c0       	rjmp	.+302    	; 0xb84 <__stack+0x285>
     a56:	20 91 4d 06 	lds	r18, 0x064D	; 0x80064d <x_cor>
     a5a:	30 e0       	ldi	r19, 0x00	; 0
     a5c:	b9 01       	movw	r22, r18
     a5e:	61 50       	subi	r22, 0x01	; 1
     a60:	71 09       	sbc	r23, r1
     a62:	80 91 48 03 	lds	r24, 0x0348	; 0x800348 <y_cor>
     a66:	90 e0       	ldi	r25, 0x00	; 0
     a68:	fb 01       	movw	r30, r22
     a6a:	e2 95       	swap	r30
     a6c:	f2 95       	swap	r31
     a6e:	f0 7f       	andi	r31, 0xF0	; 240
     a70:	fe 27       	eor	r31, r30
     a72:	e0 7f       	andi	r30, 0xF0	; 240
     a74:	fe 27       	eor	r31, r30
     a76:	e3 5b       	subi	r30, 0xB3	; 179
     a78:	fa 4f       	sbci	r31, 0xFA	; 250
     a7a:	e8 0f       	add	r30, r24
     a7c:	f9 1f       	adc	r31, r25
     a7e:	50 81       	ld	r21, Z
     a80:	dc 01       	movw	r26, r24
     a82:	11 97       	sbiw	r26, 0x01	; 1
     a84:	f9 01       	movw	r30, r18
     a86:	e2 95       	swap	r30
     a88:	f2 95       	swap	r31
     a8a:	f0 7f       	andi	r31, 0xF0	; 240
     a8c:	fe 27       	eor	r31, r30
     a8e:	e0 7f       	andi	r30, 0xF0	; 240
     a90:	fe 27       	eor	r31, r30
     a92:	e3 5b       	subi	r30, 0xB3	; 179
     a94:	fa 4f       	sbci	r31, 0xFA	; 250
     a96:	ea 0f       	add	r30, r26
     a98:	fb 1f       	adc	r31, r27
     a9a:	40 81       	ld	r20, Z
     a9c:	54 13       	cpse	r21, r20
     a9e:	65 c0       	rjmp	.+202    	; 0xb6a <__stack+0x26b>
     aa0:	86 0f       	add	r24, r22
     aa2:	97 1f       	adc	r25, r23
     aa4:	2a 0f       	add	r18, r26
     aa6:	3b 1f       	adc	r19, r27
     aa8:	82 17       	cp	r24, r18
     aaa:	93 07       	cpc	r25, r19
     aac:	14 f4       	brge	.+4      	; 0xab2 <__stack+0x1b3>
     aae:	0e 94 9e 12 	call	0x253c	; 0x253c <forward>
     ab2:	20 91 4d 06 	lds	r18, 0x064D	; 0x80064d <x_cor>
     ab6:	30 e0       	ldi	r19, 0x00	; 0
     ab8:	f9 01       	movw	r30, r18
     aba:	31 97       	sbiw	r30, 0x01	; 1
     abc:	80 91 48 03 	lds	r24, 0x0348	; 0x800348 <y_cor>
     ac0:	90 e0       	ldi	r25, 0x00	; 0
     ac2:	df 01       	movw	r26, r30
     ac4:	a8 0f       	add	r26, r24
     ac6:	b9 1f       	adc	r27, r25
     ac8:	ac 01       	movw	r20, r24
     aca:	41 50       	subi	r20, 0x01	; 1
     acc:	51 09       	sbc	r21, r1
     ace:	b9 01       	movw	r22, r18
     ad0:	64 0f       	add	r22, r20
     ad2:	75 1f       	adc	r23, r21
     ad4:	6a 17       	cp	r22, r26
     ad6:	7b 07       	cpc	r23, r27
     ad8:	2c f4       	brge	.+10     	; 0xae4 <__stack+0x1e5>
     ada:	0e 94 55 12 	call	0x24aa	; 0x24aa <rotate_right>
     ade:	0e 94 9e 12 	call	0x253c	; 0x253c <forward>
     ae2:	16 c4       	rjmp	.+2092   	; 0x1310 <__stack+0xa11>
     ae4:	df 01       	movw	r26, r30
     ae6:	a2 95       	swap	r26
     ae8:	b2 95       	swap	r27
     aea:	b0 7f       	andi	r27, 0xF0	; 240
     aec:	ba 27       	eor	r27, r26
     aee:	a0 7f       	andi	r26, 0xF0	; 240
     af0:	ba 27       	eor	r27, r26
     af2:	a2 5e       	subi	r26, 0xE2	; 226
     af4:	bd 4f       	sbci	r27, 0xFD	; 253
     af6:	a8 0f       	add	r26, r24
     af8:	b9 1f       	adc	r27, r25
     afa:	ac 91       	ld	r26, X
     afc:	c1 e1       	ldi	r28, 0x11	; 17
     afe:	ce 9f       	mul	r28, r30
     b00:	b0 01       	movw	r22, r0
     b02:	cf 9f       	mul	r28, r31
     b04:	70 0d       	add	r23, r0
     b06:	11 24       	eor	r1, r1
     b08:	62 5f       	subi	r22, 0xF2	; 242
     b0a:	7e 4f       	sbci	r23, 0xFE	; 254
     b0c:	fb 01       	movw	r30, r22
     b0e:	e8 0f       	add	r30, r24
     b10:	f9 1f       	adc	r31, r25
     b12:	60 81       	ld	r22, Z
     b14:	70 e0       	ldi	r23, 0x00	; 0
     b16:	6a 0f       	add	r22, r26
     b18:	71 1d       	adc	r23, r1
     b1a:	d9 01       	movw	r26, r18
     b1c:	a2 95       	swap	r26
     b1e:	b2 95       	swap	r27
     b20:	b0 7f       	andi	r27, 0xF0	; 240
     b22:	ba 27       	eor	r27, r26
     b24:	a0 7f       	andi	r26, 0xF0	; 240
     b26:	ba 27       	eor	r27, r26
     b28:	a2 5e       	subi	r26, 0xE2	; 226
     b2a:	bd 4f       	sbci	r27, 0xFD	; 253
     b2c:	a4 0f       	add	r26, r20
     b2e:	b5 1f       	adc	r27, r21
     b30:	ac 91       	ld	r26, X
     b32:	c2 9f       	mul	r28, r18
     b34:	f0 01       	movw	r30, r0
     b36:	c3 9f       	mul	r28, r19
     b38:	f0 0d       	add	r31, r0
     b3a:	11 24       	eor	r1, r1
     b3c:	e2 5f       	subi	r30, 0xF2	; 242
     b3e:	fe 4f       	sbci	r31, 0xFE	; 254
     b40:	e4 0f       	add	r30, r20
     b42:	f5 1f       	adc	r31, r21
     b44:	80 81       	ld	r24, Z
     b46:	90 e0       	ldi	r25, 0x00	; 0
     b48:	8a 0f       	add	r24, r26
     b4a:	91 1d       	adc	r25, r1
     b4c:	68 17       	cp	r22, r24
     b4e:	79 07       	cpc	r23, r25
     b50:	2c f4       	brge	.+10     	; 0xb5c <__stack+0x25d>
     b52:	0e 94 55 12 	call	0x24aa	; 0x24aa <rotate_right>
     b56:	0e 94 9e 12 	call	0x253c	; 0x253c <forward>
     b5a:	da c3       	rjmp	.+1972   	; 0x1310 <__stack+0xa11>
     b5c:	86 17       	cp	r24, r22
     b5e:	97 07       	cpc	r25, r23
     b60:	0c f0       	brlt	.+2      	; 0xb64 <__stack+0x265>
     b62:	d6 c3       	rjmp	.+1964   	; 0x1310 <__stack+0xa11>
     b64:	0e 94 9e 12 	call	0x253c	; 0x253c <forward>
     b68:	d3 c3       	rjmp	.+1958   	; 0x1310 <__stack+0xa11>
     b6a:	45 17       	cp	r20, r21
     b6c:	18 f4       	brcc	.+6      	; 0xb74 <__stack+0x275>
     b6e:	0e 94 9e 12 	call	0x253c	; 0x253c <forward>
     b72:	ce c3       	rjmp	.+1948   	; 0x1310 <__stack+0xa11>
     b74:	54 17       	cp	r21, r20
     b76:	08 f0       	brcs	.+2      	; 0xb7a <__stack+0x27b>
     b78:	cb c3       	rjmp	.+1942   	; 0x1310 <__stack+0xa11>
     b7a:	0e 94 55 12 	call	0x24aa	; 0x24aa <rotate_right>
     b7e:	0e 94 9e 12 	call	0x253c	; 0x253c <forward>
     b82:	c6 c3       	rjmp	.+1932   	; 0x1310 <__stack+0xa11>
     b84:	81 30       	cpi	r24, 0x01	; 1
     b86:	09 f0       	breq	.+2      	; 0xb8a <__stack+0x28b>
     b88:	99 c0       	rjmp	.+306    	; 0xcbc <__stack+0x3bd>
     b8a:	40 91 4d 06 	lds	r20, 0x064D	; 0x80064d <x_cor>
     b8e:	50 e0       	ldi	r21, 0x00	; 0
     b90:	ba 01       	movw	r22, r20
     b92:	6f 5f       	subi	r22, 0xFF	; 255
     b94:	7f 4f       	sbci	r23, 0xFF	; 255
     b96:	80 91 48 03 	lds	r24, 0x0348	; 0x800348 <y_cor>
     b9a:	90 e0       	ldi	r25, 0x00	; 0
     b9c:	fb 01       	movw	r30, r22
     b9e:	e2 95       	swap	r30
     ba0:	f2 95       	swap	r31
     ba2:	f0 7f       	andi	r31, 0xF0	; 240
     ba4:	fe 27       	eor	r31, r30
     ba6:	e0 7f       	andi	r30, 0xF0	; 240
     ba8:	fe 27       	eor	r31, r30
     baa:	e3 5b       	subi	r30, 0xB3	; 179
     bac:	fa 4f       	sbci	r31, 0xFA	; 250
     bae:	e8 0f       	add	r30, r24
     bb0:	f9 1f       	adc	r31, r25
     bb2:	30 81       	ld	r19, Z
     bb4:	dc 01       	movw	r26, r24
     bb6:	11 97       	sbiw	r26, 0x01	; 1
     bb8:	fa 01       	movw	r30, r20
     bba:	e2 95       	swap	r30
     bbc:	f2 95       	swap	r31
     bbe:	f0 7f       	andi	r31, 0xF0	; 240
     bc0:	fe 27       	eor	r31, r30
     bc2:	e0 7f       	andi	r30, 0xF0	; 240
     bc4:	fe 27       	eor	r31, r30
     bc6:	e3 5b       	subi	r30, 0xB3	; 179
     bc8:	fa 4f       	sbci	r31, 0xFA	; 250
     bca:	ea 0f       	add	r30, r26
     bcc:	fb 1f       	adc	r31, r27
     bce:	20 81       	ld	r18, Z
     bd0:	32 13       	cpse	r19, r18
     bd2:	67 c0       	rjmp	.+206    	; 0xca2 <__stack+0x3a3>
     bd4:	86 0f       	add	r24, r22
     bd6:	97 1f       	adc	r25, r23
     bd8:	4a 0f       	add	r20, r26
     bda:	5b 1f       	adc	r21, r27
     bdc:	84 17       	cp	r24, r20
     bde:	95 07       	cpc	r25, r21
     be0:	14 f4       	brge	.+4      	; 0xbe6 <__stack+0x2e7>
     be2:	0e 94 9e 12 	call	0x253c	; 0x253c <forward>
     be6:	20 91 4d 06 	lds	r18, 0x064D	; 0x80064d <x_cor>
     bea:	30 e0       	ldi	r19, 0x00	; 0
     bec:	d9 01       	movw	r26, r18
     bee:	11 96       	adiw	r26, 0x01	; 1
     bf0:	80 91 48 03 	lds	r24, 0x0348	; 0x800348 <y_cor>
     bf4:	90 e0       	ldi	r25, 0x00	; 0
     bf6:	fd 01       	movw	r30, r26
     bf8:	e8 0f       	add	r30, r24
     bfa:	f9 1f       	adc	r31, r25
     bfc:	ac 01       	movw	r20, r24
     bfe:	41 50       	subi	r20, 0x01	; 1
     c00:	51 09       	sbc	r21, r1
     c02:	b9 01       	movw	r22, r18
     c04:	64 0f       	add	r22, r20
     c06:	75 1f       	adc	r23, r21
     c08:	6e 17       	cp	r22, r30
     c0a:	7f 07       	cpc	r23, r31
     c0c:	2c f4       	brge	.+10     	; 0xc18 <__stack+0x319>
     c0e:	0e 94 55 12 	call	0x24aa	; 0x24aa <rotate_right>
     c12:	0e 94 9e 12 	call	0x253c	; 0x253c <forward>
     c16:	7c c3       	rjmp	.+1784   	; 0x1310 <__stack+0xa11>
     c18:	f9 01       	movw	r30, r18
     c1a:	32 96       	adiw	r30, 0x02	; 2
     c1c:	e2 95       	swap	r30
     c1e:	f2 95       	swap	r31
     c20:	f0 7f       	andi	r31, 0xF0	; 240
     c22:	fe 27       	eor	r31, r30
     c24:	e0 7f       	andi	r30, 0xF0	; 240
     c26:	fe 27       	eor	r31, r30
     c28:	e2 5e       	subi	r30, 0xE2	; 226
     c2a:	fd 4f       	sbci	r31, 0xFD	; 253
     c2c:	e8 0f       	add	r30, r24
     c2e:	f9 1f       	adc	r31, r25
     c30:	e0 81       	ld	r30, Z
     c32:	c1 e1       	ldi	r28, 0x11	; 17
     c34:	ca 9f       	mul	r28, r26
     c36:	b0 01       	movw	r22, r0
     c38:	cb 9f       	mul	r28, r27
     c3a:	70 0d       	add	r23, r0
     c3c:	11 24       	eor	r1, r1
     c3e:	62 5f       	subi	r22, 0xF2	; 242
     c40:	7e 4f       	sbci	r23, 0xFE	; 254
     c42:	db 01       	movw	r26, r22
     c44:	a8 0f       	add	r26, r24
     c46:	b9 1f       	adc	r27, r25
     c48:	6c 91       	ld	r22, X
     c4a:	70 e0       	ldi	r23, 0x00	; 0
     c4c:	6e 0f       	add	r22, r30
     c4e:	71 1d       	adc	r23, r1
     c50:	f9 01       	movw	r30, r18
     c52:	e2 95       	swap	r30
     c54:	f2 95       	swap	r31
     c56:	f0 7f       	andi	r31, 0xF0	; 240
     c58:	fe 27       	eor	r31, r30
     c5a:	e0 7f       	andi	r30, 0xF0	; 240
     c5c:	fe 27       	eor	r31, r30
     c5e:	e2 5e       	subi	r30, 0xE2	; 226
     c60:	fd 4f       	sbci	r31, 0xFD	; 253
     c62:	e4 0f       	add	r30, r20
     c64:	f5 1f       	adc	r31, r21
     c66:	e0 81       	ld	r30, Z
     c68:	c2 9f       	mul	r28, r18
     c6a:	c0 01       	movw	r24, r0
     c6c:	c3 9f       	mul	r28, r19
     c6e:	90 0d       	add	r25, r0
     c70:	11 24       	eor	r1, r1
     c72:	82 5f       	subi	r24, 0xF2	; 242
     c74:	9e 4f       	sbci	r25, 0xFE	; 254
     c76:	dc 01       	movw	r26, r24
     c78:	a4 0f       	add	r26, r20
     c7a:	b5 1f       	adc	r27, r21
     c7c:	8c 91       	ld	r24, X
     c7e:	90 e0       	ldi	r25, 0x00	; 0
     c80:	8e 0f       	add	r24, r30
     c82:	91 1d       	adc	r25, r1
     c84:	68 17       	cp	r22, r24
     c86:	79 07       	cpc	r23, r25
     c88:	1c f4       	brge	.+6      	; 0xc90 <__stack+0x391>
     c8a:	0e 94 9e 12 	call	0x253c	; 0x253c <forward>
     c8e:	40 c3       	rjmp	.+1664   	; 0x1310 <__stack+0xa11>
     c90:	86 17       	cp	r24, r22
     c92:	97 07       	cpc	r25, r23
     c94:	0c f0       	brlt	.+2      	; 0xc98 <__stack+0x399>
     c96:	3c c3       	rjmp	.+1656   	; 0x1310 <__stack+0xa11>
     c98:	0e 94 55 12 	call	0x24aa	; 0x24aa <rotate_right>
     c9c:	0e 94 9e 12 	call	0x253c	; 0x253c <forward>
     ca0:	37 c3       	rjmp	.+1646   	; 0x1310 <__stack+0xa11>
     ca2:	32 17       	cp	r19, r18
     ca4:	18 f4       	brcc	.+6      	; 0xcac <__stack+0x3ad>
     ca6:	0e 94 9e 12 	call	0x253c	; 0x253c <forward>
     caa:	32 c3       	rjmp	.+1636   	; 0x1310 <__stack+0xa11>
     cac:	23 17       	cp	r18, r19
     cae:	08 f0       	brcs	.+2      	; 0xcb2 <__stack+0x3b3>
     cb0:	2f c3       	rjmp	.+1630   	; 0x1310 <__stack+0xa11>
     cb2:	0e 94 55 12 	call	0x24aa	; 0x24aa <rotate_right>
     cb6:	0e 94 9e 12 	call	0x253c	; 0x253c <forward>
     cba:	2a c3       	rjmp	.+1620   	; 0x1310 <__stack+0xa11>
     cbc:	83 30       	cpi	r24, 0x03	; 3
     cbe:	09 f0       	breq	.+2      	; 0xcc2 <__stack+0x3c3>
     cc0:	27 c3       	rjmp	.+1614   	; 0x1310 <__stack+0xa11>
     cc2:	40 91 4d 06 	lds	r20, 0x064D	; 0x80064d <x_cor>
     cc6:	50 e0       	ldi	r21, 0x00	; 0
     cc8:	20 91 48 03 	lds	r18, 0x0348	; 0x800348 <y_cor>
     ccc:	30 e0       	ldi	r19, 0x00	; 0
     cce:	b9 01       	movw	r22, r18
     cd0:	6f 5f       	subi	r22, 0xFF	; 255
     cd2:	7f 4f       	sbci	r23, 0xFF	; 255
     cd4:	fa 01       	movw	r30, r20
     cd6:	e2 95       	swap	r30
     cd8:	f2 95       	swap	r31
     cda:	f0 7f       	andi	r31, 0xF0	; 240
     cdc:	fe 27       	eor	r31, r30
     cde:	e0 7f       	andi	r30, 0xF0	; 240
     ce0:	fe 27       	eor	r31, r30
     ce2:	e3 5b       	subi	r30, 0xB3	; 179
     ce4:	fa 4f       	sbci	r31, 0xFA	; 250
     ce6:	e6 0f       	add	r30, r22
     ce8:	f7 1f       	adc	r31, r23
     cea:	90 81       	ld	r25, Z
     cec:	da 01       	movw	r26, r20
     cee:	11 97       	sbiw	r26, 0x01	; 1
     cf0:	fd 01       	movw	r30, r26
     cf2:	e2 95       	swap	r30
     cf4:	f2 95       	swap	r31
     cf6:	f0 7f       	andi	r31, 0xF0	; 240
     cf8:	fe 27       	eor	r31, r30
     cfa:	e0 7f       	andi	r30, 0xF0	; 240
     cfc:	fe 27       	eor	r31, r30
     cfe:	e3 5b       	subi	r30, 0xB3	; 179
     d00:	fa 4f       	sbci	r31, 0xFA	; 250
     d02:	e2 0f       	add	r30, r18
     d04:	f3 1f       	adc	r31, r19
     d06:	80 81       	ld	r24, Z
     d08:	98 13       	cpse	r25, r24
     d0a:	68 c0       	rjmp	.+208    	; 0xddc <__stack+0x4dd>
     d0c:	46 0f       	add	r20, r22
     d0e:	57 1f       	adc	r21, r23
     d10:	2a 0f       	add	r18, r26
     d12:	3b 1f       	adc	r19, r27
     d14:	42 17       	cp	r20, r18
     d16:	53 07       	cpc	r21, r19
     d18:	24 f4       	brge	.+8      	; 0xd22 <__stack+0x423>
     d1a:	0e 94 55 12 	call	0x24aa	; 0x24aa <rotate_right>
     d1e:	0e 94 9e 12 	call	0x253c	; 0x253c <forward>
     d22:	80 91 4d 06 	lds	r24, 0x064D	; 0x80064d <x_cor>
     d26:	90 e0       	ldi	r25, 0x00	; 0
     d28:	40 91 48 03 	lds	r20, 0x0348	; 0x800348 <y_cor>
     d2c:	50 e0       	ldi	r21, 0x00	; 0
     d2e:	9a 01       	movw	r18, r20
     d30:	2f 5f       	subi	r18, 0xFF	; 255
     d32:	3f 4f       	sbci	r19, 0xFF	; 255
     d34:	dc 01       	movw	r26, r24
     d36:	a2 0f       	add	r26, r18
     d38:	b3 1f       	adc	r27, r19
     d3a:	bc 01       	movw	r22, r24
     d3c:	61 50       	subi	r22, 0x01	; 1
     d3e:	71 09       	sbc	r23, r1
     d40:	fa 01       	movw	r30, r20
     d42:	e6 0f       	add	r30, r22
     d44:	f7 1f       	adc	r31, r23
     d46:	ea 17       	cp	r30, r26
     d48:	fb 07       	cpc	r31, r27
     d4a:	1c f4       	brge	.+6      	; 0xd52 <__stack+0x453>
     d4c:	0e 94 9e 12 	call	0x253c	; 0x253c <forward>
     d50:	df c2       	rjmp	.+1470   	; 0x1310 <__stack+0xa11>
     d52:	fc 01       	movw	r30, r24
     d54:	e2 95       	swap	r30
     d56:	f2 95       	swap	r31
     d58:	f0 7f       	andi	r31, 0xF0	; 240
     d5a:	fe 27       	eor	r31, r30
     d5c:	e0 7f       	andi	r30, 0xF0	; 240
     d5e:	fe 27       	eor	r31, r30
     d60:	e2 5e       	subi	r30, 0xE2	; 226
     d62:	fd 4f       	sbci	r31, 0xFD	; 253
     d64:	e2 0f       	add	r30, r18
     d66:	f3 1f       	adc	r31, r19
     d68:	a0 81       	ld	r26, Z
     d6a:	9a 01       	movw	r18, r20
     d6c:	2e 5f       	subi	r18, 0xFE	; 254
     d6e:	3f 4f       	sbci	r19, 0xFF	; 255
     d70:	c1 e1       	ldi	r28, 0x11	; 17
     d72:	c8 9f       	mul	r28, r24
     d74:	f0 01       	movw	r30, r0
     d76:	c9 9f       	mul	r28, r25
     d78:	f0 0d       	add	r31, r0
     d7a:	11 24       	eor	r1, r1
     d7c:	e2 5f       	subi	r30, 0xF2	; 242
     d7e:	fe 4f       	sbci	r31, 0xFE	; 254
     d80:	e2 0f       	add	r30, r18
     d82:	f3 1f       	adc	r31, r19
     d84:	20 81       	ld	r18, Z
     d86:	30 e0       	ldi	r19, 0x00	; 0
     d88:	2a 0f       	add	r18, r26
     d8a:	31 1d       	adc	r19, r1
     d8c:	db 01       	movw	r26, r22
     d8e:	a2 95       	swap	r26
     d90:	b2 95       	swap	r27
     d92:	b0 7f       	andi	r27, 0xF0	; 240
     d94:	ba 27       	eor	r27, r26
     d96:	a0 7f       	andi	r26, 0xF0	; 240
     d98:	ba 27       	eor	r27, r26
     d9a:	a2 5e       	subi	r26, 0xE2	; 226
     d9c:	bd 4f       	sbci	r27, 0xFD	; 253
     d9e:	a4 0f       	add	r26, r20
     da0:	b5 1f       	adc	r27, r21
     da2:	ac 91       	ld	r26, X
     da4:	c6 9f       	mul	r28, r22
     da6:	f0 01       	movw	r30, r0
     da8:	c7 9f       	mul	r28, r23
     daa:	f0 0d       	add	r31, r0
     dac:	11 24       	eor	r1, r1
     dae:	e2 5f       	subi	r30, 0xF2	; 242
     db0:	fe 4f       	sbci	r31, 0xFE	; 254
     db2:	e4 0f       	add	r30, r20
     db4:	f5 1f       	adc	r31, r21
     db6:	80 81       	ld	r24, Z
     db8:	90 e0       	ldi	r25, 0x00	; 0
     dba:	8a 0f       	add	r24, r26
     dbc:	91 1d       	adc	r25, r1
     dbe:	28 17       	cp	r18, r24
     dc0:	39 07       	cpc	r19, r25
     dc2:	2c f4       	brge	.+10     	; 0xdce <__stack+0x4cf>
     dc4:	0e 94 55 12 	call	0x24aa	; 0x24aa <rotate_right>
     dc8:	0e 94 9e 12 	call	0x253c	; 0x253c <forward>
     dcc:	a1 c2       	rjmp	.+1346   	; 0x1310 <__stack+0xa11>
     dce:	82 17       	cp	r24, r18
     dd0:	93 07       	cpc	r25, r19
     dd2:	0c f0       	brlt	.+2      	; 0xdd6 <__stack+0x4d7>
     dd4:	9d c2       	rjmp	.+1338   	; 0x1310 <__stack+0xa11>
     dd6:	0e 94 9e 12 	call	0x253c	; 0x253c <forward>
     dda:	9a c2       	rjmp	.+1332   	; 0x1310 <__stack+0xa11>
     ddc:	98 17       	cp	r25, r24
     dde:	28 f4       	brcc	.+10     	; 0xdea <__stack+0x4eb>
     de0:	0e 94 55 12 	call	0x24aa	; 0x24aa <rotate_right>
     de4:	0e 94 9e 12 	call	0x253c	; 0x253c <forward>
     de8:	93 c2       	rjmp	.+1318   	; 0x1310 <__stack+0xa11>
     dea:	89 17       	cp	r24, r25
     dec:	08 f0       	brcs	.+2      	; 0xdf0 <__stack+0x4f1>
     dee:	90 c2       	rjmp	.+1312   	; 0x1310 <__stack+0xa11>
     df0:	0e 94 9e 12 	call	0x253c	; 0x253c <forward>
     df4:	8d c2       	rjmp	.+1306   	; 0x1310 <__stack+0xa11>
     df6:	80 91 4a 03 	lds	r24, 0x034A	; 0x80034a <way_right>
     dfa:	88 23       	and	r24, r24
     dfc:	09 f4       	brne	.+2      	; 0xe00 <__stack+0x501>
     dfe:	88 c2       	rjmp	.+1296   	; 0x1310 <__stack+0xa11>
     e00:	80 91 49 03 	lds	r24, 0x0349	; 0x800349 <face>
     e04:	81 11       	cpse	r24, r1
     e06:	9b c0       	rjmp	.+310    	; 0xf3e <__stack+0x63f>
     e08:	20 91 4d 06 	lds	r18, 0x064D	; 0x80064d <x_cor>
     e0c:	30 e0       	ldi	r19, 0x00	; 0
     e0e:	80 91 48 03 	lds	r24, 0x0348	; 0x800348 <y_cor>
     e12:	90 e0       	ldi	r25, 0x00	; 0
     e14:	bc 01       	movw	r22, r24
     e16:	6f 5f       	subi	r22, 0xFF	; 255
     e18:	7f 4f       	sbci	r23, 0xFF	; 255
     e1a:	f9 01       	movw	r30, r18
     e1c:	e2 95       	swap	r30
     e1e:	f2 95       	swap	r31
     e20:	f0 7f       	andi	r31, 0xF0	; 240
     e22:	fe 27       	eor	r31, r30
     e24:	e0 7f       	andi	r30, 0xF0	; 240
     e26:	fe 27       	eor	r31, r30
     e28:	e3 5b       	subi	r30, 0xB3	; 179
     e2a:	fa 4f       	sbci	r31, 0xFA	; 250
     e2c:	e6 0f       	add	r30, r22
     e2e:	f7 1f       	adc	r31, r23
     e30:	50 81       	ld	r21, Z
     e32:	d9 01       	movw	r26, r18
     e34:	11 97       	sbiw	r26, 0x01	; 1
     e36:	fd 01       	movw	r30, r26
     e38:	e2 95       	swap	r30
     e3a:	f2 95       	swap	r31
     e3c:	f0 7f       	andi	r31, 0xF0	; 240
     e3e:	fe 27       	eor	r31, r30
     e40:	e0 7f       	andi	r30, 0xF0	; 240
     e42:	fe 27       	eor	r31, r30
     e44:	e3 5b       	subi	r30, 0xB3	; 179
     e46:	fa 4f       	sbci	r31, 0xFA	; 250
     e48:	e8 0f       	add	r30, r24
     e4a:	f9 1f       	adc	r31, r25
     e4c:	40 81       	ld	r20, Z
     e4e:	54 13       	cpse	r21, r20
     e50:	69 c0       	rjmp	.+210    	; 0xf24 <__stack+0x625>
     e52:	26 0f       	add	r18, r22
     e54:	37 1f       	adc	r19, r23
     e56:	8a 0f       	add	r24, r26
     e58:	9b 1f       	adc	r25, r27
     e5a:	28 17       	cp	r18, r24
     e5c:	39 07       	cpc	r19, r25
     e5e:	14 f4       	brge	.+4      	; 0xe64 <__stack+0x565>
     e60:	0e 94 9e 12 	call	0x253c	; 0x253c <forward>
     e64:	40 91 4d 06 	lds	r20, 0x064D	; 0x80064d <x_cor>
     e68:	50 e0       	ldi	r21, 0x00	; 0
     e6a:	80 91 48 03 	lds	r24, 0x0348	; 0x800348 <y_cor>
     e6e:	90 e0       	ldi	r25, 0x00	; 0
     e70:	9c 01       	movw	r18, r24
     e72:	2f 5f       	subi	r18, 0xFF	; 255
     e74:	3f 4f       	sbci	r19, 0xFF	; 255
     e76:	da 01       	movw	r26, r20
     e78:	a2 0f       	add	r26, r18
     e7a:	b3 1f       	adc	r27, r19
     e7c:	ba 01       	movw	r22, r20
     e7e:	61 50       	subi	r22, 0x01	; 1
     e80:	71 09       	sbc	r23, r1
     e82:	fc 01       	movw	r30, r24
     e84:	e6 0f       	add	r30, r22
     e86:	f7 1f       	adc	r31, r23
     e88:	ea 17       	cp	r30, r26
     e8a:	fb 07       	cpc	r31, r27
     e8c:	2c f4       	brge	.+10     	; 0xe98 <__stack+0x599>
     e8e:	0e 94 0c 12 	call	0x2418	; 0x2418 <rotate_left>
     e92:	0e 94 9e 12 	call	0x253c	; 0x253c <forward>
     e96:	3c c2       	rjmp	.+1144   	; 0x1310 <__stack+0xa11>
     e98:	fa 01       	movw	r30, r20
     e9a:	e2 95       	swap	r30
     e9c:	f2 95       	swap	r31
     e9e:	f0 7f       	andi	r31, 0xF0	; 240
     ea0:	fe 27       	eor	r31, r30
     ea2:	e0 7f       	andi	r30, 0xF0	; 240
     ea4:	fe 27       	eor	r31, r30
     ea6:	e2 5e       	subi	r30, 0xE2	; 226
     ea8:	fd 4f       	sbci	r31, 0xFD	; 253
     eaa:	e2 0f       	add	r30, r18
     eac:	f3 1f       	adc	r31, r19
     eae:	b0 81       	ld	r27, Z
     eb0:	9c 01       	movw	r18, r24
     eb2:	2e 5f       	subi	r18, 0xFE	; 254
     eb4:	3f 4f       	sbci	r19, 0xFF	; 255
     eb6:	a1 e1       	ldi	r26, 0x11	; 17
     eb8:	a4 9f       	mul	r26, r20
     eba:	f0 01       	movw	r30, r0
     ebc:	a5 9f       	mul	r26, r21
     ebe:	f0 0d       	add	r31, r0
     ec0:	11 24       	eor	r1, r1
     ec2:	e2 5f       	subi	r30, 0xF2	; 242
     ec4:	fe 4f       	sbci	r31, 0xFE	; 254
     ec6:	e2 0f       	add	r30, r18
     ec8:	f3 1f       	adc	r31, r19
     eca:	20 81       	ld	r18, Z
     ecc:	30 e0       	ldi	r19, 0x00	; 0
     ece:	2b 0f       	add	r18, r27
     ed0:	31 1d       	adc	r19, r1
     ed2:	fb 01       	movw	r30, r22
     ed4:	e2 95       	swap	r30
     ed6:	f2 95       	swap	r31
     ed8:	f0 7f       	andi	r31, 0xF0	; 240
     eda:	fe 27       	eor	r31, r30
     edc:	e0 7f       	andi	r30, 0xF0	; 240
     ede:	fe 27       	eor	r31, r30
     ee0:	e2 5e       	subi	r30, 0xE2	; 226
     ee2:	fd 4f       	sbci	r31, 0xFD	; 253
     ee4:	e8 0f       	add	r30, r24
     ee6:	f9 1f       	adc	r31, r25
     ee8:	e0 81       	ld	r30, Z
     eea:	a6 9f       	mul	r26, r22
     eec:	a0 01       	movw	r20, r0
     eee:	a7 9f       	mul	r26, r23
     ef0:	50 0d       	add	r21, r0
     ef2:	11 24       	eor	r1, r1
     ef4:	42 5f       	subi	r20, 0xF2	; 242
     ef6:	5e 4f       	sbci	r21, 0xFE	; 254
     ef8:	da 01       	movw	r26, r20
     efa:	a8 0f       	add	r26, r24
     efc:	b9 1f       	adc	r27, r25
     efe:	8c 91       	ld	r24, X
     f00:	90 e0       	ldi	r25, 0x00	; 0
     f02:	8e 0f       	add	r24, r30
     f04:	91 1d       	adc	r25, r1
     f06:	28 17       	cp	r18, r24
     f08:	39 07       	cpc	r19, r25
     f0a:	1c f4       	brge	.+6      	; 0xf12 <__stack+0x613>
     f0c:	0e 94 9e 12 	call	0x253c	; 0x253c <forward>
     f10:	ff c1       	rjmp	.+1022   	; 0x1310 <__stack+0xa11>
     f12:	82 17       	cp	r24, r18
     f14:	93 07       	cpc	r25, r19
     f16:	0c f0       	brlt	.+2      	; 0xf1a <__stack+0x61b>
     f18:	fb c1       	rjmp	.+1014   	; 0x1310 <__stack+0xa11>
     f1a:	0e 94 0c 12 	call	0x2418	; 0x2418 <rotate_left>
     f1e:	0e 94 9e 12 	call	0x253c	; 0x253c <forward>
     f22:	f6 c1       	rjmp	.+1004   	; 0x1310 <__stack+0xa11>
     f24:	54 17       	cp	r21, r20
     f26:	18 f4       	brcc	.+6      	; 0xf2e <__stack+0x62f>
     f28:	0e 94 9e 12 	call	0x253c	; 0x253c <forward>
     f2c:	f1 c1       	rjmp	.+994    	; 0x1310 <__stack+0xa11>
     f2e:	45 17       	cp	r20, r21
     f30:	08 f0       	brcs	.+2      	; 0xf34 <__stack+0x635>
     f32:	ee c1       	rjmp	.+988    	; 0x1310 <__stack+0xa11>
     f34:	0e 94 0c 12 	call	0x2418	; 0x2418 <rotate_left>
     f38:	0e 94 9e 12 	call	0x253c	; 0x253c <forward>
     f3c:	e9 c1       	rjmp	.+978    	; 0x1310 <__stack+0xa11>
     f3e:	82 30       	cpi	r24, 0x02	; 2
     f40:	09 f0       	breq	.+2      	; 0xf44 <__stack+0x645>
     f42:	99 c0       	rjmp	.+306    	; 0x1076 <__stack+0x777>
     f44:	60 91 4d 06 	lds	r22, 0x064D	; 0x80064d <x_cor>
     f48:	70 e0       	ldi	r23, 0x00	; 0
     f4a:	db 01       	movw	r26, r22
     f4c:	11 96       	adiw	r26, 0x01	; 1
     f4e:	80 91 48 03 	lds	r24, 0x0348	; 0x800348 <y_cor>
     f52:	48 2f       	mov	r20, r24
     f54:	50 e0       	ldi	r21, 0x00	; 0
     f56:	fd 01       	movw	r30, r26
     f58:	e2 95       	swap	r30
     f5a:	f2 95       	swap	r31
     f5c:	f0 7f       	andi	r31, 0xF0	; 240
     f5e:	fe 27       	eor	r31, r30
     f60:	e0 7f       	andi	r30, 0xF0	; 240
     f62:	fe 27       	eor	r31, r30
     f64:	e3 5b       	subi	r30, 0xB3	; 179
     f66:	fa 4f       	sbci	r31, 0xFA	; 250
     f68:	e4 0f       	add	r30, r20
     f6a:	f5 1f       	adc	r31, r21
     f6c:	20 81       	ld	r18, Z
     f6e:	ea 01       	movw	r28, r20
     f70:	21 97       	sbiw	r28, 0x01	; 1
     f72:	fb 01       	movw	r30, r22
     f74:	e2 95       	swap	r30
     f76:	f2 95       	swap	r31
     f78:	f0 7f       	andi	r31, 0xF0	; 240
     f7a:	fe 27       	eor	r31, r30
     f7c:	e0 7f       	andi	r30, 0xF0	; 240
     f7e:	fe 27       	eor	r31, r30
     f80:	e3 5b       	subi	r30, 0xB3	; 179
     f82:	fa 4f       	sbci	r31, 0xFA	; 250
     f84:	ec 0f       	add	r30, r28
     f86:	fd 1f       	adc	r31, r29
     f88:	90 81       	ld	r25, Z
     f8a:	29 13       	cpse	r18, r25
     f8c:	67 c0       	rjmp	.+206    	; 0x105c <__stack+0x75d>
     f8e:	cd 01       	movw	r24, r26
     f90:	84 0f       	add	r24, r20
     f92:	95 1f       	adc	r25, r21
     f94:	6c 0f       	add	r22, r28
     f96:	7d 1f       	adc	r23, r29
     f98:	86 17       	cp	r24, r22
     f9a:	97 07       	cpc	r25, r23
     f9c:	24 f4       	brge	.+8      	; 0xfa6 <__stack+0x6a7>
     f9e:	0e 94 0c 12 	call	0x2418	; 0x2418 <rotate_left>
     fa2:	0e 94 9e 12 	call	0x253c	; 0x253c <forward>
     fa6:	40 91 4d 06 	lds	r20, 0x064D	; 0x80064d <x_cor>
     faa:	50 e0       	ldi	r21, 0x00	; 0
     fac:	da 01       	movw	r26, r20
     fae:	11 96       	adiw	r26, 0x01	; 1
     fb0:	80 91 48 03 	lds	r24, 0x0348	; 0x800348 <y_cor>
     fb4:	90 e0       	ldi	r25, 0x00	; 0
     fb6:	fd 01       	movw	r30, r26
     fb8:	e8 0f       	add	r30, r24
     fba:	f9 1f       	adc	r31, r25
     fbc:	bc 01       	movw	r22, r24
     fbe:	61 50       	subi	r22, 0x01	; 1
     fc0:	71 09       	sbc	r23, r1
     fc2:	9a 01       	movw	r18, r20
     fc4:	26 0f       	add	r18, r22
     fc6:	37 1f       	adc	r19, r23
     fc8:	2e 17       	cp	r18, r30
     fca:	3f 07       	cpc	r19, r31
     fcc:	1c f4       	brge	.+6      	; 0xfd4 <__stack+0x6d5>
     fce:	0e 94 9e 12 	call	0x253c	; 0x253c <forward>
     fd2:	9e c1       	rjmp	.+828    	; 0x1310 <__stack+0xa11>
     fd4:	fa 01       	movw	r30, r20
     fd6:	32 96       	adiw	r30, 0x02	; 2
     fd8:	e2 95       	swap	r30
     fda:	f2 95       	swap	r31
     fdc:	f0 7f       	andi	r31, 0xF0	; 240
     fde:	fe 27       	eor	r31, r30
     fe0:	e0 7f       	andi	r30, 0xF0	; 240
     fe2:	fe 27       	eor	r31, r30
     fe4:	e2 5e       	subi	r30, 0xE2	; 226
     fe6:	fd 4f       	sbci	r31, 0xFD	; 253
     fe8:	e8 0f       	add	r30, r24
     fea:	f9 1f       	adc	r31, r25
     fec:	e0 81       	ld	r30, Z
     fee:	c1 e1       	ldi	r28, 0x11	; 17
     ff0:	ca 9f       	mul	r28, r26
     ff2:	90 01       	movw	r18, r0
     ff4:	cb 9f       	mul	r28, r27
     ff6:	30 0d       	add	r19, r0
     ff8:	11 24       	eor	r1, r1
     ffa:	22 5f       	subi	r18, 0xF2	; 242
     ffc:	3e 4f       	sbci	r19, 0xFE	; 254
     ffe:	d9 01       	movw	r26, r18
    1000:	a8 0f       	add	r26, r24
    1002:	b9 1f       	adc	r27, r25
    1004:	2c 91       	ld	r18, X
    1006:	30 e0       	ldi	r19, 0x00	; 0
    1008:	2e 0f       	add	r18, r30
    100a:	31 1d       	adc	r19, r1
    100c:	fa 01       	movw	r30, r20
    100e:	e2 95       	swap	r30
    1010:	f2 95       	swap	r31
    1012:	f0 7f       	andi	r31, 0xF0	; 240
    1014:	fe 27       	eor	r31, r30
    1016:	e0 7f       	andi	r30, 0xF0	; 240
    1018:	fe 27       	eor	r31, r30
    101a:	e2 5e       	subi	r30, 0xE2	; 226
    101c:	fd 4f       	sbci	r31, 0xFD	; 253
    101e:	e6 0f       	add	r30, r22
    1020:	f7 1f       	adc	r31, r23
    1022:	a0 81       	ld	r26, Z
    1024:	c4 9f       	mul	r28, r20
    1026:	f0 01       	movw	r30, r0
    1028:	c5 9f       	mul	r28, r21
    102a:	f0 0d       	add	r31, r0
    102c:	11 24       	eor	r1, r1
    102e:	e2 5f       	subi	r30, 0xF2	; 242
    1030:	fe 4f       	sbci	r31, 0xFE	; 254
    1032:	e6 0f       	add	r30, r22
    1034:	f7 1f       	adc	r31, r23
    1036:	80 81       	ld	r24, Z
    1038:	90 e0       	ldi	r25, 0x00	; 0
    103a:	8a 0f       	add	r24, r26
    103c:	91 1d       	adc	r25, r1
    103e:	28 17       	cp	r18, r24
    1040:	39 07       	cpc	r19, r25
    1042:	2c f4       	brge	.+10     	; 0x104e <__stack+0x74f>
    1044:	0e 94 0c 12 	call	0x2418	; 0x2418 <rotate_left>
    1048:	0e 94 9e 12 	call	0x253c	; 0x253c <forward>
    104c:	61 c1       	rjmp	.+706    	; 0x1310 <__stack+0xa11>
    104e:	82 17       	cp	r24, r18
    1050:	93 07       	cpc	r25, r19
    1052:	0c f0       	brlt	.+2      	; 0x1056 <__stack+0x757>
    1054:	5d c1       	rjmp	.+698    	; 0x1310 <__stack+0xa11>
    1056:	0e 94 9e 12 	call	0x253c	; 0x253c <forward>
    105a:	5a c1       	rjmp	.+692    	; 0x1310 <__stack+0xa11>
    105c:	29 17       	cp	r18, r25
    105e:	28 f4       	brcc	.+10     	; 0x106a <__stack+0x76b>
    1060:	0e 94 0c 12 	call	0x2418	; 0x2418 <rotate_left>
    1064:	0e 94 9e 12 	call	0x253c	; 0x253c <forward>
    1068:	53 c1       	rjmp	.+678    	; 0x1310 <__stack+0xa11>
    106a:	92 17       	cp	r25, r18
    106c:	08 f0       	brcs	.+2      	; 0x1070 <__stack+0x771>
    106e:	50 c1       	rjmp	.+672    	; 0x1310 <__stack+0xa11>
    1070:	0e 94 9e 12 	call	0x253c	; 0x253c <forward>
    1074:	4d c1       	rjmp	.+666    	; 0x1310 <__stack+0xa11>
    1076:	81 30       	cpi	r24, 0x01	; 1
    1078:	09 f0       	breq	.+2      	; 0x107c <__stack+0x77d>
    107a:	9c c0       	rjmp	.+312    	; 0x11b4 <__stack+0x8b5>
    107c:	20 91 4d 06 	lds	r18, 0x064D	; 0x80064d <x_cor>
    1080:	30 e0       	ldi	r19, 0x00	; 0
    1082:	b9 01       	movw	r22, r18
    1084:	6f 5f       	subi	r22, 0xFF	; 255
    1086:	7f 4f       	sbci	r23, 0xFF	; 255
    1088:	80 91 48 03 	lds	r24, 0x0348	; 0x800348 <y_cor>
    108c:	90 e0       	ldi	r25, 0x00	; 0
    108e:	fb 01       	movw	r30, r22
    1090:	e2 95       	swap	r30
    1092:	f2 95       	swap	r31
    1094:	f0 7f       	andi	r31, 0xF0	; 240
    1096:	fe 27       	eor	r31, r30
    1098:	e0 7f       	andi	r30, 0xF0	; 240
    109a:	fe 27       	eor	r31, r30
    109c:	e3 5b       	subi	r30, 0xB3	; 179
    109e:	fa 4f       	sbci	r31, 0xFA	; 250
    10a0:	e8 0f       	add	r30, r24
    10a2:	f9 1f       	adc	r31, r25
    10a4:	50 81       	ld	r21, Z
    10a6:	dc 01       	movw	r26, r24
    10a8:	11 96       	adiw	r26, 0x01	; 1
    10aa:	f9 01       	movw	r30, r18
    10ac:	e2 95       	swap	r30
    10ae:	f2 95       	swap	r31
    10b0:	f0 7f       	andi	r31, 0xF0	; 240
    10b2:	fe 27       	eor	r31, r30
    10b4:	e0 7f       	andi	r30, 0xF0	; 240
    10b6:	fe 27       	eor	r31, r30
    10b8:	e3 5b       	subi	r30, 0xB3	; 179
    10ba:	fa 4f       	sbci	r31, 0xFA	; 250
    10bc:	ea 0f       	add	r30, r26
    10be:	fb 1f       	adc	r31, r27
    10c0:	40 81       	ld	r20, Z
    10c2:	54 13       	cpse	r21, r20
    10c4:	6a c0       	rjmp	.+212    	; 0x119a <__stack+0x89b>
    10c6:	86 0f       	add	r24, r22
    10c8:	97 1f       	adc	r25, r23
    10ca:	2a 0f       	add	r18, r26
    10cc:	3b 1f       	adc	r19, r27
    10ce:	82 17       	cp	r24, r18
    10d0:	93 07       	cpc	r25, r19
    10d2:	14 f4       	brge	.+4      	; 0x10d8 <__stack+0x7d9>
    10d4:	0e 94 9e 12 	call	0x253c	; 0x253c <forward>
    10d8:	80 91 4d 06 	lds	r24, 0x064D	; 0x80064d <x_cor>
    10dc:	90 e0       	ldi	r25, 0x00	; 0
    10de:	bc 01       	movw	r22, r24
    10e0:	6f 5f       	subi	r22, 0xFF	; 255
    10e2:	7f 4f       	sbci	r23, 0xFF	; 255
    10e4:	20 91 48 03 	lds	r18, 0x0348	; 0x800348 <y_cor>
    10e8:	30 e0       	ldi	r19, 0x00	; 0
    10ea:	db 01       	movw	r26, r22
    10ec:	a2 0f       	add	r26, r18
    10ee:	b3 1f       	adc	r27, r19
    10f0:	a9 01       	movw	r20, r18
    10f2:	4f 5f       	subi	r20, 0xFF	; 255
    10f4:	5f 4f       	sbci	r21, 0xFF	; 255
    10f6:	fc 01       	movw	r30, r24
    10f8:	e4 0f       	add	r30, r20
    10fa:	f5 1f       	adc	r31, r21
    10fc:	ea 17       	cp	r30, r26
    10fe:	fb 07       	cpc	r31, r27
    1100:	2c f4       	brge	.+10     	; 0x110c <__stack+0x80d>
    1102:	0e 94 0c 12 	call	0x2418	; 0x2418 <rotate_left>
    1106:	0e 94 9e 12 	call	0x253c	; 0x253c <forward>
    110a:	02 c1       	rjmp	.+516    	; 0x1310 <__stack+0xa11>
    110c:	fc 01       	movw	r30, r24
    110e:	e2 95       	swap	r30
    1110:	f2 95       	swap	r31
    1112:	f0 7f       	andi	r31, 0xF0	; 240
    1114:	fe 27       	eor	r31, r30
    1116:	e0 7f       	andi	r30, 0xF0	; 240
    1118:	fe 27       	eor	r31, r30
    111a:	e2 5e       	subi	r30, 0xE2	; 226
    111c:	fd 4f       	sbci	r31, 0xFD	; 253
    111e:	e4 0f       	add	r30, r20
    1120:	f5 1f       	adc	r31, r21
    1122:	b0 81       	ld	r27, Z
    1124:	a9 01       	movw	r20, r18
    1126:	4e 5f       	subi	r20, 0xFE	; 254
    1128:	5f 4f       	sbci	r21, 0xFF	; 255
    112a:	a1 e1       	ldi	r26, 0x11	; 17
    112c:	a8 9f       	mul	r26, r24
    112e:	f0 01       	movw	r30, r0
    1130:	a9 9f       	mul	r26, r25
    1132:	f0 0d       	add	r31, r0
    1134:	11 24       	eor	r1, r1
    1136:	e2 5f       	subi	r30, 0xF2	; 242
    1138:	fe 4f       	sbci	r31, 0xFE	; 254
    113a:	e4 0f       	add	r30, r20
    113c:	f5 1f       	adc	r31, r21
    113e:	40 81       	ld	r20, Z
    1140:	50 e0       	ldi	r21, 0x00	; 0
    1142:	4b 0f       	add	r20, r27
    1144:	51 1d       	adc	r21, r1
    1146:	fc 01       	movw	r30, r24
    1148:	32 96       	adiw	r30, 0x02	; 2
    114a:	e2 95       	swap	r30
    114c:	f2 95       	swap	r31
    114e:	f0 7f       	andi	r31, 0xF0	; 240
    1150:	fe 27       	eor	r31, r30
    1152:	e0 7f       	andi	r30, 0xF0	; 240
    1154:	fe 27       	eor	r31, r30
    1156:	e2 5e       	subi	r30, 0xE2	; 226
    1158:	fd 4f       	sbci	r31, 0xFD	; 253
    115a:	e2 0f       	add	r30, r18
    115c:	f3 1f       	adc	r31, r19
    115e:	e0 81       	ld	r30, Z
    1160:	a6 9f       	mul	r26, r22
    1162:	c0 01       	movw	r24, r0
    1164:	a7 9f       	mul	r26, r23
    1166:	90 0d       	add	r25, r0
    1168:	11 24       	eor	r1, r1
    116a:	82 5f       	subi	r24, 0xF2	; 242
    116c:	9e 4f       	sbci	r25, 0xFE	; 254
    116e:	dc 01       	movw	r26, r24
    1170:	a2 0f       	add	r26, r18
    1172:	b3 1f       	adc	r27, r19
    1174:	8c 91       	ld	r24, X
    1176:	90 e0       	ldi	r25, 0x00	; 0
    1178:	8e 0f       	add	r24, r30
    117a:	91 1d       	adc	r25, r1
    117c:	48 17       	cp	r20, r24
    117e:	59 07       	cpc	r21, r25
    1180:	2c f4       	brge	.+10     	; 0x118c <__stack+0x88d>
    1182:	0e 94 0c 12 	call	0x2418	; 0x2418 <rotate_left>
    1186:	0e 94 9e 12 	call	0x253c	; 0x253c <forward>
    118a:	c2 c0       	rjmp	.+388    	; 0x1310 <__stack+0xa11>
    118c:	84 17       	cp	r24, r20
    118e:	95 07       	cpc	r25, r21
    1190:	0c f0       	brlt	.+2      	; 0x1194 <__stack+0x895>
    1192:	be c0       	rjmp	.+380    	; 0x1310 <__stack+0xa11>
    1194:	0e 94 9e 12 	call	0x253c	; 0x253c <forward>
    1198:	bb c0       	rjmp	.+374    	; 0x1310 <__stack+0xa11>
    119a:	54 17       	cp	r21, r20
    119c:	18 f4       	brcc	.+6      	; 0x11a4 <__stack+0x8a5>
    119e:	0e 94 9e 12 	call	0x253c	; 0x253c <forward>
    11a2:	b6 c0       	rjmp	.+364    	; 0x1310 <__stack+0xa11>
    11a4:	45 17       	cp	r20, r21
    11a6:	08 f0       	brcs	.+2      	; 0x11aa <__stack+0x8ab>
    11a8:	b3 c0       	rjmp	.+358    	; 0x1310 <__stack+0xa11>
    11aa:	0e 94 0c 12 	call	0x2418	; 0x2418 <rotate_left>
    11ae:	0e 94 9e 12 	call	0x253c	; 0x253c <forward>
    11b2:	ae c0       	rjmp	.+348    	; 0x1310 <__stack+0xa11>
    11b4:	83 30       	cpi	r24, 0x03	; 3
    11b6:	09 f0       	breq	.+2      	; 0x11ba <__stack+0x8bb>
    11b8:	ab c0       	rjmp	.+342    	; 0x1310 <__stack+0xa11>
    11ba:	20 91 4d 06 	lds	r18, 0x064D	; 0x80064d <x_cor>
    11be:	30 e0       	ldi	r19, 0x00	; 0
    11c0:	b9 01       	movw	r22, r18
    11c2:	61 50       	subi	r22, 0x01	; 1
    11c4:	71 09       	sbc	r23, r1
    11c6:	80 91 48 03 	lds	r24, 0x0348	; 0x800348 <y_cor>
    11ca:	90 e0       	ldi	r25, 0x00	; 0
    11cc:	fb 01       	movw	r30, r22
    11ce:	e2 95       	swap	r30
    11d0:	f2 95       	swap	r31
    11d2:	f0 7f       	andi	r31, 0xF0	; 240
    11d4:	fe 27       	eor	r31, r30
    11d6:	e0 7f       	andi	r30, 0xF0	; 240
    11d8:	fe 27       	eor	r31, r30
    11da:	e3 5b       	subi	r30, 0xB3	; 179
    11dc:	fa 4f       	sbci	r31, 0xFA	; 250
    11de:	e8 0f       	add	r30, r24
    11e0:	f9 1f       	adc	r31, r25
    11e2:	50 81       	ld	r21, Z
    11e4:	dc 01       	movw	r26, r24
    11e6:	11 97       	sbiw	r26, 0x01	; 1
    11e8:	f9 01       	movw	r30, r18
    11ea:	e2 95       	swap	r30
    11ec:	f2 95       	swap	r31
    11ee:	f0 7f       	andi	r31, 0xF0	; 240
    11f0:	fe 27       	eor	r31, r30
    11f2:	e0 7f       	andi	r30, 0xF0	; 240
    11f4:	fe 27       	eor	r31, r30
    11f6:	e3 5b       	subi	r30, 0xB3	; 179
    11f8:	fa 4f       	sbci	r31, 0xFA	; 250
    11fa:	ea 0f       	add	r30, r26
    11fc:	fb 1f       	adc	r31, r27
    11fe:	40 81       	ld	r20, Z
    1200:	54 13       	cpse	r21, r20
    1202:	7b c0       	rjmp	.+246    	; 0x12fa <__stack+0x9fb>
    1204:	86 0f       	add	r24, r22
    1206:	97 1f       	adc	r25, r23
    1208:	2a 0f       	add	r18, r26
    120a:	3b 1f       	adc	r19, r27
    120c:	82 17       	cp	r24, r18
    120e:	93 07       	cpc	r25, r19
    1210:	14 f4       	brge	.+4      	; 0x1216 <__stack+0x917>
    1212:	0e 94 9e 12 	call	0x253c	; 0x253c <forward>
    1216:	a0 91 4d 06 	lds	r26, 0x064D	; 0x80064d <x_cor>
    121a:	6a 2f       	mov	r22, r26
    121c:	70 e0       	ldi	r23, 0x00	; 0
    121e:	9b 01       	movw	r18, r22
    1220:	21 50       	subi	r18, 0x01	; 1
    1222:	31 09       	sbc	r19, r1
    1224:	b0 91 48 03 	lds	r27, 0x0348	; 0x800348 <y_cor>
    1228:	8b 2f       	mov	r24, r27
    122a:	90 e0       	ldi	r25, 0x00	; 0
    122c:	e9 01       	movw	r28, r18
    122e:	c8 0f       	add	r28, r24
    1230:	d9 1f       	adc	r29, r25
    1232:	ac 01       	movw	r20, r24
    1234:	41 50       	subi	r20, 0x01	; 1
    1236:	51 09       	sbc	r21, r1
    1238:	fb 01       	movw	r30, r22
    123a:	e4 0f       	add	r30, r20
    123c:	f5 1f       	adc	r31, r21
    123e:	ec 17       	cp	r30, r28
    1240:	fd 07       	cpc	r31, r29
    1242:	2c f4       	brge	.+10     	; 0x124e <__stack+0x94f>
    1244:	0e 94 0c 12 	call	0x2418	; 0x2418 <rotate_left>
    1248:	0e 94 9e 12 	call	0x253c	; 0x253c <forward>
    124c:	61 c0       	rjmp	.+194    	; 0x1310 <__stack+0xa11>
    124e:	f9 01       	movw	r30, r18
    1250:	e2 95       	swap	r30
    1252:	f2 95       	swap	r31
    1254:	f0 7f       	andi	r31, 0xF0	; 240
    1256:	fe 27       	eor	r31, r30
    1258:	e0 7f       	andi	r30, 0xF0	; 240
    125a:	fe 27       	eor	r31, r30
    125c:	e2 5e       	subi	r30, 0xE2	; 226
    125e:	fd 4f       	sbci	r31, 0xFD	; 253
    1260:	e8 0f       	add	r30, r24
    1262:	f9 1f       	adc	r31, r25
    1264:	d0 81       	ld	r29, Z
    1266:	c1 e1       	ldi	r28, 0x11	; 17
    1268:	c2 9f       	mul	r28, r18
    126a:	f0 01       	movw	r30, r0
    126c:	c3 9f       	mul	r28, r19
    126e:	f0 0d       	add	r31, r0
    1270:	11 24       	eor	r1, r1
    1272:	9f 01       	movw	r18, r30
    1274:	22 5f       	subi	r18, 0xF2	; 242
    1276:	3e 4f       	sbci	r19, 0xFE	; 254
    1278:	f9 01       	movw	r30, r18
    127a:	e8 0f       	add	r30, r24
    127c:	f9 1f       	adc	r31, r25
    127e:	20 81       	ld	r18, Z
    1280:	30 e0       	ldi	r19, 0x00	; 0
    1282:	2d 0f       	add	r18, r29
    1284:	31 1d       	adc	r19, r1
    1286:	fb 01       	movw	r30, r22
    1288:	e2 95       	swap	r30
    128a:	f2 95       	swap	r31
    128c:	f0 7f       	andi	r31, 0xF0	; 240
    128e:	fe 27       	eor	r31, r30
    1290:	e0 7f       	andi	r30, 0xF0	; 240
    1292:	fe 27       	eor	r31, r30
    1294:	e2 5e       	subi	r30, 0xE2	; 226
    1296:	fd 4f       	sbci	r31, 0xFD	; 253
    1298:	e4 0f       	add	r30, r20
    129a:	f5 1f       	adc	r31, r21
    129c:	e0 81       	ld	r30, Z
    129e:	c6 9f       	mul	r28, r22
    12a0:	c0 01       	movw	r24, r0
    12a2:	c7 9f       	mul	r28, r23
    12a4:	90 0d       	add	r25, r0
    12a6:	11 24       	eor	r1, r1
    12a8:	82 5f       	subi	r24, 0xF2	; 242
    12aa:	9e 4f       	sbci	r25, 0xFE	; 254
    12ac:	ec 01       	movw	r28, r24
    12ae:	c4 0f       	add	r28, r20
    12b0:	d5 1f       	adc	r29, r21
    12b2:	88 81       	ld	r24, Y
    12b4:	90 e0       	ldi	r25, 0x00	; 0
    12b6:	8e 0f       	add	r24, r30
    12b8:	91 1d       	adc	r25, r1
    12ba:	28 17       	cp	r18, r24
    12bc:	39 07       	cpc	r19, r25
    12be:	1c f4       	brge	.+6      	; 0x12c6 <__stack+0x9c7>
    12c0:	0e 94 9e 12 	call	0x253c	; 0x253c <forward>
    12c4:	25 c0       	rjmp	.+74     	; 0x1310 <__stack+0xa11>
    12c6:	82 17       	cp	r24, r18
    12c8:	93 07       	cpc	r25, r19
    12ca:	2c f4       	brge	.+10     	; 0x12d6 <__stack+0x9d7>
    12cc:	0e 94 0c 12 	call	0x2418	; 0x2418 <rotate_left>
    12d0:	0e 94 9e 12 	call	0x253c	; 0x253c <forward>
    12d4:	1d c0       	rjmp	.+58     	; 0x1310 <__stack+0xa11>
    12d6:	a9 30       	cpi	r26, 0x09	; 9
    12d8:	68 f4       	brcc	.+26     	; 0x12f4 <__stack+0x9f5>
    12da:	b8 30       	cpi	r27, 0x08	; 8
    12dc:	58 f0       	brcs	.+22     	; 0x12f4 <__stack+0x9f5>
    12de:	90 91 4f 07 	lds	r25, 0x074F	; 0x80074f <pot_south>
    12e2:	80 91 52 07 	lds	r24, 0x0752	; 0x800752 <pot_west>
    12e6:	98 17       	cp	r25, r24
    12e8:	98 f4       	brcc	.+38     	; 0x1310 <__stack+0xa11>
    12ea:	0e 94 0c 12 	call	0x2418	; 0x2418 <rotate_left>
    12ee:	0e 94 9e 12 	call	0x253c	; 0x253c <forward>
    12f2:	0e c0       	rjmp	.+28     	; 0x1310 <__stack+0xa11>
    12f4:	0e 94 9e 12 	call	0x253c	; 0x253c <forward>
    12f8:	0b c0       	rjmp	.+22     	; 0x1310 <__stack+0xa11>
    12fa:	45 17       	cp	r20, r21
    12fc:	28 f4       	brcc	.+10     	; 0x1308 <__stack+0xa09>
    12fe:	0e 94 0c 12 	call	0x2418	; 0x2418 <rotate_left>
    1302:	0e 94 9e 12 	call	0x253c	; 0x253c <forward>
    1306:	04 c0       	rjmp	.+8      	; 0x1310 <__stack+0xa11>
    1308:	54 17       	cp	r21, r20
    130a:	10 f4       	brcc	.+4      	; 0x1310 <__stack+0xa11>
    130c:	0e 94 9e 12 	call	0x253c	; 0x253c <forward>
    1310:	df 91       	pop	r29
    1312:	cf 91       	pop	r28
    1314:	08 95       	ret

00001316 <Solve_3_ways>:
void Solve_3_ways()
{
    1316:	df 92       	push	r13
    1318:	ef 92       	push	r14
    131a:	ff 92       	push	r15
    131c:	0f 93       	push	r16
    131e:	1f 93       	push	r17
    1320:	cf 93       	push	r28
    1322:	df 93       	push	r29

    trail_north = (y_cor + 1 < ROWS) ? trail[x_cor][y_cor + 1] : 0;
    1324:	30 91 48 03 	lds	r19, 0x0348	; 0x800348 <y_cor>
    1328:	83 2f       	mov	r24, r19
    132a:	90 e0       	ldi	r25, 0x00	; 0
    132c:	dc 01       	movw	r26, r24
    132e:	11 96       	adiw	r26, 0x01	; 1
    1330:	a0 31       	cpi	r26, 0x10	; 16
    1332:	b1 05       	cpc	r27, r1
    1334:	64 f4       	brge	.+24     	; 0x134e <Solve_3_ways+0x38>
    1336:	e0 91 4d 06 	lds	r30, 0x064D	; 0x80064d <x_cor>
    133a:	20 e1       	ldi	r18, 0x10	; 16
    133c:	e2 9f       	mul	r30, r18
    133e:	f0 01       	movw	r30, r0
    1340:	11 24       	eor	r1, r1
    1342:	e3 5b       	subi	r30, 0xB3	; 179
    1344:	fa 4f       	sbci	r31, 0xFA	; 250
    1346:	ea 0f       	add	r30, r26
    1348:	fb 1f       	adc	r31, r27
    134a:	f0 80       	ld	r15, Z
    134c:	01 c0       	rjmp	.+2      	; 0x1350 <Solve_3_ways+0x3a>
    134e:	f1 2c       	mov	r15, r1
    1350:	f0 92 53 07 	sts	0x0753, r15	; 0x800753 <trail_north>
    trail_east = (x_cor + 1 < COLS) ? trail[x_cor + 1][y_cor] : 0;
    1354:	20 91 4d 06 	lds	r18, 0x064D	; 0x80064d <x_cor>
    1358:	42 2f       	mov	r20, r18
    135a:	50 e0       	ldi	r21, 0x00	; 0
    135c:	ea 01       	movw	r28, r20
    135e:	21 96       	adiw	r28, 0x01	; 1
    1360:	c0 31       	cpi	r28, 0x10	; 16
    1362:	d1 05       	cpc	r29, r1
    1364:	6c f4       	brge	.+26     	; 0x1380 <Solve_3_ways+0x6a>
    1366:	fe 01       	movw	r30, r28
    1368:	e2 95       	swap	r30
    136a:	f2 95       	swap	r31
    136c:	f0 7f       	andi	r31, 0xF0	; 240
    136e:	fe 27       	eor	r31, r30
    1370:	e0 7f       	andi	r30, 0xF0	; 240
    1372:	fe 27       	eor	r31, r30
    1374:	e3 5b       	subi	r30, 0xB3	; 179
    1376:	fa 4f       	sbci	r31, 0xFA	; 250
    1378:	e8 0f       	add	r30, r24
    137a:	f9 1f       	adc	r31, r25
    137c:	e0 80       	ld	r14, Z
    137e:	01 c0       	rjmp	.+2      	; 0x1382 <Solve_3_ways+0x6c>
    1380:	e1 2c       	mov	r14, r1
    1382:	e0 92 56 07 	sts	0x0756, r14	; 0x800756 <trail_east>
    trail_south = (y_cor - 1 >= 0) ? trail[x_cor][y_cor - 1] : 0;
    1386:	bc 01       	movw	r22, r24
    1388:	61 50       	subi	r22, 0x01	; 1
    138a:	71 09       	sbc	r23, r1
    138c:	6a f0       	brmi	.+26     	; 0x13a8 <Solve_3_ways+0x92>
    138e:	fa 01       	movw	r30, r20
    1390:	e2 95       	swap	r30
    1392:	f2 95       	swap	r31
    1394:	f0 7f       	andi	r31, 0xF0	; 240
    1396:	fe 27       	eor	r31, r30
    1398:	e0 7f       	andi	r30, 0xF0	; 240
    139a:	fe 27       	eor	r31, r30
    139c:	e3 5b       	subi	r30, 0xB3	; 179
    139e:	fa 4f       	sbci	r31, 0xFA	; 250
    13a0:	e6 0f       	add	r30, r22
    13a2:	f7 1f       	adc	r31, r23
    13a4:	e0 81       	ld	r30, Z
    13a6:	01 c0       	rjmp	.+2      	; 0x13aa <Solve_3_ways+0x94>
    13a8:	e0 e0       	ldi	r30, 0x00	; 0
    13aa:	e0 93 51 07 	sts	0x0751, r30	; 0x800751 <trail_south>
    trail_west = (x_cor - 1 >= 0) ? trail[x_cor - 1][y_cor] : 0;
    13ae:	8a 01       	movw	r16, r20
    13b0:	01 50       	subi	r16, 0x01	; 1
    13b2:	11 09       	sbc	r17, r1
    13b4:	6a f0       	brmi	.+26     	; 0x13d0 <Solve_3_ways+0xba>
    13b6:	f8 01       	movw	r30, r16
    13b8:	e2 95       	swap	r30
    13ba:	f2 95       	swap	r31
    13bc:	f0 7f       	andi	r31, 0xF0	; 240
    13be:	fe 27       	eor	r31, r30
    13c0:	e0 7f       	andi	r30, 0xF0	; 240
    13c2:	fe 27       	eor	r31, r30
    13c4:	e3 5b       	subi	r30, 0xB3	; 179
    13c6:	fa 4f       	sbci	r31, 0xFA	; 250
    13c8:	e8 0f       	add	r30, r24
    13ca:	f9 1f       	adc	r31, r25
    13cc:	e0 81       	ld	r30, Z
    13ce:	01 c0       	rjmp	.+2      	; 0x13d2 <Solve_3_ways+0xbc>
    13d0:	e0 e0       	ldi	r30, 0x00	; 0
    13d2:	e0 93 55 07 	sts	0x0755, r30	; 0x800755 <trail_west>
    uint8_t Quarter = 0;
    if (x_cor <= x_fin && y_cor >= y_fin)
    13d6:	29 30       	cpi	r18, 0x09	; 9
    13d8:	10 f4       	brcc	.+4      	; 0x13de <Solve_3_ways+0xc8>
    13da:	38 30       	cpi	r19, 0x08	; 8
    13dc:	70 f4       	brcc	.+28     	; 0x13fa <Solve_3_ways+0xe4>
        Quarter = north_west;
    else if (x_cor >= x_fin && y_cor >= y_fin)
    13de:	28 30       	cpi	r18, 0x08	; 8
    13e0:	10 f0       	brcs	.+4      	; 0x13e6 <Solve_3_ways+0xd0>
    13e2:	38 30       	cpi	r19, 0x08	; 8
    13e4:	60 f4       	brcc	.+24     	; 0x13fe <Solve_3_ways+0xe8>
        Quarter = north_east;
    else if (x_cor <= x_fin && y_cor <= y_fin)
    13e6:	29 30       	cpi	r18, 0x09	; 9
    13e8:	10 f4       	brcc	.+4      	; 0x13ee <Solve_3_ways+0xd8>
    13ea:	39 30       	cpi	r19, 0x09	; 9
    13ec:	58 f0       	brcs	.+22     	; 0x1404 <Solve_3_ways+0xee>
        Quarter = south_west;
    else if (x_cor >= x_fin && y_cor <= y_fin)
    13ee:	28 30       	cpi	r18, 0x08	; 8
    13f0:	68 f0       	brcs	.+26     	; 0x140c <Solve_3_ways+0xf6>
    13f2:	39 30       	cpi	r19, 0x09	; 9
    13f4:	68 f0       	brcs	.+26     	; 0x1410 <Solve_3_ways+0xfa>

    trail_north = (y_cor + 1 < ROWS) ? trail[x_cor][y_cor + 1] : 0;
    trail_east = (x_cor + 1 < COLS) ? trail[x_cor + 1][y_cor] : 0;
    trail_south = (y_cor - 1 >= 0) ? trail[x_cor][y_cor - 1] : 0;
    trail_west = (x_cor - 1 >= 0) ? trail[x_cor - 1][y_cor] : 0;
    uint8_t Quarter = 0;
    13f6:	d1 2c       	mov	r13, r1
    13f8:	0f c0       	rjmp	.+30     	; 0x1418 <Solve_3_ways+0x102>
    if (x_cor <= x_fin && y_cor >= y_fin)
        Quarter = north_west;
    13fa:	d1 2c       	mov	r13, r1
    13fc:	0d c0       	rjmp	.+26     	; 0x1418 <Solve_3_ways+0x102>
    else if (x_cor >= x_fin && y_cor >= y_fin)
        Quarter = north_east;
    13fe:	dd 24       	eor	r13, r13
    1400:	d3 94       	inc	r13
    1402:	0a c0       	rjmp	.+20     	; 0x1418 <Solve_3_ways+0x102>
    else if (x_cor <= x_fin && y_cor <= y_fin)
        Quarter = south_west;
    1404:	68 94       	set
    1406:	dd 24       	eor	r13, r13
    1408:	d1 f8       	bld	r13, 1
    140a:	06 c0       	rjmp	.+12     	; 0x1418 <Solve_3_ways+0x102>

    trail_north = (y_cor + 1 < ROWS) ? trail[x_cor][y_cor + 1] : 0;
    trail_east = (x_cor + 1 < COLS) ? trail[x_cor + 1][y_cor] : 0;
    trail_south = (y_cor - 1 >= 0) ? trail[x_cor][y_cor - 1] : 0;
    trail_west = (x_cor - 1 >= 0) ? trail[x_cor - 1][y_cor] : 0;
    uint8_t Quarter = 0;
    140c:	d1 2c       	mov	r13, r1
    140e:	04 c0       	rjmp	.+8      	; 0x1418 <Solve_3_ways+0x102>
    else if (x_cor >= x_fin && y_cor >= y_fin)
        Quarter = north_east;
    else if (x_cor <= x_fin && y_cor <= y_fin)
        Quarter = south_west;
    else if (x_cor >= x_fin && y_cor <= y_fin)
        Quarter = south_east;
    1410:	0f 2e       	mov	r0, r31
    1412:	f3 e0       	ldi	r31, 0x03	; 3
    1414:	df 2e       	mov	r13, r31
    1416:	f0 2d       	mov	r31, r0

    if (face == north)
    1418:	20 91 49 03 	lds	r18, 0x0349	; 0x800349 <face>
    141c:	21 11       	cpse	r18, r1
    141e:	57 c1       	rjmp	.+686    	; 0x16ce <Solve_3_ways+0x3b8>
    {
        if (trail_north > trail_west && trail_north > trail_east)
    1420:	ef 15       	cp	r30, r15
    1422:	28 f4       	brcc	.+10     	; 0x142e <Solve_3_ways+0x118>
    1424:	ef 14       	cp	r14, r15
    1426:	18 f4       	brcc	.+6      	; 0x142e <Solve_3_ways+0x118>
        {
            forward();
    1428:	0e 94 9e 12 	call	0x253c	; 0x253c <forward>
    142c:	08 c0       	rjmp	.+16     	; 0x143e <Solve_3_ways+0x128>
        }
        else if (trail_west > trail_north && trail_west > trail_east)
    142e:	fe 16       	cp	r15, r30
    1430:	30 f4       	brcc	.+12     	; 0x143e <Solve_3_ways+0x128>
    1432:	ee 16       	cp	r14, r30
    1434:	20 f4       	brcc	.+8      	; 0x143e <Solve_3_ways+0x128>
        {
            rotate_left();
    1436:	0e 94 0c 12 	call	0x2418	; 0x2418 <rotate_left>
            forward();
    143a:	0e 94 9e 12 	call	0x253c	; 0x253c <forward>
        }
        if (trail_east > trail_west && trail_east > trail_north) // moved in the right cell before?
    143e:	80 91 56 07 	lds	r24, 0x0756	; 0x800756 <trail_east>
    1442:	90 91 55 07 	lds	r25, 0x0755	; 0x800755 <trail_west>
    1446:	98 17       	cp	r25, r24
    1448:	48 f4       	brcc	.+18     	; 0x145c <Solve_3_ways+0x146>
    144a:	20 91 53 07 	lds	r18, 0x0753	; 0x800753 <trail_north>
    144e:	28 17       	cp	r18, r24
    1450:	28 f4       	brcc	.+10     	; 0x145c <Solve_3_ways+0x146>
        {
            rotate_right();
    1452:	0e 94 55 12 	call	0x24aa	; 0x24aa <rotate_right>
            forward();
    1456:	0e 94 9e 12 	call	0x253c	; 0x253c <forward>
    145a:	6d c7       	rjmp	.+3802   	; 0x2336 <Solve_3_ways+0x1020>
        }
        else if (trail_north == trail_west && trail_north == trail_east) // moved in the leading cell before?
    145c:	20 91 53 07 	lds	r18, 0x0753	; 0x800753 <trail_north>
    1460:	92 13       	cpse	r25, r18
    1462:	07 c0       	rjmp	.+14     	; 0x1472 <Solve_3_ways+0x15c>
    1464:	82 13       	cpse	r24, r18
    1466:	05 c0       	rjmp	.+10     	; 0x1472 <Solve_3_ways+0x15c>
        {
            // always your left will be less than your front and right
            //--> try for example the poin 4,6
            rotate_left();
    1468:	0e 94 0c 12 	call	0x2418	; 0x2418 <rotate_left>
            forward();
    146c:	0e 94 9e 12 	call	0x253c	; 0x253c <forward>
    1470:	62 c7       	rjmp	.+3780   	; 0x2336 <Solve_3_ways+0x1020>
        }
        else if (trail_east == trail_north) // sum of X & Y will always be equal
    1472:	82 13       	cpse	r24, r18
    1474:	7e c0       	rjmp	.+252    	; 0x1572 <Solve_3_ways+0x25c>
        {
            if ((Blocking_V_Walls[x_cor][y_cor + 1] + Blocking_H_Walls[x_cor][y_cor + 2]) < (Blocking_V_Walls[x_cor + 2][y_cor] + Blocking_H_Walls[x_cor + 1][y_cor]))
    1476:	20 91 4d 06 	lds	r18, 0x064D	; 0x80064d <x_cor>
    147a:	30 e0       	ldi	r19, 0x00	; 0
    147c:	80 91 48 03 	lds	r24, 0x0348	; 0x800348 <y_cor>
    1480:	90 e0       	ldi	r25, 0x00	; 0
    1482:	bc 01       	movw	r22, r24
    1484:	6f 5f       	subi	r22, 0xFF	; 255
    1486:	7f 4f       	sbci	r23, 0xFF	; 255
    1488:	f9 01       	movw	r30, r18
    148a:	e2 95       	swap	r30
    148c:	f2 95       	swap	r31
    148e:	f0 7f       	andi	r31, 0xF0	; 240
    1490:	fe 27       	eor	r31, r30
    1492:	e0 7f       	andi	r30, 0xF0	; 240
    1494:	fe 27       	eor	r31, r30
    1496:	e2 5e       	subi	r30, 0xE2	; 226
    1498:	fd 4f       	sbci	r31, 0xFD	; 253
    149a:	e6 0f       	add	r30, r22
    149c:	f7 1f       	adc	r31, r23
    149e:	d0 81       	ld	r29, Z
    14a0:	dc 01       	movw	r26, r24
    14a2:	12 96       	adiw	r26, 0x02	; 2
    14a4:	c1 e1       	ldi	r28, 0x11	; 17
    14a6:	c2 9f       	mul	r28, r18
    14a8:	f0 01       	movw	r30, r0
    14aa:	c3 9f       	mul	r28, r19
    14ac:	f0 0d       	add	r31, r0
    14ae:	11 24       	eor	r1, r1
    14b0:	e2 5f       	subi	r30, 0xF2	; 242
    14b2:	fe 4f       	sbci	r31, 0xFE	; 254
    14b4:	ea 0f       	add	r30, r26
    14b6:	fb 1f       	adc	r31, r27
    14b8:	40 81       	ld	r20, Z
    14ba:	50 e0       	ldi	r21, 0x00	; 0
    14bc:	4d 0f       	add	r20, r29
    14be:	51 1d       	adc	r21, r1
    14c0:	f9 01       	movw	r30, r18
    14c2:	32 96       	adiw	r30, 0x02	; 2
    14c4:	e2 95       	swap	r30
    14c6:	f2 95       	swap	r31
    14c8:	f0 7f       	andi	r31, 0xF0	; 240
    14ca:	fe 27       	eor	r31, r30
    14cc:	e0 7f       	andi	r30, 0xF0	; 240
    14ce:	fe 27       	eor	r31, r30
    14d0:	e2 5e       	subi	r30, 0xE2	; 226
    14d2:	fd 4f       	sbci	r31, 0xFD	; 253
    14d4:	e8 0f       	add	r30, r24
    14d6:	f9 1f       	adc	r31, r25
    14d8:	d0 81       	ld	r29, Z
    14da:	89 01       	movw	r16, r18
    14dc:	0f 5f       	subi	r16, 0xFF	; 255
    14de:	1f 4f       	sbci	r17, 0xFF	; 255
    14e0:	c0 9f       	mul	r28, r16
    14e2:	f0 01       	movw	r30, r0
    14e4:	c1 9f       	mul	r28, r17
    14e6:	f0 0d       	add	r31, r0
    14e8:	11 24       	eor	r1, r1
    14ea:	e2 5f       	subi	r30, 0xF2	; 242
    14ec:	fe 4f       	sbci	r31, 0xFE	; 254
    14ee:	e8 0f       	add	r30, r24
    14f0:	f9 1f       	adc	r31, r25
    14f2:	80 81       	ld	r24, Z
    14f4:	90 e0       	ldi	r25, 0x00	; 0
    14f6:	8d 0f       	add	r24, r29
    14f8:	91 1d       	adc	r25, r1
    14fa:	48 17       	cp	r20, r24
    14fc:	59 07       	cpc	r21, r25
    14fe:	1c f4       	brge	.+6      	; 0x1506 <Solve_3_ways+0x1f0>
            {
                forward();
    1500:	0e 94 9e 12 	call	0x253c	; 0x253c <forward>
    1504:	18 c7       	rjmp	.+3632   	; 0x2336 <Solve_3_ways+0x1020>
            }
            else if ((Blocking_V_Walls[x_cor][y_cor + 2] + Blocking_H_Walls[x_cor][y_cor + 1]) > (Blocking_V_Walls[x_cor + 2][y_cor] + Blocking_H_Walls[x_cor + 1][y_cor]))
    1506:	a9 01       	movw	r20, r18
    1508:	42 95       	swap	r20
    150a:	52 95       	swap	r21
    150c:	50 7f       	andi	r21, 0xF0	; 240
    150e:	54 27       	eor	r21, r20
    1510:	40 7f       	andi	r20, 0xF0	; 240
    1512:	54 27       	eor	r21, r20
    1514:	42 5e       	subi	r20, 0xE2	; 226
    1516:	5d 4f       	sbci	r21, 0xFD	; 253
    1518:	a4 0f       	add	r26, r20
    151a:	b5 1f       	adc	r27, r21
    151c:	ec 91       	ld	r30, X
    151e:	f1 e1       	ldi	r31, 0x11	; 17
    1520:	f2 9f       	mul	r31, r18
    1522:	a0 01       	movw	r20, r0
    1524:	f3 9f       	mul	r31, r19
    1526:	50 0d       	add	r21, r0
    1528:	11 24       	eor	r1, r1
    152a:	9a 01       	movw	r18, r20
    152c:	22 5f       	subi	r18, 0xF2	; 242
    152e:	3e 4f       	sbci	r19, 0xFE	; 254
    1530:	d9 01       	movw	r26, r18
    1532:	a6 0f       	add	r26, r22
    1534:	b7 1f       	adc	r27, r23
    1536:	2c 91       	ld	r18, X
    1538:	30 e0       	ldi	r19, 0x00	; 0
    153a:	2e 0f       	add	r18, r30
    153c:	31 1d       	adc	r19, r1
    153e:	82 17       	cp	r24, r18
    1540:	93 07       	cpc	r25, r19
    1542:	2c f4       	brge	.+10     	; 0x154e <Solve_3_ways+0x238>
            {
                rotate_right();
    1544:	0e 94 55 12 	call	0x24aa	; 0x24aa <rotate_right>
                forward();
    1548:	0e 94 9e 12 	call	0x253c	; 0x253c <forward>
    154c:	f4 c6       	rjmp	.+3560   	; 0x2336 <Solve_3_ways+0x1020>
            else
            {
                //needs to be seen as it wount matter anyway
                // in the potential values your right will always be greater than your north
                //  north west quarter
                if (Quarter == north_east)
    154e:	81 e0       	ldi	r24, 0x01	; 1
    1550:	d8 12       	cpse	r13, r24
    1552:	05 c0       	rjmp	.+10     	; 0x155e <Solve_3_ways+0x248>
                {
                    rotate_right();
    1554:	0e 94 55 12 	call	0x24aa	; 0x24aa <rotate_right>
                    forward();
    1558:	0e 94 9e 12 	call	0x253c	; 0x253c <forward>
    155c:	ec c6       	rjmp	.+3544   	; 0x2336 <Solve_3_ways+0x1020>
                }
                
                else if (Quarter == north_west)
    155e:	d1 10       	cpse	r13, r1
    1560:	05 c0       	rjmp	.+10     	; 0x156c <Solve_3_ways+0x256>
                {
                    rotate_left();
    1562:	0e 94 0c 12 	call	0x2418	; 0x2418 <rotate_left>
                    forward();
    1566:	0e 94 9e 12 	call	0x253c	; 0x253c <forward>
    156a:	e5 c6       	rjmp	.+3530   	; 0x2336 <Solve_3_ways+0x1020>
                }
                else // weather you are east or west you will always go forward
                    forward();
    156c:	0e 94 9e 12 	call	0x253c	; 0x253c <forward>
    1570:	e2 c6       	rjmp	.+3524   	; 0x2336 <Solve_3_ways+0x1020>
            }
        }
        else if (trail_east == trail_west)
    1572:	89 13       	cpse	r24, r25
    1574:	56 c0       	rjmp	.+172    	; 0x1622 <Solve_3_ways+0x30c>
        {
            if ((Blocking_V_Walls[x_cor - 1][y_cor] + Blocking_H_Walls[x_cor - 1][y_cor]) < (Blocking_V_Walls[x_cor + 2][y_cor] + Blocking_H_Walls[x_cor + 1][y_cor]))
    1576:	20 91 4d 06 	lds	r18, 0x064D	; 0x80064d <x_cor>
    157a:	30 e0       	ldi	r19, 0x00	; 0
    157c:	a9 01       	movw	r20, r18
    157e:	41 50       	subi	r20, 0x01	; 1
    1580:	51 09       	sbc	r21, r1
    1582:	80 91 48 03 	lds	r24, 0x0348	; 0x800348 <y_cor>
    1586:	90 e0       	ldi	r25, 0x00	; 0
    1588:	fa 01       	movw	r30, r20
    158a:	e2 95       	swap	r30
    158c:	f2 95       	swap	r31
    158e:	f0 7f       	andi	r31, 0xF0	; 240
    1590:	fe 27       	eor	r31, r30
    1592:	e0 7f       	andi	r30, 0xF0	; 240
    1594:	fe 27       	eor	r31, r30
    1596:	e2 5e       	subi	r30, 0xE2	; 226
    1598:	fd 4f       	sbci	r31, 0xFD	; 253
    159a:	e8 0f       	add	r30, r24
    159c:	f9 1f       	adc	r31, r25
    159e:	60 81       	ld	r22, Z
    15a0:	a1 e1       	ldi	r26, 0x11	; 17
    15a2:	a4 9f       	mul	r26, r20
    15a4:	f0 01       	movw	r30, r0
    15a6:	a5 9f       	mul	r26, r21
    15a8:	f0 0d       	add	r31, r0
    15aa:	11 24       	eor	r1, r1
    15ac:	e2 5f       	subi	r30, 0xF2	; 242
    15ae:	fe 4f       	sbci	r31, 0xFE	; 254
    15b0:	e8 0f       	add	r30, r24
    15b2:	f9 1f       	adc	r31, r25
    15b4:	40 81       	ld	r20, Z
    15b6:	50 e0       	ldi	r21, 0x00	; 0
    15b8:	46 0f       	add	r20, r22
    15ba:	51 1d       	adc	r21, r1
    15bc:	f9 01       	movw	r30, r18
    15be:	32 96       	adiw	r30, 0x02	; 2
    15c0:	e2 95       	swap	r30
    15c2:	f2 95       	swap	r31
    15c4:	f0 7f       	andi	r31, 0xF0	; 240
    15c6:	fe 27       	eor	r31, r30
    15c8:	e0 7f       	andi	r30, 0xF0	; 240
    15ca:	fe 27       	eor	r31, r30
    15cc:	e2 5e       	subi	r30, 0xE2	; 226
    15ce:	fd 4f       	sbci	r31, 0xFD	; 253
    15d0:	e8 0f       	add	r30, r24
    15d2:	f9 1f       	adc	r31, r25
    15d4:	e0 81       	ld	r30, Z
    15d6:	2f 5f       	subi	r18, 0xFF	; 255
    15d8:	3f 4f       	sbci	r19, 0xFF	; 255
    15da:	a2 9f       	mul	r26, r18
    15dc:	b0 01       	movw	r22, r0
    15de:	a3 9f       	mul	r26, r19
    15e0:	70 0d       	add	r23, r0
    15e2:	11 24       	eor	r1, r1
    15e4:	9b 01       	movw	r18, r22
    15e6:	22 5f       	subi	r18, 0xF2	; 242
    15e8:	3e 4f       	sbci	r19, 0xFE	; 254
    15ea:	d9 01       	movw	r26, r18
    15ec:	a8 0f       	add	r26, r24
    15ee:	b9 1f       	adc	r27, r25
    15f0:	8c 91       	ld	r24, X
    15f2:	90 e0       	ldi	r25, 0x00	; 0
    15f4:	8e 0f       	add	r24, r30
    15f6:	91 1d       	adc	r25, r1
    15f8:	48 17       	cp	r20, r24
    15fa:	59 07       	cpc	r21, r25
    15fc:	2c f4       	brge	.+10     	; 0x1608 <Solve_3_ways+0x2f2>
            {
                rotate_right();
    15fe:	0e 94 55 12 	call	0x24aa	; 0x24aa <rotate_right>
                forward();
    1602:	0e 94 9e 12 	call	0x253c	; 0x253c <forward>
    1606:	97 c6       	rjmp	.+3374   	; 0x2336 <Solve_3_ways+0x1020>
            }
            else if ((Blocking_V_Walls[x_cor - 1][y_cor] + Blocking_H_Walls[x_cor - 1][y_cor]) > (Blocking_V_Walls[x_cor + 2][y_cor] + Blocking_H_Walls[x_cor + 1][y_cor]))
    1608:	84 17       	cp	r24, r20
    160a:	95 07       	cpc	r25, r21
    160c:	2c f4       	brge	.+10     	; 0x1618 <Solve_3_ways+0x302>
            {
                rotate_left();
    160e:	0e 94 0c 12 	call	0x2418	; 0x2418 <rotate_left>
                forward();
    1612:	0e 94 9e 12 	call	0x253c	; 0x253c <forward>
    1616:	8f c6       	rjmp	.+3358   	; 0x2336 <Solve_3_ways+0x1020>
            }
            else
            {

                rotate_left();
    1618:	0e 94 0c 12 	call	0x2418	; 0x2418 <rotate_left>
                forward();
    161c:	0e 94 9e 12 	call	0x253c	; 0x253c <forward>
    1620:	8a c6       	rjmp	.+3348   	; 0x2336 <Solve_3_ways+0x1020>
            }
        }
        else if (trail_north == trail_west)
    1622:	92 13       	cpse	r25, r18
    1624:	88 c6       	rjmp	.+3344   	; 0x2336 <Solve_3_ways+0x1020>
        {
            if ((Blocking_V_Walls[x_cor - 1][y_cor] + Blocking_H_Walls[x_cor - 1][y_cor]) < (Blocking_V_Walls[x_cor + 1][y_cor + 1] + Blocking_H_Walls[x_cor][y_cor + 2]))
    1626:	40 91 4d 06 	lds	r20, 0x064D	; 0x80064d <x_cor>
    162a:	50 e0       	ldi	r21, 0x00	; 0
    162c:	9a 01       	movw	r18, r20
    162e:	21 50       	subi	r18, 0x01	; 1
    1630:	31 09       	sbc	r19, r1
    1632:	80 91 48 03 	lds	r24, 0x0348	; 0x800348 <y_cor>
    1636:	90 e0       	ldi	r25, 0x00	; 0
    1638:	f9 01       	movw	r30, r18
    163a:	e2 95       	swap	r30
    163c:	f2 95       	swap	r31
    163e:	f0 7f       	andi	r31, 0xF0	; 240
    1640:	fe 27       	eor	r31, r30
    1642:	e0 7f       	andi	r30, 0xF0	; 240
    1644:	fe 27       	eor	r31, r30
    1646:	e2 5e       	subi	r30, 0xE2	; 226
    1648:	fd 4f       	sbci	r31, 0xFD	; 253
    164a:	e8 0f       	add	r30, r24
    164c:	f9 1f       	adc	r31, r25
    164e:	60 81       	ld	r22, Z
    1650:	a1 e1       	ldi	r26, 0x11	; 17
    1652:	a2 9f       	mul	r26, r18
    1654:	f0 01       	movw	r30, r0
    1656:	a3 9f       	mul	r26, r19
    1658:	f0 0d       	add	r31, r0
    165a:	11 24       	eor	r1, r1
    165c:	e2 5f       	subi	r30, 0xF2	; 242
    165e:	fe 4f       	sbci	r31, 0xFE	; 254
    1660:	e8 0f       	add	r30, r24
    1662:	f9 1f       	adc	r31, r25
    1664:	20 81       	ld	r18, Z
    1666:	30 e0       	ldi	r19, 0x00	; 0
    1668:	26 0f       	add	r18, r22
    166a:	31 1d       	adc	r19, r1
    166c:	ba 01       	movw	r22, r20
    166e:	6f 5f       	subi	r22, 0xFF	; 255
    1670:	7f 4f       	sbci	r23, 0xFF	; 255
    1672:	fc 01       	movw	r30, r24
    1674:	31 96       	adiw	r30, 0x01	; 1
    1676:	62 95       	swap	r22
    1678:	72 95       	swap	r23
    167a:	70 7f       	andi	r23, 0xF0	; 240
    167c:	76 27       	eor	r23, r22
    167e:	60 7f       	andi	r22, 0xF0	; 240
    1680:	76 27       	eor	r23, r22
    1682:	62 5e       	subi	r22, 0xE2	; 226
    1684:	7d 4f       	sbci	r23, 0xFD	; 253
    1686:	e6 0f       	add	r30, r22
    1688:	f7 1f       	adc	r31, r23
    168a:	60 81       	ld	r22, Z
    168c:	02 96       	adiw	r24, 0x02	; 2
    168e:	a4 9f       	mul	r26, r20
    1690:	f0 01       	movw	r30, r0
    1692:	a5 9f       	mul	r26, r21
    1694:	f0 0d       	add	r31, r0
    1696:	11 24       	eor	r1, r1
    1698:	e2 5f       	subi	r30, 0xF2	; 242
    169a:	fe 4f       	sbci	r31, 0xFE	; 254
    169c:	e8 0f       	add	r30, r24
    169e:	f9 1f       	adc	r31, r25
    16a0:	80 81       	ld	r24, Z
    16a2:	90 e0       	ldi	r25, 0x00	; 0
    16a4:	86 0f       	add	r24, r22
    16a6:	91 1d       	adc	r25, r1
    16a8:	28 17       	cp	r18, r24
    16aa:	39 07       	cpc	r19, r25
    16ac:	2c f4       	brge	.+10     	; 0x16b8 <Solve_3_ways+0x3a2>
            {
                rotate_left();
    16ae:	0e 94 0c 12 	call	0x2418	; 0x2418 <rotate_left>
                forward();
    16b2:	0e 94 9e 12 	call	0x253c	; 0x253c <forward>
    16b6:	3f c6       	rjmp	.+3198   	; 0x2336 <Solve_3_ways+0x1020>
            }
            else if ((Blocking_V_Walls[x_cor - 1][y_cor] + Blocking_H_Walls[x_cor - 1][y_cor]) > (Blocking_V_Walls[x_cor + 1][y_cor + 1] + Blocking_H_Walls[x_cor][y_cor + 2]))
    16b8:	82 17       	cp	r24, r18
    16ba:	93 07       	cpc	r25, r19
    16bc:	1c f4       	brge	.+6      	; 0x16c4 <Solve_3_ways+0x3ae>
            {
                forward();
    16be:	0e 94 9e 12 	call	0x253c	; 0x253c <forward>
    16c2:	39 c6       	rjmp	.+3186   	; 0x2336 <Solve_3_ways+0x1020>
            }
            else
            {

                rotate_left();
    16c4:	0e 94 0c 12 	call	0x2418	; 0x2418 <rotate_left>
                forward();
    16c8:	0e 94 9e 12 	call	0x253c	; 0x253c <forward>
    16cc:	34 c6       	rjmp	.+3176   	; 0x2336 <Solve_3_ways+0x1020>
            }
        }
    }
    else if (face == south)
    16ce:	22 30       	cpi	r18, 0x02	; 2
    16d0:	09 f0       	breq	.+2      	; 0x16d4 <Solve_3_ways+0x3be>
    16d2:	85 c0       	rjmp	.+266    	; 0x17de <Solve_3_ways+0x4c8>
    {
        if (trail[x_cor + 1][y_cor] == trail[x_cor - 1][y_cor])
    16d4:	fe 01       	movw	r30, r28
    16d6:	e2 95       	swap	r30
    16d8:	f2 95       	swap	r31
    16da:	f0 7f       	andi	r31, 0xF0	; 240
    16dc:	fe 27       	eor	r31, r30
    16de:	e0 7f       	andi	r30, 0xF0	; 240
    16e0:	fe 27       	eor	r31, r30
    16e2:	e3 5b       	subi	r30, 0xB3	; 179
    16e4:	fa 4f       	sbci	r31, 0xFA	; 250
    16e6:	e8 0f       	add	r30, r24
    16e8:	f9 1f       	adc	r31, r25
    16ea:	30 81       	ld	r19, Z
    16ec:	f8 01       	movw	r30, r16
    16ee:	e2 95       	swap	r30
    16f0:	f2 95       	swap	r31
    16f2:	f0 7f       	andi	r31, 0xF0	; 240
    16f4:	fe 27       	eor	r31, r30
    16f6:	e0 7f       	andi	r30, 0xF0	; 240
    16f8:	fe 27       	eor	r31, r30
    16fa:	e3 5b       	subi	r30, 0xB3	; 179
    16fc:	fa 4f       	sbci	r31, 0xFA	; 250
    16fe:	e8 0f       	add	r30, r24
    1700:	f9 1f       	adc	r31, r25
    1702:	20 81       	ld	r18, Z
    1704:	32 13       	cpse	r19, r18
    1706:	5c c0       	rjmp	.+184    	; 0x17c0 <Solve_3_ways+0x4aa>
        {
            if (((x_cor + 1) + (y_cor)) < ((x_cor - 1) + (y_cor)))
    1708:	bc 01       	movw	r22, r24
    170a:	6c 0f       	add	r22, r28
    170c:	7d 1f       	adc	r23, r29
    170e:	9c 01       	movw	r18, r24
    1710:	20 0f       	add	r18, r16
    1712:	31 1f       	adc	r19, r17
    1714:	62 17       	cp	r22, r18
    1716:	73 07       	cpc	r23, r19
    1718:	2c f4       	brge	.+10     	; 0x1724 <Solve_3_ways+0x40e>
            {
                rotate_left();
    171a:	0e 94 0c 12 	call	0x2418	; 0x2418 <rotate_left>
                forward();
    171e:	0e 94 9e 12 	call	0x253c	; 0x253c <forward>
    1722:	09 c6       	rjmp	.+3090   	; 0x2336 <Solve_3_ways+0x1020>
            }
            else if (((x_cor + 1) + (y_cor)) > ((x_cor - 1) + (y_cor)))
    1724:	26 17       	cp	r18, r22
    1726:	37 07       	cpc	r19, r23
    1728:	2c f4       	brge	.+10     	; 0x1734 <Solve_3_ways+0x41e>
            {
                rotate_right();
    172a:	0e 94 55 12 	call	0x24aa	; 0x24aa <rotate_right>
                forward();
    172e:	0e 94 9e 12 	call	0x253c	; 0x253c <forward>
    1732:	01 c6       	rjmp	.+3074   	; 0x2336 <Solve_3_ways+0x1020>
            }
            else
            {

                if ((Blocking_V_Walls[x_cor + 2][y_cor] + Blocking_H_Walls[x_cor + 1][y_cor]) < (Blocking_V_Walls[x_cor - 1][y_cor] + Blocking_H_Walls[x_cor - 1][y_cor]))
    1734:	fa 01       	movw	r30, r20
    1736:	32 96       	adiw	r30, 0x02	; 2
    1738:	e2 95       	swap	r30
    173a:	f2 95       	swap	r31
    173c:	f0 7f       	andi	r31, 0xF0	; 240
    173e:	fe 27       	eor	r31, r30
    1740:	e0 7f       	andi	r30, 0xF0	; 240
    1742:	fe 27       	eor	r31, r30
    1744:	e2 5e       	subi	r30, 0xE2	; 226
    1746:	fd 4f       	sbci	r31, 0xFD	; 253
    1748:	e8 0f       	add	r30, r24
    174a:	f9 1f       	adc	r31, r25
    174c:	40 81       	ld	r20, Z
    174e:	61 e1       	ldi	r22, 0x11	; 17
    1750:	6c 9f       	mul	r22, r28
    1752:	f0 01       	movw	r30, r0
    1754:	6d 9f       	mul	r22, r29
    1756:	f0 0d       	add	r31, r0
    1758:	11 24       	eor	r1, r1
    175a:	e2 5f       	subi	r30, 0xF2	; 242
    175c:	fe 4f       	sbci	r31, 0xFE	; 254
    175e:	e8 0f       	add	r30, r24
    1760:	f9 1f       	adc	r31, r25
    1762:	20 81       	ld	r18, Z
    1764:	30 e0       	ldi	r19, 0x00	; 0
    1766:	24 0f       	add	r18, r20
    1768:	31 1d       	adc	r19, r1
    176a:	f8 01       	movw	r30, r16
    176c:	e2 95       	swap	r30
    176e:	f2 95       	swap	r31
    1770:	f0 7f       	andi	r31, 0xF0	; 240
    1772:	fe 27       	eor	r31, r30
    1774:	e0 7f       	andi	r30, 0xF0	; 240
    1776:	fe 27       	eor	r31, r30
    1778:	e2 5e       	subi	r30, 0xE2	; 226
    177a:	fd 4f       	sbci	r31, 0xFD	; 253
    177c:	e8 0f       	add	r30, r24
    177e:	f9 1f       	adc	r31, r25
    1780:	70 81       	ld	r23, Z
    1782:	60 9f       	mul	r22, r16
    1784:	a0 01       	movw	r20, r0
    1786:	61 9f       	mul	r22, r17
    1788:	50 0d       	add	r21, r0
    178a:	11 24       	eor	r1, r1
    178c:	42 5f       	subi	r20, 0xF2	; 242
    178e:	5e 4f       	sbci	r21, 0xFE	; 254
    1790:	fa 01       	movw	r30, r20
    1792:	e8 0f       	add	r30, r24
    1794:	f9 1f       	adc	r31, r25
    1796:	80 81       	ld	r24, Z
    1798:	90 e0       	ldi	r25, 0x00	; 0
    179a:	87 0f       	add	r24, r23
    179c:	91 1d       	adc	r25, r1
    179e:	28 17       	cp	r18, r24
    17a0:	39 07       	cpc	r19, r25
    17a2:	2c f4       	brge	.+10     	; 0x17ae <Solve_3_ways+0x498>
                {
                    rotate_left();
    17a4:	0e 94 0c 12 	call	0x2418	; 0x2418 <rotate_left>
                    forward();
    17a8:	0e 94 9e 12 	call	0x253c	; 0x253c <forward>
    17ac:	c4 c5       	rjmp	.+2952   	; 0x2336 <Solve_3_ways+0x1020>
                }
                else if ((Blocking_V_Walls[x_cor + 2][y_cor] + Blocking_H_Walls[x_cor + 1][y_cor]) > (Blocking_V_Walls[x_cor - 1][y_cor] + Blocking_H_Walls[x_cor - 1][y_cor]))
    17ae:	82 17       	cp	r24, r18
    17b0:	93 07       	cpc	r25, r19
    17b2:	0c f0       	brlt	.+2      	; 0x17b6 <Solve_3_ways+0x4a0>
    17b4:	c0 c5       	rjmp	.+2944   	; 0x2336 <Solve_3_ways+0x1020>
                {
                    rotate_right();
    17b6:	0e 94 55 12 	call	0x24aa	; 0x24aa <rotate_right>
                    forward();
    17ba:	0e 94 9e 12 	call	0x253c	; 0x253c <forward>
    17be:	bb c5       	rjmp	.+2934   	; 0x2336 <Solve_3_ways+0x1020>
                }
            }
        }
        else if (trail[x_cor + 1][y_cor] < trail[x_cor - 1][y_cor]) // moved in the right cell before?
    17c0:	32 17       	cp	r19, r18
    17c2:	28 f4       	brcc	.+10     	; 0x17ce <Solve_3_ways+0x4b8>
        {
            rotate_left();
    17c4:	0e 94 0c 12 	call	0x2418	; 0x2418 <rotate_left>
            forward();
    17c8:	0e 94 9e 12 	call	0x253c	; 0x253c <forward>
    17cc:	b4 c5       	rjmp	.+2920   	; 0x2336 <Solve_3_ways+0x1020>
        }
        else if (trail[x_cor + 1][y_cor] > trail[x_cor - 1][y_cor]) // moved in the leading cell before?
    17ce:	23 17       	cp	r18, r19
    17d0:	08 f0       	brcs	.+2      	; 0x17d4 <Solve_3_ways+0x4be>
    17d2:	b1 c5       	rjmp	.+2914   	; 0x2336 <Solve_3_ways+0x1020>
        {
            rotate_right();
    17d4:	0e 94 55 12 	call	0x24aa	; 0x24aa <rotate_right>
            forward();
    17d8:	0e 94 9e 12 	call	0x253c	; 0x253c <forward>
    17dc:	ac c5       	rjmp	.+2904   	; 0x2336 <Solve_3_ways+0x1020>
        }
    }
    else if (face == east)
    17de:	21 30       	cpi	r18, 0x01	; 1
    17e0:	09 f0       	breq	.+2      	; 0x17e4 <Solve_3_ways+0x4ce>
    17e2:	7d c0       	rjmp	.+250    	; 0x18de <Solve_3_ways+0x5c8>
    {
        if (trail[x_cor][y_cor + 1] == trail[x_cor][y_cor - 1])
    17e4:	ca 01       	movw	r24, r20
    17e6:	82 95       	swap	r24
    17e8:	92 95       	swap	r25
    17ea:	90 7f       	andi	r25, 0xF0	; 240
    17ec:	98 27       	eor	r25, r24
    17ee:	80 7f       	andi	r24, 0xF0	; 240
    17f0:	98 27       	eor	r25, r24
    17f2:	83 5b       	subi	r24, 0xB3	; 179
    17f4:	9a 4f       	sbci	r25, 0xFA	; 250
    17f6:	fc 01       	movw	r30, r24
    17f8:	ea 0f       	add	r30, r26
    17fa:	fb 1f       	adc	r31, r27
    17fc:	20 81       	ld	r18, Z
    17fe:	fc 01       	movw	r30, r24
    1800:	e6 0f       	add	r30, r22
    1802:	f7 1f       	adc	r31, r23
    1804:	80 81       	ld	r24, Z
    1806:	28 13       	cpse	r18, r24
    1808:	5b c0       	rjmp	.+182    	; 0x18c0 <Solve_3_ways+0x5aa>
        {
            if (((x_cor) + (y_cor + 1)) < ((x_cor) + (y_cor - 1)))
    180a:	a4 0f       	add	r26, r20
    180c:	b5 1f       	adc	r27, r21
    180e:	46 0f       	add	r20, r22
    1810:	57 1f       	adc	r21, r23
    1812:	a4 17       	cp	r26, r20
    1814:	b5 07       	cpc	r27, r21
    1816:	24 f4       	brge	.+8      	; 0x1820 <Solve_3_ways+0x50a>
            {
                rotate_left();
    1818:	0e 94 0c 12 	call	0x2418	; 0x2418 <rotate_left>
                forward();
    181c:	0e 94 9e 12 	call	0x253c	; 0x253c <forward>
            }
            if (((x_cor) + (y_cor + 1)) > ((x_cor) + (y_cor - 1)))
    1820:	20 91 4d 06 	lds	r18, 0x064D	; 0x80064d <x_cor>
    1824:	30 e0       	ldi	r19, 0x00	; 0
    1826:	80 91 48 03 	lds	r24, 0x0348	; 0x800348 <y_cor>
    182a:	90 e0       	ldi	r25, 0x00	; 0
    182c:	dc 01       	movw	r26, r24
    182e:	11 96       	adiw	r26, 0x01	; 1
    1830:	b9 01       	movw	r22, r18
    1832:	6a 0f       	add	r22, r26
    1834:	7b 1f       	adc	r23, r27
    1836:	01 97       	sbiw	r24, 0x01	; 1
    1838:	a9 01       	movw	r20, r18
    183a:	48 0f       	add	r20, r24
    183c:	59 1f       	adc	r21, r25
    183e:	46 17       	cp	r20, r22
    1840:	57 07       	cpc	r21, r23
    1842:	2c f4       	brge	.+10     	; 0x184e <Solve_3_ways+0x538>
            {
                rotate_right();
    1844:	0e 94 55 12 	call	0x24aa	; 0x24aa <rotate_right>
                forward();
    1848:	0e 94 9e 12 	call	0x253c	; 0x253c <forward>
    184c:	74 c5       	rjmp	.+2792   	; 0x2336 <Solve_3_ways+0x1020>
            }
            else
            {
                if ((Blocking_V_Walls[x_cor][y_cor + 1] + Blocking_H_Walls[x_cor][y_cor + 1]) < (Blocking_V_Walls[x_cor][y_cor - 1] + Blocking_H_Walls[x_cor][y_cor - 1]))
    184e:	f9 01       	movw	r30, r18
    1850:	e2 95       	swap	r30
    1852:	f2 95       	swap	r31
    1854:	f0 7f       	andi	r31, 0xF0	; 240
    1856:	fe 27       	eor	r31, r30
    1858:	e0 7f       	andi	r30, 0xF0	; 240
    185a:	fe 27       	eor	r31, r30
    185c:	bf 01       	movw	r22, r30
    185e:	62 5e       	subi	r22, 0xE2	; 226
    1860:	7d 4f       	sbci	r23, 0xFD	; 253
    1862:	fb 01       	movw	r30, r22
    1864:	ea 0f       	add	r30, r26
    1866:	fb 1f       	adc	r31, r27
    1868:	c0 81       	ld	r28, Z
    186a:	e1 e1       	ldi	r30, 0x11	; 17
    186c:	e2 9f       	mul	r30, r18
    186e:	a0 01       	movw	r20, r0
    1870:	e3 9f       	mul	r30, r19
    1872:	50 0d       	add	r21, r0
    1874:	11 24       	eor	r1, r1
    1876:	42 5f       	subi	r20, 0xF2	; 242
    1878:	5e 4f       	sbci	r21, 0xFE	; 254
    187a:	fa 01       	movw	r30, r20
    187c:	ea 0f       	add	r30, r26
    187e:	fb 1f       	adc	r31, r27
    1880:	20 81       	ld	r18, Z
    1882:	30 e0       	ldi	r19, 0x00	; 0
    1884:	2c 0f       	add	r18, r28
    1886:	31 1d       	adc	r19, r1
    1888:	fb 01       	movw	r30, r22
    188a:	e8 0f       	add	r30, r24
    188c:	f9 1f       	adc	r31, r25
    188e:	60 81       	ld	r22, Z
    1890:	fa 01       	movw	r30, r20
    1892:	e8 0f       	add	r30, r24
    1894:	f9 1f       	adc	r31, r25
    1896:	80 81       	ld	r24, Z
    1898:	90 e0       	ldi	r25, 0x00	; 0
    189a:	86 0f       	add	r24, r22
    189c:	91 1d       	adc	r25, r1
    189e:	28 17       	cp	r18, r24
    18a0:	39 07       	cpc	r19, r25
    18a2:	2c f4       	brge	.+10     	; 0x18ae <Solve_3_ways+0x598>
                {
                    rotate_left();
    18a4:	0e 94 0c 12 	call	0x2418	; 0x2418 <rotate_left>
                    forward();
    18a8:	0e 94 9e 12 	call	0x253c	; 0x253c <forward>
    18ac:	44 c5       	rjmp	.+2696   	; 0x2336 <Solve_3_ways+0x1020>
                }
                else if ((Blocking_V_Walls[x_cor][y_cor + 1] + Blocking_H_Walls[x_cor][y_cor + 1]) > (Blocking_V_Walls[x_cor][y_cor - 1] + Blocking_H_Walls[x_cor][y_cor - 1]))
    18ae:	82 17       	cp	r24, r18
    18b0:	93 07       	cpc	r25, r19
    18b2:	0c f0       	brlt	.+2      	; 0x18b6 <Solve_3_ways+0x5a0>
    18b4:	40 c5       	rjmp	.+2688   	; 0x2336 <Solve_3_ways+0x1020>
                {
                    rotate_right();
    18b6:	0e 94 55 12 	call	0x24aa	; 0x24aa <rotate_right>
                    forward();
    18ba:	0e 94 9e 12 	call	0x253c	; 0x253c <forward>
    18be:	3b c5       	rjmp	.+2678   	; 0x2336 <Solve_3_ways+0x1020>
                }
            }
        }
        else if (trail[x_cor][y_cor + 1] < trail[x_cor][y_cor - 1]) // moved in the right cell before?
    18c0:	28 17       	cp	r18, r24
    18c2:	28 f4       	brcc	.+10     	; 0x18ce <Solve_3_ways+0x5b8>
        {
            rotate_left();
    18c4:	0e 94 0c 12 	call	0x2418	; 0x2418 <rotate_left>
            forward();
    18c8:	0e 94 9e 12 	call	0x253c	; 0x253c <forward>
    18cc:	34 c5       	rjmp	.+2664   	; 0x2336 <Solve_3_ways+0x1020>
        }
        else if (trail[x_cor][y_cor + 1] > trail[x_cor][y_cor - 1]) // moved in the leading cell before?
    18ce:	82 17       	cp	r24, r18
    18d0:	08 f0       	brcs	.+2      	; 0x18d4 <Solve_3_ways+0x5be>
    18d2:	31 c5       	rjmp	.+2658   	; 0x2336 <Solve_3_ways+0x1020>
        {
            rotate_right();
    18d4:	0e 94 55 12 	call	0x24aa	; 0x24aa <rotate_right>
            forward();
    18d8:	0e 94 9e 12 	call	0x253c	; 0x253c <forward>
    18dc:	2c c5       	rjmp	.+2648   	; 0x2336 <Solve_3_ways+0x1020>
        }
    }
    else if (face == west)
    18de:	23 30       	cpi	r18, 0x03	; 3
    18e0:	09 f0       	breq	.+2      	; 0x18e4 <Solve_3_ways+0x5ce>
    18e2:	7d c0       	rjmp	.+250    	; 0x19de <Solve_3_ways+0x6c8>
    {
        if (trail[x_cor][y_cor + 1] == trail[x_cor][y_cor - 1])
    18e4:	ca 01       	movw	r24, r20
    18e6:	82 95       	swap	r24
    18e8:	92 95       	swap	r25
    18ea:	90 7f       	andi	r25, 0xF0	; 240
    18ec:	98 27       	eor	r25, r24
    18ee:	80 7f       	andi	r24, 0xF0	; 240
    18f0:	98 27       	eor	r25, r24
    18f2:	83 5b       	subi	r24, 0xB3	; 179
    18f4:	9a 4f       	sbci	r25, 0xFA	; 250
    18f6:	fc 01       	movw	r30, r24
    18f8:	ea 0f       	add	r30, r26
    18fa:	fb 1f       	adc	r31, r27
    18fc:	20 81       	ld	r18, Z
    18fe:	fc 01       	movw	r30, r24
    1900:	e6 0f       	add	r30, r22
    1902:	f7 1f       	adc	r31, r23
    1904:	80 81       	ld	r24, Z
    1906:	28 13       	cpse	r18, r24
    1908:	5b c0       	rjmp	.+182    	; 0x19c0 <Solve_3_ways+0x6aa>
        {
            if (((x_cor) + (y_cor + 1)) < ((x_cor) + (y_cor - 1)))
    190a:	a4 0f       	add	r26, r20
    190c:	b5 1f       	adc	r27, r21
    190e:	46 0f       	add	r20, r22
    1910:	57 1f       	adc	r21, r23
    1912:	a4 17       	cp	r26, r20
    1914:	b5 07       	cpc	r27, r21
    1916:	24 f4       	brge	.+8      	; 0x1920 <Solve_3_ways+0x60a>
            {
                rotate_right();
    1918:	0e 94 55 12 	call	0x24aa	; 0x24aa <rotate_right>
                forward();
    191c:	0e 94 9e 12 	call	0x253c	; 0x253c <forward>
            }
            if (((x_cor) + (y_cor + 1)) > ((x_cor) + (y_cor - 1)))
    1920:	20 91 4d 06 	lds	r18, 0x064D	; 0x80064d <x_cor>
    1924:	30 e0       	ldi	r19, 0x00	; 0
    1926:	80 91 48 03 	lds	r24, 0x0348	; 0x800348 <y_cor>
    192a:	90 e0       	ldi	r25, 0x00	; 0
    192c:	dc 01       	movw	r26, r24
    192e:	11 96       	adiw	r26, 0x01	; 1
    1930:	b9 01       	movw	r22, r18
    1932:	6a 0f       	add	r22, r26
    1934:	7b 1f       	adc	r23, r27
    1936:	01 97       	sbiw	r24, 0x01	; 1
    1938:	a9 01       	movw	r20, r18
    193a:	48 0f       	add	r20, r24
    193c:	59 1f       	adc	r21, r25
    193e:	46 17       	cp	r20, r22
    1940:	57 07       	cpc	r21, r23
    1942:	2c f4       	brge	.+10     	; 0x194e <Solve_3_ways+0x638>
            {
                rotate_left();
    1944:	0e 94 0c 12 	call	0x2418	; 0x2418 <rotate_left>
                forward();
    1948:	0e 94 9e 12 	call	0x253c	; 0x253c <forward>
    194c:	f4 c4       	rjmp	.+2536   	; 0x2336 <Solve_3_ways+0x1020>
            }
            else
            {
                if ((Blocking_V_Walls[x_cor][y_cor + 1] + Blocking_H_Walls[x_cor][y_cor + 1]) < (Blocking_V_Walls[x_cor][y_cor - 1] + Blocking_H_Walls[x_cor][y_cor - 1]))
    194e:	f9 01       	movw	r30, r18
    1950:	e2 95       	swap	r30
    1952:	f2 95       	swap	r31
    1954:	f0 7f       	andi	r31, 0xF0	; 240
    1956:	fe 27       	eor	r31, r30
    1958:	e0 7f       	andi	r30, 0xF0	; 240
    195a:	fe 27       	eor	r31, r30
    195c:	bf 01       	movw	r22, r30
    195e:	62 5e       	subi	r22, 0xE2	; 226
    1960:	7d 4f       	sbci	r23, 0xFD	; 253
    1962:	fb 01       	movw	r30, r22
    1964:	ea 0f       	add	r30, r26
    1966:	fb 1f       	adc	r31, r27
    1968:	c0 81       	ld	r28, Z
    196a:	e1 e1       	ldi	r30, 0x11	; 17
    196c:	e2 9f       	mul	r30, r18
    196e:	a0 01       	movw	r20, r0
    1970:	e3 9f       	mul	r30, r19
    1972:	50 0d       	add	r21, r0
    1974:	11 24       	eor	r1, r1
    1976:	42 5f       	subi	r20, 0xF2	; 242
    1978:	5e 4f       	sbci	r21, 0xFE	; 254
    197a:	fa 01       	movw	r30, r20
    197c:	ea 0f       	add	r30, r26
    197e:	fb 1f       	adc	r31, r27
    1980:	20 81       	ld	r18, Z
    1982:	30 e0       	ldi	r19, 0x00	; 0
    1984:	2c 0f       	add	r18, r28
    1986:	31 1d       	adc	r19, r1
    1988:	fb 01       	movw	r30, r22
    198a:	e8 0f       	add	r30, r24
    198c:	f9 1f       	adc	r31, r25
    198e:	60 81       	ld	r22, Z
    1990:	fa 01       	movw	r30, r20
    1992:	e8 0f       	add	r30, r24
    1994:	f9 1f       	adc	r31, r25
    1996:	80 81       	ld	r24, Z
    1998:	90 e0       	ldi	r25, 0x00	; 0
    199a:	86 0f       	add	r24, r22
    199c:	91 1d       	adc	r25, r1
    199e:	28 17       	cp	r18, r24
    19a0:	39 07       	cpc	r19, r25
    19a2:	2c f4       	brge	.+10     	; 0x19ae <Solve_3_ways+0x698>
                {
                    rotate_right();
    19a4:	0e 94 55 12 	call	0x24aa	; 0x24aa <rotate_right>
                    forward();
    19a8:	0e 94 9e 12 	call	0x253c	; 0x253c <forward>
    19ac:	c4 c4       	rjmp	.+2440   	; 0x2336 <Solve_3_ways+0x1020>
                }
                else if ((Blocking_V_Walls[x_cor][y_cor + 1] + Blocking_H_Walls[x_cor][y_cor + 1]) > (Blocking_V_Walls[x_cor][y_cor - 1] + Blocking_H_Walls[x_cor][y_cor - 1]))
    19ae:	82 17       	cp	r24, r18
    19b0:	93 07       	cpc	r25, r19
    19b2:	0c f0       	brlt	.+2      	; 0x19b6 <Solve_3_ways+0x6a0>
    19b4:	c0 c4       	rjmp	.+2432   	; 0x2336 <Solve_3_ways+0x1020>
                {
                    rotate_left();
    19b6:	0e 94 0c 12 	call	0x2418	; 0x2418 <rotate_left>
                    forward();
    19ba:	0e 94 9e 12 	call	0x253c	; 0x253c <forward>
    19be:	bb c4       	rjmp	.+2422   	; 0x2336 <Solve_3_ways+0x1020>
                }
            }
        }
        else if (trail[x_cor][y_cor + 1] < trail[x_cor][y_cor - 1]) // moved in the right cell before?
    19c0:	28 17       	cp	r18, r24
    19c2:	28 f4       	brcc	.+10     	; 0x19ce <Solve_3_ways+0x6b8>
        {
            rotate_right();
    19c4:	0e 94 55 12 	call	0x24aa	; 0x24aa <rotate_right>
            forward();
    19c8:	0e 94 9e 12 	call	0x253c	; 0x253c <forward>
    19cc:	b4 c4       	rjmp	.+2408   	; 0x2336 <Solve_3_ways+0x1020>
        }
        else if (trail[x_cor][y_cor + 1] > trail[x_cor][y_cor - 1]) // moved in the leading cell before?
    19ce:	82 17       	cp	r24, r18
    19d0:	08 f0       	brcs	.+2      	; 0x19d4 <Solve_3_ways+0x6be>
    19d2:	b1 c4       	rjmp	.+2402   	; 0x2336 <Solve_3_ways+0x1020>
        {
            rotate_left();
    19d4:	0e 94 0c 12 	call	0x2418	; 0x2418 <rotate_left>
            forward();
    19d8:	0e 94 9e 12 	call	0x253c	; 0x253c <forward>
    19dc:	ac c4       	rjmp	.+2392   	; 0x2336 <Solve_3_ways+0x1020>
        }
    }
    else if (way_left)
    19de:	30 91 4c 04 	lds	r19, 0x044C	; 0x80044c <way_left>
    19e2:	33 23       	and	r19, r19
    19e4:	09 f4       	brne	.+2      	; 0x19e8 <Solve_3_ways+0x6d2>
    19e6:	48 c2       	rjmp	.+1168   	; 0x1e78 <Solve_3_ways+0xb62>
    {
        if (face == north)
    19e8:	21 11       	cpse	r18, r1
    19ea:	91 c0       	rjmp	.+290    	; 0x1b0e <Solve_3_ways+0x7f8>
        {
            if (trail[x_cor][y_cor + 1] == trail[x_cor + 1][y_cor])
    19ec:	fa 01       	movw	r30, r20
    19ee:	e2 95       	swap	r30
    19f0:	f2 95       	swap	r31
    19f2:	f0 7f       	andi	r31, 0xF0	; 240
    19f4:	fe 27       	eor	r31, r30
    19f6:	e0 7f       	andi	r30, 0xF0	; 240
    19f8:	fe 27       	eor	r31, r30
    19fa:	e3 5b       	subi	r30, 0xB3	; 179
    19fc:	fa 4f       	sbci	r31, 0xFA	; 250
    19fe:	ea 0f       	add	r30, r26
    1a00:	fb 1f       	adc	r31, r27
    1a02:	30 81       	ld	r19, Z
    1a04:	fe 01       	movw	r30, r28
    1a06:	e2 95       	swap	r30
    1a08:	f2 95       	swap	r31
    1a0a:	f0 7f       	andi	r31, 0xF0	; 240
    1a0c:	fe 27       	eor	r31, r30
    1a0e:	e0 7f       	andi	r30, 0xF0	; 240
    1a10:	fe 27       	eor	r31, r30
    1a12:	e3 5b       	subi	r30, 0xB3	; 179
    1a14:	fa 4f       	sbci	r31, 0xFA	; 250
    1a16:	e8 0f       	add	r30, r24
    1a18:	f9 1f       	adc	r31, r25
    1a1a:	20 81       	ld	r18, Z
    1a1c:	32 13       	cpse	r19, r18
    1a1e:	6a c0       	rjmp	.+212    	; 0x1af4 <Solve_3_ways+0x7de>
            {
                if (((x_cor) + (y_cor + 1)) < ((x_cor + 1) + (y_cor)))
    1a20:	4a 0f       	add	r20, r26
    1a22:	5b 1f       	adc	r21, r27
    1a24:	8c 0f       	add	r24, r28
    1a26:	9d 1f       	adc	r25, r29
    1a28:	48 17       	cp	r20, r24
    1a2a:	59 07       	cpc	r21, r25
    1a2c:	14 f4       	brge	.+4      	; 0x1a32 <Solve_3_ways+0x71c>
                {
                    forward();
    1a2e:	0e 94 9e 12 	call	0x253c	; 0x253c <forward>
                }
                if (((x_cor) + (y_cor + 1)) > ((x_cor + 1) + (y_cor)))
    1a32:	e0 91 4d 06 	lds	r30, 0x064D	; 0x80064d <x_cor>
    1a36:	f0 e0       	ldi	r31, 0x00	; 0
    1a38:	80 91 48 03 	lds	r24, 0x0348	; 0x800348 <y_cor>
    1a3c:	90 e0       	ldi	r25, 0x00	; 0
    1a3e:	9c 01       	movw	r18, r24
    1a40:	2f 5f       	subi	r18, 0xFF	; 255
    1a42:	3f 4f       	sbci	r19, 0xFF	; 255
    1a44:	df 01       	movw	r26, r30
    1a46:	a2 0f       	add	r26, r18
    1a48:	b3 1f       	adc	r27, r19
    1a4a:	bf 01       	movw	r22, r30
    1a4c:	6f 5f       	subi	r22, 0xFF	; 255
    1a4e:	7f 4f       	sbci	r23, 0xFF	; 255
    1a50:	ac 01       	movw	r20, r24
    1a52:	46 0f       	add	r20, r22
    1a54:	57 1f       	adc	r21, r23
    1a56:	4a 17       	cp	r20, r26
    1a58:	5b 07       	cpc	r21, r27
    1a5a:	2c f4       	brge	.+10     	; 0x1a66 <Solve_3_ways+0x750>
                {
                    rotate_right();
    1a5c:	0e 94 55 12 	call	0x24aa	; 0x24aa <rotate_right>
                    forward();
    1a60:	0e 94 9e 12 	call	0x253c	; 0x253c <forward>
    1a64:	68 c4       	rjmp	.+2256   	; 0x2336 <Solve_3_ways+0x1020>
                }
                else
                {
                    if ((Blocking_V_Walls[x_cor][y_cor + 1] + Blocking_H_Walls[x_cor][y_cor + 2]) < (Blocking_V_Walls[x_cor + 2][y_cor] + Blocking_H_Walls[x_cor + 1][y_cor]))
    1a66:	af 01       	movw	r20, r30
    1a68:	42 95       	swap	r20
    1a6a:	52 95       	swap	r21
    1a6c:	50 7f       	andi	r21, 0xF0	; 240
    1a6e:	54 27       	eor	r21, r20
    1a70:	40 7f       	andi	r20, 0xF0	; 240
    1a72:	54 27       	eor	r21, r20
    1a74:	42 5e       	subi	r20, 0xE2	; 226
    1a76:	5d 4f       	sbci	r21, 0xFD	; 253
    1a78:	da 01       	movw	r26, r20
    1a7a:	a2 0f       	add	r26, r18
    1a7c:	b3 1f       	adc	r27, r19
    1a7e:	4c 91       	ld	r20, X
    1a80:	9c 01       	movw	r18, r24
    1a82:	2e 5f       	subi	r18, 0xFE	; 254
    1a84:	3f 4f       	sbci	r19, 0xFF	; 255
    1a86:	c1 e1       	ldi	r28, 0x11	; 17
    1a88:	ce 9f       	mul	r28, r30
    1a8a:	d0 01       	movw	r26, r0
    1a8c:	cf 9f       	mul	r28, r31
    1a8e:	b0 0d       	add	r27, r0
    1a90:	11 24       	eor	r1, r1
    1a92:	a2 5f       	subi	r26, 0xF2	; 242
    1a94:	be 4f       	sbci	r27, 0xFE	; 254
    1a96:	a2 0f       	add	r26, r18
    1a98:	b3 1f       	adc	r27, r19
    1a9a:	2c 91       	ld	r18, X
    1a9c:	30 e0       	ldi	r19, 0x00	; 0
    1a9e:	24 0f       	add	r18, r20
    1aa0:	31 1d       	adc	r19, r1
    1aa2:	32 96       	adiw	r30, 0x02	; 2
    1aa4:	e2 95       	swap	r30
    1aa6:	f2 95       	swap	r31
    1aa8:	f0 7f       	andi	r31, 0xF0	; 240
    1aaa:	fe 27       	eor	r31, r30
    1aac:	e0 7f       	andi	r30, 0xF0	; 240
    1aae:	fe 27       	eor	r31, r30
    1ab0:	e2 5e       	subi	r30, 0xE2	; 226
    1ab2:	fd 4f       	sbci	r31, 0xFD	; 253
    1ab4:	e8 0f       	add	r30, r24
    1ab6:	f9 1f       	adc	r31, r25
    1ab8:	e0 81       	ld	r30, Z
    1aba:	c6 9f       	mul	r28, r22
    1abc:	a0 01       	movw	r20, r0
    1abe:	c7 9f       	mul	r28, r23
    1ac0:	50 0d       	add	r21, r0
    1ac2:	11 24       	eor	r1, r1
    1ac4:	42 5f       	subi	r20, 0xF2	; 242
    1ac6:	5e 4f       	sbci	r21, 0xFE	; 254
    1ac8:	da 01       	movw	r26, r20
    1aca:	a8 0f       	add	r26, r24
    1acc:	b9 1f       	adc	r27, r25
    1ace:	8c 91       	ld	r24, X
    1ad0:	90 e0       	ldi	r25, 0x00	; 0
    1ad2:	8e 0f       	add	r24, r30
    1ad4:	91 1d       	adc	r25, r1
    1ad6:	28 17       	cp	r18, r24
    1ad8:	39 07       	cpc	r19, r25
    1ada:	1c f4       	brge	.+6      	; 0x1ae2 <Solve_3_ways+0x7cc>
                    {
                        forward();
    1adc:	0e 94 9e 12 	call	0x253c	; 0x253c <forward>
    1ae0:	2a c4       	rjmp	.+2132   	; 0x2336 <Solve_3_ways+0x1020>
                    }
                    else if ((Blocking_V_Walls[x_cor][y_cor + 1] + Blocking_H_Walls[x_cor][y_cor + 2]) > (Blocking_V_Walls[x_cor + 2][y_cor] + Blocking_H_Walls[x_cor + 1][y_cor]))
    1ae2:	82 17       	cp	r24, r18
    1ae4:	93 07       	cpc	r25, r19
    1ae6:	0c f0       	brlt	.+2      	; 0x1aea <Solve_3_ways+0x7d4>
    1ae8:	26 c4       	rjmp	.+2124   	; 0x2336 <Solve_3_ways+0x1020>
                    {
                        rotate_right();
    1aea:	0e 94 55 12 	call	0x24aa	; 0x24aa <rotate_right>
                        forward();
    1aee:	0e 94 9e 12 	call	0x253c	; 0x253c <forward>
    1af2:	21 c4       	rjmp	.+2114   	; 0x2336 <Solve_3_ways+0x1020>
                    }
                }
            }
            else if (trail[x_cor][y_cor + 1] < trail[x_cor + 1][y_cor]) // moved in the right cell before?
    1af4:	32 17       	cp	r19, r18
    1af6:	18 f4       	brcc	.+6      	; 0x1afe <Solve_3_ways+0x7e8>
            {
                forward();
    1af8:	0e 94 9e 12 	call	0x253c	; 0x253c <forward>
    1afc:	1c c4       	rjmp	.+2104   	; 0x2336 <Solve_3_ways+0x1020>
            }
            else if (trail[x_cor][y_cor + 1] > trail[x_cor + 1][y_cor]) // moved in the leading cell before?
    1afe:	23 17       	cp	r18, r19
    1b00:	08 f0       	brcs	.+2      	; 0x1b04 <Solve_3_ways+0x7ee>
    1b02:	19 c4       	rjmp	.+2098   	; 0x2336 <Solve_3_ways+0x1020>
            {
                rotate_right();
    1b04:	0e 94 55 12 	call	0x24aa	; 0x24aa <rotate_right>
                forward();
    1b08:	0e 94 9e 12 	call	0x253c	; 0x253c <forward>
    1b0c:	14 c4       	rjmp	.+2088   	; 0x2336 <Solve_3_ways+0x1020>
            }
        }
        else if (face == south)
    1b0e:	22 30       	cpi	r18, 0x02	; 2
    1b10:	09 f0       	breq	.+2      	; 0x1b14 <Solve_3_ways+0x7fe>
    1b12:	8e c0       	rjmp	.+284    	; 0x1c30 <Solve_3_ways+0x91a>
        {
            if (trail[x_cor - 1][y_cor] == trail[x_cor][y_cor - 1])
    1b14:	f8 01       	movw	r30, r16
    1b16:	e2 95       	swap	r30
    1b18:	f2 95       	swap	r31
    1b1a:	f0 7f       	andi	r31, 0xF0	; 240
    1b1c:	fe 27       	eor	r31, r30
    1b1e:	e0 7f       	andi	r30, 0xF0	; 240
    1b20:	fe 27       	eor	r31, r30
    1b22:	e3 5b       	subi	r30, 0xB3	; 179
    1b24:	fa 4f       	sbci	r31, 0xFA	; 250
    1b26:	e8 0f       	add	r30, r24
    1b28:	f9 1f       	adc	r31, r25
    1b2a:	30 81       	ld	r19, Z
    1b2c:	fa 01       	movw	r30, r20
    1b2e:	e2 95       	swap	r30
    1b30:	f2 95       	swap	r31
    1b32:	f0 7f       	andi	r31, 0xF0	; 240
    1b34:	fe 27       	eor	r31, r30
    1b36:	e0 7f       	andi	r30, 0xF0	; 240
    1b38:	fe 27       	eor	r31, r30
    1b3a:	e3 5b       	subi	r30, 0xB3	; 179
    1b3c:	fa 4f       	sbci	r31, 0xFA	; 250
    1b3e:	e6 0f       	add	r30, r22
    1b40:	f7 1f       	adc	r31, r23
    1b42:	20 81       	ld	r18, Z
    1b44:	32 13       	cpse	r19, r18
    1b46:	67 c0       	rjmp	.+206    	; 0x1c16 <Solve_3_ways+0x900>
            {
                if (((x_cor - 1) + (y_cor)) < ((x_cor) + (y_cor - 1)))
    1b48:	80 0f       	add	r24, r16
    1b4a:	91 1f       	adc	r25, r17
    1b4c:	46 0f       	add	r20, r22
    1b4e:	57 1f       	adc	r21, r23
    1b50:	84 17       	cp	r24, r20
    1b52:	95 07       	cpc	r25, r21
    1b54:	14 f4       	brge	.+4      	; 0x1b5a <Solve_3_ways+0x844>
                {
                    forward();
    1b56:	0e 94 9e 12 	call	0x253c	; 0x253c <forward>
                }
                if (((x_cor - 1) + (y_cor)) > ((x_cor) + (y_cor - 1)))
    1b5a:	20 91 4d 06 	lds	r18, 0x064D	; 0x80064d <x_cor>
    1b5e:	30 e0       	ldi	r19, 0x00	; 0
    1b60:	b9 01       	movw	r22, r18
    1b62:	61 50       	subi	r22, 0x01	; 1
    1b64:	71 09       	sbc	r23, r1
    1b66:	80 91 48 03 	lds	r24, 0x0348	; 0x800348 <y_cor>
    1b6a:	90 e0       	ldi	r25, 0x00	; 0
    1b6c:	db 01       	movw	r26, r22
    1b6e:	a8 0f       	add	r26, r24
    1b70:	b9 1f       	adc	r27, r25
    1b72:	ac 01       	movw	r20, r24
    1b74:	41 50       	subi	r20, 0x01	; 1
    1b76:	51 09       	sbc	r21, r1
    1b78:	f9 01       	movw	r30, r18
    1b7a:	e4 0f       	add	r30, r20
    1b7c:	f5 1f       	adc	r31, r21
    1b7e:	ea 17       	cp	r30, r26
    1b80:	fb 07       	cpc	r31, r27
    1b82:	2c f4       	brge	.+10     	; 0x1b8e <Solve_3_ways+0x878>
                {
                    rotate_right();
    1b84:	0e 94 55 12 	call	0x24aa	; 0x24aa <rotate_right>
                    forward();
    1b88:	0e 94 9e 12 	call	0x253c	; 0x253c <forward>
    1b8c:	d4 c3       	rjmp	.+1960   	; 0x2336 <Solve_3_ways+0x1020>
                }
                else
                {
                    if ((Blocking_V_Walls[x_cor - 1][y_cor] + Blocking_H_Walls[x_cor - 1][y_cor]) < (Blocking_V_Walls[x_cor][y_cor - 1] + Blocking_H_Walls[x_cor][y_cor - 1]))
    1b8e:	db 01       	movw	r26, r22
    1b90:	a2 95       	swap	r26
    1b92:	b2 95       	swap	r27
    1b94:	b0 7f       	andi	r27, 0xF0	; 240
    1b96:	ba 27       	eor	r27, r26
    1b98:	a0 7f       	andi	r26, 0xF0	; 240
    1b9a:	ba 27       	eor	r27, r26
    1b9c:	a2 5e       	subi	r26, 0xE2	; 226
    1b9e:	bd 4f       	sbci	r27, 0xFD	; 253
    1ba0:	a8 0f       	add	r26, r24
    1ba2:	b9 1f       	adc	r27, r25
    1ba4:	ac 91       	ld	r26, X
    1ba6:	c1 e1       	ldi	r28, 0x11	; 17
    1ba8:	c6 9f       	mul	r28, r22
    1baa:	f0 01       	movw	r30, r0
    1bac:	c7 9f       	mul	r28, r23
    1bae:	f0 0d       	add	r31, r0
    1bb0:	11 24       	eor	r1, r1
    1bb2:	bf 01       	movw	r22, r30
    1bb4:	62 5f       	subi	r22, 0xF2	; 242
    1bb6:	7e 4f       	sbci	r23, 0xFE	; 254
    1bb8:	fb 01       	movw	r30, r22
    1bba:	e8 0f       	add	r30, r24
    1bbc:	f9 1f       	adc	r31, r25
    1bbe:	60 81       	ld	r22, Z
    1bc0:	70 e0       	ldi	r23, 0x00	; 0
    1bc2:	6a 0f       	add	r22, r26
    1bc4:	71 1d       	adc	r23, r1
    1bc6:	d9 01       	movw	r26, r18
    1bc8:	a2 95       	swap	r26
    1bca:	b2 95       	swap	r27
    1bcc:	b0 7f       	andi	r27, 0xF0	; 240
    1bce:	ba 27       	eor	r27, r26
    1bd0:	a0 7f       	andi	r26, 0xF0	; 240
    1bd2:	ba 27       	eor	r27, r26
    1bd4:	a2 5e       	subi	r26, 0xE2	; 226
    1bd6:	bd 4f       	sbci	r27, 0xFD	; 253
    1bd8:	a4 0f       	add	r26, r20
    1bda:	b5 1f       	adc	r27, r21
    1bdc:	ac 91       	ld	r26, X
    1bde:	c2 9f       	mul	r28, r18
    1be0:	f0 01       	movw	r30, r0
    1be2:	c3 9f       	mul	r28, r19
    1be4:	f0 0d       	add	r31, r0
    1be6:	11 24       	eor	r1, r1
    1be8:	e2 5f       	subi	r30, 0xF2	; 242
    1bea:	fe 4f       	sbci	r31, 0xFE	; 254
    1bec:	e4 0f       	add	r30, r20
    1bee:	f5 1f       	adc	r31, r21
    1bf0:	80 81       	ld	r24, Z
    1bf2:	90 e0       	ldi	r25, 0x00	; 0
    1bf4:	8a 0f       	add	r24, r26
    1bf6:	91 1d       	adc	r25, r1
    1bf8:	68 17       	cp	r22, r24
    1bfa:	79 07       	cpc	r23, r25
    1bfc:	2c f4       	brge	.+10     	; 0x1c08 <Solve_3_ways+0x8f2>
                    {
                        rotate_right();
    1bfe:	0e 94 55 12 	call	0x24aa	; 0x24aa <rotate_right>
                        forward();
    1c02:	0e 94 9e 12 	call	0x253c	; 0x253c <forward>
    1c06:	97 c3       	rjmp	.+1838   	; 0x2336 <Solve_3_ways+0x1020>
                    }
                    else if ((Blocking_V_Walls[x_cor - 1][y_cor] + Blocking_H_Walls[x_cor - 1][y_cor]) > (Blocking_V_Walls[x_cor][y_cor - 1] + Blocking_H_Walls[x_cor][y_cor - 1]))
    1c08:	86 17       	cp	r24, r22
    1c0a:	97 07       	cpc	r25, r23
    1c0c:	0c f0       	brlt	.+2      	; 0x1c10 <Solve_3_ways+0x8fa>
    1c0e:	93 c3       	rjmp	.+1830   	; 0x2336 <Solve_3_ways+0x1020>
                    {
                        forward();
    1c10:	0e 94 9e 12 	call	0x253c	; 0x253c <forward>
    1c14:	90 c3       	rjmp	.+1824   	; 0x2336 <Solve_3_ways+0x1020>
                    }
                }
            }
            else if (trail[x_cor][y_cor - 1] < trail[x_cor - 1][y_cor]) // moved in the right cell before?
    1c16:	23 17       	cp	r18, r19
    1c18:	18 f4       	brcc	.+6      	; 0x1c20 <Solve_3_ways+0x90a>
            {
                forward();
    1c1a:	0e 94 9e 12 	call	0x253c	; 0x253c <forward>
    1c1e:	8b c3       	rjmp	.+1814   	; 0x2336 <Solve_3_ways+0x1020>
            }
            else if (trail[x_cor - 1][y_cor] < trail[x_cor][y_cor - 1]) // moved in the leading cell before?
    1c20:	32 17       	cp	r19, r18
    1c22:	08 f0       	brcs	.+2      	; 0x1c26 <Solve_3_ways+0x910>
    1c24:	88 c3       	rjmp	.+1808   	; 0x2336 <Solve_3_ways+0x1020>
            {
                rotate_right();
    1c26:	0e 94 55 12 	call	0x24aa	; 0x24aa <rotate_right>
                forward();
    1c2a:	0e 94 9e 12 	call	0x253c	; 0x253c <forward>
    1c2e:	83 c3       	rjmp	.+1798   	; 0x2336 <Solve_3_ways+0x1020>
            }
        }
        else if (face == east)
    1c30:	21 30       	cpi	r18, 0x01	; 1
    1c32:	09 f0       	breq	.+2      	; 0x1c36 <Solve_3_ways+0x920>
    1c34:	8e c0       	rjmp	.+284    	; 0x1d52 <Solve_3_ways+0xa3c>
        {
            if (trail[x_cor + 1][y_cor] == trail[x_cor][y_cor - 1])
    1c36:	fe 01       	movw	r30, r28
    1c38:	e2 95       	swap	r30
    1c3a:	f2 95       	swap	r31
    1c3c:	f0 7f       	andi	r31, 0xF0	; 240
    1c3e:	fe 27       	eor	r31, r30
    1c40:	e0 7f       	andi	r30, 0xF0	; 240
    1c42:	fe 27       	eor	r31, r30
    1c44:	e3 5b       	subi	r30, 0xB3	; 179
    1c46:	fa 4f       	sbci	r31, 0xFA	; 250
    1c48:	e8 0f       	add	r30, r24
    1c4a:	f9 1f       	adc	r31, r25
    1c4c:	30 81       	ld	r19, Z
    1c4e:	fa 01       	movw	r30, r20
    1c50:	e2 95       	swap	r30
    1c52:	f2 95       	swap	r31
    1c54:	f0 7f       	andi	r31, 0xF0	; 240
    1c56:	fe 27       	eor	r31, r30
    1c58:	e0 7f       	andi	r30, 0xF0	; 240
    1c5a:	fe 27       	eor	r31, r30
    1c5c:	e3 5b       	subi	r30, 0xB3	; 179
    1c5e:	fa 4f       	sbci	r31, 0xFA	; 250
    1c60:	e6 0f       	add	r30, r22
    1c62:	f7 1f       	adc	r31, r23
    1c64:	20 81       	ld	r18, Z
    1c66:	32 13       	cpse	r19, r18
    1c68:	67 c0       	rjmp	.+206    	; 0x1d38 <Solve_3_ways+0xa22>
            {
                if (((x_cor + 1) + (y_cor)) < ((x_cor) + (y_cor - 1)))
    1c6a:	8c 0f       	add	r24, r28
    1c6c:	9d 1f       	adc	r25, r29
    1c6e:	46 0f       	add	r20, r22
    1c70:	57 1f       	adc	r21, r23
    1c72:	84 17       	cp	r24, r20
    1c74:	95 07       	cpc	r25, r21
    1c76:	14 f4       	brge	.+4      	; 0x1c7c <Solve_3_ways+0x966>
                {
                    forward();
    1c78:	0e 94 9e 12 	call	0x253c	; 0x253c <forward>
                }
                if (((x_cor + 1) + (y_cor)) > ((x_cor) + (y_cor - 1)))
    1c7c:	20 91 4d 06 	lds	r18, 0x064D	; 0x80064d <x_cor>
    1c80:	30 e0       	ldi	r19, 0x00	; 0
    1c82:	e9 01       	movw	r28, r18
    1c84:	21 96       	adiw	r28, 0x01	; 1
    1c86:	80 91 48 03 	lds	r24, 0x0348	; 0x800348 <y_cor>
    1c8a:	90 e0       	ldi	r25, 0x00	; 0
    1c8c:	fe 01       	movw	r30, r28
    1c8e:	e8 0f       	add	r30, r24
    1c90:	f9 1f       	adc	r31, r25
    1c92:	ac 01       	movw	r20, r24
    1c94:	41 50       	subi	r20, 0x01	; 1
    1c96:	51 09       	sbc	r21, r1
    1c98:	b9 01       	movw	r22, r18
    1c9a:	64 0f       	add	r22, r20
    1c9c:	75 1f       	adc	r23, r21
    1c9e:	6e 17       	cp	r22, r30
    1ca0:	7f 07       	cpc	r23, r31
    1ca2:	2c f4       	brge	.+10     	; 0x1cae <Solve_3_ways+0x998>
                {
                    rotate_right();
    1ca4:	0e 94 55 12 	call	0x24aa	; 0x24aa <rotate_right>
                    forward();
    1ca8:	0e 94 9e 12 	call	0x253c	; 0x253c <forward>
    1cac:	44 c3       	rjmp	.+1672   	; 0x2336 <Solve_3_ways+0x1020>
                }
                else
                {
                    if ((Blocking_V_Walls[x_cor + 2][y_cor] + Blocking_H_Walls[x_cor + 1][y_cor]) < (Blocking_V_Walls[x_cor][y_cor - 1] + Blocking_H_Walls[x_cor][y_cor - 1]))
    1cae:	f9 01       	movw	r30, r18
    1cb0:	32 96       	adiw	r30, 0x02	; 2
    1cb2:	e2 95       	swap	r30
    1cb4:	f2 95       	swap	r31
    1cb6:	f0 7f       	andi	r31, 0xF0	; 240
    1cb8:	fe 27       	eor	r31, r30
    1cba:	e0 7f       	andi	r30, 0xF0	; 240
    1cbc:	fe 27       	eor	r31, r30
    1cbe:	e2 5e       	subi	r30, 0xE2	; 226
    1cc0:	fd 4f       	sbci	r31, 0xFD	; 253
    1cc2:	e8 0f       	add	r30, r24
    1cc4:	f9 1f       	adc	r31, r25
    1cc6:	e0 81       	ld	r30, Z
    1cc8:	a1 e1       	ldi	r26, 0x11	; 17
    1cca:	ac 9f       	mul	r26, r28
    1ccc:	b0 01       	movw	r22, r0
    1cce:	ad 9f       	mul	r26, r29
    1cd0:	70 0d       	add	r23, r0
    1cd2:	11 24       	eor	r1, r1
    1cd4:	62 5f       	subi	r22, 0xF2	; 242
    1cd6:	7e 4f       	sbci	r23, 0xFE	; 254
    1cd8:	eb 01       	movw	r28, r22
    1cda:	c8 0f       	add	r28, r24
    1cdc:	d9 1f       	adc	r29, r25
    1cde:	68 81       	ld	r22, Y
    1ce0:	70 e0       	ldi	r23, 0x00	; 0
    1ce2:	6e 0f       	add	r22, r30
    1ce4:	71 1d       	adc	r23, r1
    1ce6:	f9 01       	movw	r30, r18
    1ce8:	e2 95       	swap	r30
    1cea:	f2 95       	swap	r31
    1cec:	f0 7f       	andi	r31, 0xF0	; 240
    1cee:	fe 27       	eor	r31, r30
    1cf0:	e0 7f       	andi	r30, 0xF0	; 240
    1cf2:	fe 27       	eor	r31, r30
    1cf4:	e2 5e       	subi	r30, 0xE2	; 226
    1cf6:	fd 4f       	sbci	r31, 0xFD	; 253
    1cf8:	e4 0f       	add	r30, r20
    1cfa:	f5 1f       	adc	r31, r21
    1cfc:	e0 81       	ld	r30, Z
    1cfe:	a2 9f       	mul	r26, r18
    1d00:	c0 01       	movw	r24, r0
    1d02:	a3 9f       	mul	r26, r19
    1d04:	90 0d       	add	r25, r0
    1d06:	11 24       	eor	r1, r1
    1d08:	82 5f       	subi	r24, 0xF2	; 242
    1d0a:	9e 4f       	sbci	r25, 0xFE	; 254
    1d0c:	dc 01       	movw	r26, r24
    1d0e:	a4 0f       	add	r26, r20
    1d10:	b5 1f       	adc	r27, r21
    1d12:	8c 91       	ld	r24, X
    1d14:	90 e0       	ldi	r25, 0x00	; 0
    1d16:	8e 0f       	add	r24, r30
    1d18:	91 1d       	adc	r25, r1
    1d1a:	68 17       	cp	r22, r24
    1d1c:	79 07       	cpc	r23, r25
    1d1e:	1c f4       	brge	.+6      	; 0x1d26 <Solve_3_ways+0xa10>
                    {
                        forward();
    1d20:	0e 94 9e 12 	call	0x253c	; 0x253c <forward>
    1d24:	08 c3       	rjmp	.+1552   	; 0x2336 <Solve_3_ways+0x1020>
                    }
                    else if ((Blocking_V_Walls[x_cor + 2][y_cor] + Blocking_H_Walls[x_cor + 1][y_cor]) > (Blocking_V_Walls[x_cor][y_cor - 1] + Blocking_H_Walls[x_cor][y_cor - 1]))
    1d26:	86 17       	cp	r24, r22
    1d28:	97 07       	cpc	r25, r23
    1d2a:	0c f0       	brlt	.+2      	; 0x1d2e <Solve_3_ways+0xa18>
    1d2c:	04 c3       	rjmp	.+1544   	; 0x2336 <Solve_3_ways+0x1020>
                    {
                        rotate_right();
    1d2e:	0e 94 55 12 	call	0x24aa	; 0x24aa <rotate_right>
                        forward();
    1d32:	0e 94 9e 12 	call	0x253c	; 0x253c <forward>
    1d36:	ff c2       	rjmp	.+1534   	; 0x2336 <Solve_3_ways+0x1020>
                    }
                }
            }
            else if (trail[x_cor + 1][y_cor] < trail[x_cor][y_cor - 1]) // moved in the right cell before?
    1d38:	32 17       	cp	r19, r18
    1d3a:	18 f4       	brcc	.+6      	; 0x1d42 <Solve_3_ways+0xa2c>
            {
                forward();
    1d3c:	0e 94 9e 12 	call	0x253c	; 0x253c <forward>
    1d40:	fa c2       	rjmp	.+1524   	; 0x2336 <Solve_3_ways+0x1020>
            }
            else if (trail[x_cor + 1][y_cor] > trail[x_cor][y_cor - 1]) // moved in the leading cell before?
    1d42:	23 17       	cp	r18, r19
    1d44:	08 f0       	brcs	.+2      	; 0x1d48 <Solve_3_ways+0xa32>
    1d46:	f7 c2       	rjmp	.+1518   	; 0x2336 <Solve_3_ways+0x1020>
            {
                rotate_right();
    1d48:	0e 94 55 12 	call	0x24aa	; 0x24aa <rotate_right>
                forward();
    1d4c:	0e 94 9e 12 	call	0x253c	; 0x253c <forward>
    1d50:	f2 c2       	rjmp	.+1508   	; 0x2336 <Solve_3_ways+0x1020>
            }
        }
        else if (face == west)
    1d52:	23 30       	cpi	r18, 0x03	; 3
    1d54:	09 f0       	breq	.+2      	; 0x1d58 <Solve_3_ways+0xa42>
    1d56:	ef c2       	rjmp	.+1502   	; 0x2336 <Solve_3_ways+0x1020>
        {
            if (trail[x_cor][y_cor + 1] == trail[x_cor - 1][y_cor])
    1d58:	fa 01       	movw	r30, r20
    1d5a:	e2 95       	swap	r30
    1d5c:	f2 95       	swap	r31
    1d5e:	f0 7f       	andi	r31, 0xF0	; 240
    1d60:	fe 27       	eor	r31, r30
    1d62:	e0 7f       	andi	r30, 0xF0	; 240
    1d64:	fe 27       	eor	r31, r30
    1d66:	e3 5b       	subi	r30, 0xB3	; 179
    1d68:	fa 4f       	sbci	r31, 0xFA	; 250
    1d6a:	ea 0f       	add	r30, r26
    1d6c:	fb 1f       	adc	r31, r27
    1d6e:	30 81       	ld	r19, Z
    1d70:	f8 01       	movw	r30, r16
    1d72:	e2 95       	swap	r30
    1d74:	f2 95       	swap	r31
    1d76:	f0 7f       	andi	r31, 0xF0	; 240
    1d78:	fe 27       	eor	r31, r30
    1d7a:	e0 7f       	andi	r30, 0xF0	; 240
    1d7c:	fe 27       	eor	r31, r30
    1d7e:	e3 5b       	subi	r30, 0xB3	; 179
    1d80:	fa 4f       	sbci	r31, 0xFA	; 250
    1d82:	e8 0f       	add	r30, r24
    1d84:	f9 1f       	adc	r31, r25
    1d86:	20 81       	ld	r18, Z
    1d88:	32 13       	cpse	r19, r18
    1d8a:	69 c0       	rjmp	.+210    	; 0x1e5e <Solve_3_ways+0xb48>
            {
                if (((x_cor) + (y_cor + 1)) < ((x_cor - 1) + (y_cor)))
    1d8c:	4a 0f       	add	r20, r26
    1d8e:	5b 1f       	adc	r21, r27
    1d90:	80 0f       	add	r24, r16
    1d92:	91 1f       	adc	r25, r17
    1d94:	48 17       	cp	r20, r24
    1d96:	59 07       	cpc	r21, r25
    1d98:	24 f4       	brge	.+8      	; 0x1da2 <Solve_3_ways+0xa8c>
                {
                    rotate_right();
    1d9a:	0e 94 55 12 	call	0x24aa	; 0x24aa <rotate_right>
                    forward();
    1d9e:	0e 94 9e 12 	call	0x253c	; 0x253c <forward>
                }
                if (((x_cor) + (y_cor + 1)) > ((x_cor - 1) + (y_cor)))
    1da2:	20 91 4d 06 	lds	r18, 0x064D	; 0x80064d <x_cor>
    1da6:	30 e0       	ldi	r19, 0x00	; 0
    1da8:	80 91 48 03 	lds	r24, 0x0348	; 0x800348 <y_cor>
    1dac:	90 e0       	ldi	r25, 0x00	; 0
    1dae:	ac 01       	movw	r20, r24
    1db0:	4f 5f       	subi	r20, 0xFF	; 255
    1db2:	5f 4f       	sbci	r21, 0xFF	; 255
    1db4:	d9 01       	movw	r26, r18
    1db6:	a4 0f       	add	r26, r20
    1db8:	b5 1f       	adc	r27, r21
    1dba:	b9 01       	movw	r22, r18
    1dbc:	61 50       	subi	r22, 0x01	; 1
    1dbe:	71 09       	sbc	r23, r1
    1dc0:	fc 01       	movw	r30, r24
    1dc2:	e6 0f       	add	r30, r22
    1dc4:	f7 1f       	adc	r31, r23
    1dc6:	ea 17       	cp	r30, r26
    1dc8:	fb 07       	cpc	r31, r27
    1dca:	1c f4       	brge	.+6      	; 0x1dd2 <Solve_3_ways+0xabc>
                {
                    forward();
    1dcc:	0e 94 9e 12 	call	0x253c	; 0x253c <forward>
    1dd0:	b2 c2       	rjmp	.+1380   	; 0x2336 <Solve_3_ways+0x1020>
                }
                else
                {
                    if ((Blocking_V_Walls[x_cor][y_cor + 1] + Blocking_H_Walls[x_cor][y_cor + 2]) < (Blocking_V_Walls[x_cor - 1][y_cor] + Blocking_H_Walls[x_cor - 1][y_cor]))
    1dd2:	f9 01       	movw	r30, r18
    1dd4:	e2 95       	swap	r30
    1dd6:	f2 95       	swap	r31
    1dd8:	f0 7f       	andi	r31, 0xF0	; 240
    1dda:	fe 27       	eor	r31, r30
    1ddc:	e0 7f       	andi	r30, 0xF0	; 240
    1dde:	fe 27       	eor	r31, r30
    1de0:	e2 5e       	subi	r30, 0xE2	; 226
    1de2:	fd 4f       	sbci	r31, 0xFD	; 253
    1de4:	e4 0f       	add	r30, r20
    1de6:	f5 1f       	adc	r31, r21
    1de8:	b0 81       	ld	r27, Z
    1dea:	ac 01       	movw	r20, r24
    1dec:	4e 5f       	subi	r20, 0xFE	; 254
    1dee:	5f 4f       	sbci	r21, 0xFF	; 255
    1df0:	a1 e1       	ldi	r26, 0x11	; 17
    1df2:	a2 9f       	mul	r26, r18
    1df4:	f0 01       	movw	r30, r0
    1df6:	a3 9f       	mul	r26, r19
    1df8:	f0 0d       	add	r31, r0
    1dfa:	11 24       	eor	r1, r1
    1dfc:	e2 5f       	subi	r30, 0xF2	; 242
    1dfe:	fe 4f       	sbci	r31, 0xFE	; 254
    1e00:	e4 0f       	add	r30, r20
    1e02:	f5 1f       	adc	r31, r21
    1e04:	20 81       	ld	r18, Z
    1e06:	30 e0       	ldi	r19, 0x00	; 0
    1e08:	2b 0f       	add	r18, r27
    1e0a:	31 1d       	adc	r19, r1
    1e0c:	fb 01       	movw	r30, r22
    1e0e:	e2 95       	swap	r30
    1e10:	f2 95       	swap	r31
    1e12:	f0 7f       	andi	r31, 0xF0	; 240
    1e14:	fe 27       	eor	r31, r30
    1e16:	e0 7f       	andi	r30, 0xF0	; 240
    1e18:	fe 27       	eor	r31, r30
    1e1a:	e2 5e       	subi	r30, 0xE2	; 226
    1e1c:	fd 4f       	sbci	r31, 0xFD	; 253
    1e1e:	e8 0f       	add	r30, r24
    1e20:	f9 1f       	adc	r31, r25
    1e22:	e0 81       	ld	r30, Z
    1e24:	a6 9f       	mul	r26, r22
    1e26:	a0 01       	movw	r20, r0
    1e28:	a7 9f       	mul	r26, r23
    1e2a:	50 0d       	add	r21, r0
    1e2c:	11 24       	eor	r1, r1
    1e2e:	42 5f       	subi	r20, 0xF2	; 242
    1e30:	5e 4f       	sbci	r21, 0xFE	; 254
    1e32:	da 01       	movw	r26, r20
    1e34:	a8 0f       	add	r26, r24
    1e36:	b9 1f       	adc	r27, r25
    1e38:	8c 91       	ld	r24, X
    1e3a:	90 e0       	ldi	r25, 0x00	; 0
    1e3c:	8e 0f       	add	r24, r30
    1e3e:	91 1d       	adc	r25, r1
    1e40:	28 17       	cp	r18, r24
    1e42:	39 07       	cpc	r19, r25
    1e44:	2c f4       	brge	.+10     	; 0x1e50 <Solve_3_ways+0xb3a>
                    {
                        rotate_right();
    1e46:	0e 94 55 12 	call	0x24aa	; 0x24aa <rotate_right>
                        forward();
    1e4a:	0e 94 9e 12 	call	0x253c	; 0x253c <forward>
    1e4e:	73 c2       	rjmp	.+1254   	; 0x2336 <Solve_3_ways+0x1020>
                    }
                    else if ((Blocking_V_Walls[x_cor][y_cor + 1] + Blocking_H_Walls[x_cor][y_cor + 2]) > (Blocking_V_Walls[x_cor - 1][y_cor] + Blocking_H_Walls[x_cor - 1][y_cor]))
    1e50:	82 17       	cp	r24, r18
    1e52:	93 07       	cpc	r25, r19
    1e54:	0c f0       	brlt	.+2      	; 0x1e58 <Solve_3_ways+0xb42>
    1e56:	6f c2       	rjmp	.+1246   	; 0x2336 <Solve_3_ways+0x1020>
                    {
                        forward();
    1e58:	0e 94 9e 12 	call	0x253c	; 0x253c <forward>
    1e5c:	6c c2       	rjmp	.+1240   	; 0x2336 <Solve_3_ways+0x1020>
                    }
                }
            }
            else if (trail[x_cor][y_cor + 1] < trail[x_cor - 1][y_cor]) // moved in the right cell before?
    1e5e:	32 17       	cp	r19, r18
    1e60:	28 f4       	brcc	.+10     	; 0x1e6c <Solve_3_ways+0xb56>
            {
                rotate_right();
    1e62:	0e 94 55 12 	call	0x24aa	; 0x24aa <rotate_right>
                forward();
    1e66:	0e 94 9e 12 	call	0x253c	; 0x253c <forward>
    1e6a:	65 c2       	rjmp	.+1226   	; 0x2336 <Solve_3_ways+0x1020>
            }
            else if (trail[x_cor][y_cor + 1] > trail[x_cor - 1][y_cor]) // moved in the leading cell before?
    1e6c:	23 17       	cp	r18, r19
    1e6e:	08 f0       	brcs	.+2      	; 0x1e72 <Solve_3_ways+0xb5c>
    1e70:	62 c2       	rjmp	.+1220   	; 0x2336 <Solve_3_ways+0x1020>
            {
                forward();
    1e72:	0e 94 9e 12 	call	0x253c	; 0x253c <forward>
    1e76:	5f c2       	rjmp	.+1214   	; 0x2336 <Solve_3_ways+0x1020>
            }
        }
    }
    else if (way_right)
    1e78:	30 91 4a 03 	lds	r19, 0x034A	; 0x80034a <way_right>
    1e7c:	33 23       	and	r19, r19
    1e7e:	09 f4       	brne	.+2      	; 0x1e82 <Solve_3_ways+0xb6c>
    1e80:	5a c2       	rjmp	.+1204   	; 0x2336 <Solve_3_ways+0x1020>
    {
        if (face == north)
    1e82:	21 11       	cpse	r18, r1
    1e84:	90 c0       	rjmp	.+288    	; 0x1fa6 <Solve_3_ways+0xc90>
        {
            if (trail[x_cor][y_cor + 1] == trail[x_cor - 1][y_cor])
    1e86:	fa 01       	movw	r30, r20
    1e88:	e2 95       	swap	r30
    1e8a:	f2 95       	swap	r31
    1e8c:	f0 7f       	andi	r31, 0xF0	; 240
    1e8e:	fe 27       	eor	r31, r30
    1e90:	e0 7f       	andi	r30, 0xF0	; 240
    1e92:	fe 27       	eor	r31, r30
    1e94:	e3 5b       	subi	r30, 0xB3	; 179
    1e96:	fa 4f       	sbci	r31, 0xFA	; 250
    1e98:	ea 0f       	add	r30, r26
    1e9a:	fb 1f       	adc	r31, r27
    1e9c:	30 81       	ld	r19, Z
    1e9e:	f8 01       	movw	r30, r16
    1ea0:	e2 95       	swap	r30
    1ea2:	f2 95       	swap	r31
    1ea4:	f0 7f       	andi	r31, 0xF0	; 240
    1ea6:	fe 27       	eor	r31, r30
    1ea8:	e0 7f       	andi	r30, 0xF0	; 240
    1eaa:	fe 27       	eor	r31, r30
    1eac:	e3 5b       	subi	r30, 0xB3	; 179
    1eae:	fa 4f       	sbci	r31, 0xFA	; 250
    1eb0:	e8 0f       	add	r30, r24
    1eb2:	f9 1f       	adc	r31, r25
    1eb4:	20 81       	ld	r18, Z
    1eb6:	32 13       	cpse	r19, r18
    1eb8:	69 c0       	rjmp	.+210    	; 0x1f8c <Solve_3_ways+0xc76>
            {
                if (((x_cor) + (y_cor + 1)) < ((x_cor - 1) + (y_cor)))
    1eba:	4a 0f       	add	r20, r26
    1ebc:	5b 1f       	adc	r21, r27
    1ebe:	80 0f       	add	r24, r16
    1ec0:	91 1f       	adc	r25, r17
    1ec2:	48 17       	cp	r20, r24
    1ec4:	59 07       	cpc	r21, r25
    1ec6:	14 f4       	brge	.+4      	; 0x1ecc <Solve_3_ways+0xbb6>
                {
                    forward();
    1ec8:	0e 94 9e 12 	call	0x253c	; 0x253c <forward>
                }
                if (((x_cor) + (y_cor + 1)) > ((x_cor - 1) + (y_cor)))
    1ecc:	20 91 4d 06 	lds	r18, 0x064D	; 0x80064d <x_cor>
    1ed0:	30 e0       	ldi	r19, 0x00	; 0
    1ed2:	80 91 48 03 	lds	r24, 0x0348	; 0x800348 <y_cor>
    1ed6:	90 e0       	ldi	r25, 0x00	; 0
    1ed8:	ac 01       	movw	r20, r24
    1eda:	4f 5f       	subi	r20, 0xFF	; 255
    1edc:	5f 4f       	sbci	r21, 0xFF	; 255
    1ede:	d9 01       	movw	r26, r18
    1ee0:	a4 0f       	add	r26, r20
    1ee2:	b5 1f       	adc	r27, r21
    1ee4:	b9 01       	movw	r22, r18
    1ee6:	61 50       	subi	r22, 0x01	; 1
    1ee8:	71 09       	sbc	r23, r1
    1eea:	fc 01       	movw	r30, r24
    1eec:	e6 0f       	add	r30, r22
    1eee:	f7 1f       	adc	r31, r23
    1ef0:	ea 17       	cp	r30, r26
    1ef2:	fb 07       	cpc	r31, r27
    1ef4:	2c f4       	brge	.+10     	; 0x1f00 <Solve_3_ways+0xbea>
                {
                    rotate_left();
    1ef6:	0e 94 0c 12 	call	0x2418	; 0x2418 <rotate_left>
                    forward();
    1efa:	0e 94 9e 12 	call	0x253c	; 0x253c <forward>
    1efe:	1b c2       	rjmp	.+1078   	; 0x2336 <Solve_3_ways+0x1020>
                }
                else
                {
                    if ((Blocking_V_Walls[x_cor][y_cor + 1] + Blocking_H_Walls[x_cor][y_cor + 2]) < (Blocking_V_Walls[x_cor - 1][y_cor] + Blocking_H_Walls[x_cor - 1][y_cor]))
    1f00:	f9 01       	movw	r30, r18
    1f02:	e2 95       	swap	r30
    1f04:	f2 95       	swap	r31
    1f06:	f0 7f       	andi	r31, 0xF0	; 240
    1f08:	fe 27       	eor	r31, r30
    1f0a:	e0 7f       	andi	r30, 0xF0	; 240
    1f0c:	fe 27       	eor	r31, r30
    1f0e:	e2 5e       	subi	r30, 0xE2	; 226
    1f10:	fd 4f       	sbci	r31, 0xFD	; 253
    1f12:	e4 0f       	add	r30, r20
    1f14:	f5 1f       	adc	r31, r21
    1f16:	b0 81       	ld	r27, Z
    1f18:	ac 01       	movw	r20, r24
    1f1a:	4e 5f       	subi	r20, 0xFE	; 254
    1f1c:	5f 4f       	sbci	r21, 0xFF	; 255
    1f1e:	a1 e1       	ldi	r26, 0x11	; 17
    1f20:	a2 9f       	mul	r26, r18
    1f22:	f0 01       	movw	r30, r0
    1f24:	a3 9f       	mul	r26, r19
    1f26:	f0 0d       	add	r31, r0
    1f28:	11 24       	eor	r1, r1
    1f2a:	e2 5f       	subi	r30, 0xF2	; 242
    1f2c:	fe 4f       	sbci	r31, 0xFE	; 254
    1f2e:	e4 0f       	add	r30, r20
    1f30:	f5 1f       	adc	r31, r21
    1f32:	20 81       	ld	r18, Z
    1f34:	30 e0       	ldi	r19, 0x00	; 0
    1f36:	2b 0f       	add	r18, r27
    1f38:	31 1d       	adc	r19, r1
    1f3a:	fb 01       	movw	r30, r22
    1f3c:	e2 95       	swap	r30
    1f3e:	f2 95       	swap	r31
    1f40:	f0 7f       	andi	r31, 0xF0	; 240
    1f42:	fe 27       	eor	r31, r30
    1f44:	e0 7f       	andi	r30, 0xF0	; 240
    1f46:	fe 27       	eor	r31, r30
    1f48:	e2 5e       	subi	r30, 0xE2	; 226
    1f4a:	fd 4f       	sbci	r31, 0xFD	; 253
    1f4c:	e8 0f       	add	r30, r24
    1f4e:	f9 1f       	adc	r31, r25
    1f50:	e0 81       	ld	r30, Z
    1f52:	a6 9f       	mul	r26, r22
    1f54:	a0 01       	movw	r20, r0
    1f56:	a7 9f       	mul	r26, r23
    1f58:	50 0d       	add	r21, r0
    1f5a:	11 24       	eor	r1, r1
    1f5c:	42 5f       	subi	r20, 0xF2	; 242
    1f5e:	5e 4f       	sbci	r21, 0xFE	; 254
    1f60:	da 01       	movw	r26, r20
    1f62:	a8 0f       	add	r26, r24
    1f64:	b9 1f       	adc	r27, r25
    1f66:	8c 91       	ld	r24, X
    1f68:	90 e0       	ldi	r25, 0x00	; 0
    1f6a:	8e 0f       	add	r24, r30
    1f6c:	91 1d       	adc	r25, r1
    1f6e:	28 17       	cp	r18, r24
    1f70:	39 07       	cpc	r19, r25
    1f72:	1c f4       	brge	.+6      	; 0x1f7a <Solve_3_ways+0xc64>
                    {
                        forward();
    1f74:	0e 94 9e 12 	call	0x253c	; 0x253c <forward>
    1f78:	de c1       	rjmp	.+956    	; 0x2336 <Solve_3_ways+0x1020>
                    }
                    else if ((Blocking_V_Walls[x_cor][y_cor + 1] + Blocking_H_Walls[x_cor][y_cor + 2]) > (Blocking_V_Walls[x_cor - 1][y_cor] + Blocking_H_Walls[x_cor - 1][y_cor]))
    1f7a:	82 17       	cp	r24, r18
    1f7c:	93 07       	cpc	r25, r19
    1f7e:	0c f0       	brlt	.+2      	; 0x1f82 <Solve_3_ways+0xc6c>
    1f80:	da c1       	rjmp	.+948    	; 0x2336 <Solve_3_ways+0x1020>
                    {
                        rotate_left();
    1f82:	0e 94 0c 12 	call	0x2418	; 0x2418 <rotate_left>
                        forward();
    1f86:	0e 94 9e 12 	call	0x253c	; 0x253c <forward>
    1f8a:	d5 c1       	rjmp	.+938    	; 0x2336 <Solve_3_ways+0x1020>
                    }
                }
            }
            else if (trail[x_cor][y_cor + 1] < trail[x_cor - 1][y_cor]) // moved in the right cell before?
    1f8c:	32 17       	cp	r19, r18
    1f8e:	18 f4       	brcc	.+6      	; 0x1f96 <Solve_3_ways+0xc80>
            {
                forward();
    1f90:	0e 94 9e 12 	call	0x253c	; 0x253c <forward>
    1f94:	d0 c1       	rjmp	.+928    	; 0x2336 <Solve_3_ways+0x1020>
            }
            else if (trail[x_cor][y_cor + 1] > trail[x_cor - 1][y_cor]) // moved in the leading cell before?
    1f96:	23 17       	cp	r18, r19
    1f98:	08 f0       	brcs	.+2      	; 0x1f9c <Solve_3_ways+0xc86>
    1f9a:	cd c1       	rjmp	.+922    	; 0x2336 <Solve_3_ways+0x1020>
            {
                rotate_left();
    1f9c:	0e 94 0c 12 	call	0x2418	; 0x2418 <rotate_left>
                forward();
    1fa0:	0e 94 9e 12 	call	0x253c	; 0x253c <forward>
    1fa4:	c8 c1       	rjmp	.+912    	; 0x2336 <Solve_3_ways+0x1020>
            }
        }
        else if (face == south)
    1fa6:	22 30       	cpi	r18, 0x02	; 2
    1fa8:	09 f0       	breq	.+2      	; 0x1fac <Solve_3_ways+0xc96>
    1faa:	90 c0       	rjmp	.+288    	; 0x20cc <Solve_3_ways+0xdb6>
        {
            if (trail[x_cor + 1][y_cor] == trail[x_cor][y_cor - 1])
    1fac:	fe 01       	movw	r30, r28
    1fae:	e2 95       	swap	r30
    1fb0:	f2 95       	swap	r31
    1fb2:	f0 7f       	andi	r31, 0xF0	; 240
    1fb4:	fe 27       	eor	r31, r30
    1fb6:	e0 7f       	andi	r30, 0xF0	; 240
    1fb8:	fe 27       	eor	r31, r30
    1fba:	e3 5b       	subi	r30, 0xB3	; 179
    1fbc:	fa 4f       	sbci	r31, 0xFA	; 250
    1fbe:	e8 0f       	add	r30, r24
    1fc0:	f9 1f       	adc	r31, r25
    1fc2:	30 81       	ld	r19, Z
    1fc4:	fa 01       	movw	r30, r20
    1fc6:	e2 95       	swap	r30
    1fc8:	f2 95       	swap	r31
    1fca:	f0 7f       	andi	r31, 0xF0	; 240
    1fcc:	fe 27       	eor	r31, r30
    1fce:	e0 7f       	andi	r30, 0xF0	; 240
    1fd0:	fe 27       	eor	r31, r30
    1fd2:	e3 5b       	subi	r30, 0xB3	; 179
    1fd4:	fa 4f       	sbci	r31, 0xFA	; 250
    1fd6:	e6 0f       	add	r30, r22
    1fd8:	f7 1f       	adc	r31, r23
    1fda:	20 81       	ld	r18, Z
    1fdc:	32 13       	cpse	r19, r18
    1fde:	69 c0       	rjmp	.+210    	; 0x20b2 <Solve_3_ways+0xd9c>
            {
                if (((x_cor + 1) + (y_cor)) < ((x_cor) + (y_cor - 1)))
    1fe0:	8c 0f       	add	r24, r28
    1fe2:	9d 1f       	adc	r25, r29
    1fe4:	46 0f       	add	r20, r22
    1fe6:	57 1f       	adc	r21, r23
    1fe8:	84 17       	cp	r24, r20
    1fea:	95 07       	cpc	r25, r21
    1fec:	24 f4       	brge	.+8      	; 0x1ff6 <Solve_3_ways+0xce0>
                {
                    rotate_left();
    1fee:	0e 94 0c 12 	call	0x2418	; 0x2418 <rotate_left>
                    forward();
    1ff2:	0e 94 9e 12 	call	0x253c	; 0x253c <forward>
                }
                if (((x_cor + 1) + (y_cor)) > ((x_cor) + (y_cor - 1)))
    1ff6:	20 91 4d 06 	lds	r18, 0x064D	; 0x80064d <x_cor>
    1ffa:	30 e0       	ldi	r19, 0x00	; 0
    1ffc:	b9 01       	movw	r22, r18
    1ffe:	6f 5f       	subi	r22, 0xFF	; 255
    2000:	7f 4f       	sbci	r23, 0xFF	; 255
    2002:	80 91 48 03 	lds	r24, 0x0348	; 0x800348 <y_cor>
    2006:	90 e0       	ldi	r25, 0x00	; 0
    2008:	db 01       	movw	r26, r22
    200a:	a8 0f       	add	r26, r24
    200c:	b9 1f       	adc	r27, r25
    200e:	ac 01       	movw	r20, r24
    2010:	41 50       	subi	r20, 0x01	; 1
    2012:	51 09       	sbc	r21, r1
    2014:	f9 01       	movw	r30, r18
    2016:	e4 0f       	add	r30, r20
    2018:	f5 1f       	adc	r31, r21
    201a:	ea 17       	cp	r30, r26
    201c:	fb 07       	cpc	r31, r27
    201e:	1c f4       	brge	.+6      	; 0x2026 <Solve_3_ways+0xd10>
                {
                    forward();
    2020:	0e 94 9e 12 	call	0x253c	; 0x253c <forward>
    2024:	88 c1       	rjmp	.+784    	; 0x2336 <Solve_3_ways+0x1020>
                }
                else
                {
                    if ((Blocking_V_Walls[x_cor + 2][y_cor] + Blocking_H_Walls[x_cor + 1][y_cor]) < (Blocking_V_Walls[x_cor][y_cor - 1] + Blocking_H_Walls[x_cor][y_cor - 1]))
    2026:	f9 01       	movw	r30, r18
    2028:	32 96       	adiw	r30, 0x02	; 2
    202a:	e2 95       	swap	r30
    202c:	f2 95       	swap	r31
    202e:	f0 7f       	andi	r31, 0xF0	; 240
    2030:	fe 27       	eor	r31, r30
    2032:	e0 7f       	andi	r30, 0xF0	; 240
    2034:	fe 27       	eor	r31, r30
    2036:	e2 5e       	subi	r30, 0xE2	; 226
    2038:	fd 4f       	sbci	r31, 0xFD	; 253
    203a:	e8 0f       	add	r30, r24
    203c:	f9 1f       	adc	r31, r25
    203e:	b0 81       	ld	r27, Z
    2040:	a1 e1       	ldi	r26, 0x11	; 17
    2042:	a6 9f       	mul	r26, r22
    2044:	f0 01       	movw	r30, r0
    2046:	a7 9f       	mul	r26, r23
    2048:	f0 0d       	add	r31, r0
    204a:	11 24       	eor	r1, r1
    204c:	bf 01       	movw	r22, r30
    204e:	62 5f       	subi	r22, 0xF2	; 242
    2050:	7e 4f       	sbci	r23, 0xFE	; 254
    2052:	fb 01       	movw	r30, r22
    2054:	e8 0f       	add	r30, r24
    2056:	f9 1f       	adc	r31, r25
    2058:	60 81       	ld	r22, Z
    205a:	70 e0       	ldi	r23, 0x00	; 0
    205c:	6b 0f       	add	r22, r27
    205e:	71 1d       	adc	r23, r1
    2060:	f9 01       	movw	r30, r18
    2062:	e2 95       	swap	r30
    2064:	f2 95       	swap	r31
    2066:	f0 7f       	andi	r31, 0xF0	; 240
    2068:	fe 27       	eor	r31, r30
    206a:	e0 7f       	andi	r30, 0xF0	; 240
    206c:	fe 27       	eor	r31, r30
    206e:	e2 5e       	subi	r30, 0xE2	; 226
    2070:	fd 4f       	sbci	r31, 0xFD	; 253
    2072:	e4 0f       	add	r30, r20
    2074:	f5 1f       	adc	r31, r21
    2076:	e0 81       	ld	r30, Z
    2078:	a2 9f       	mul	r26, r18
    207a:	c0 01       	movw	r24, r0
    207c:	a3 9f       	mul	r26, r19
    207e:	90 0d       	add	r25, r0
    2080:	11 24       	eor	r1, r1
    2082:	82 5f       	subi	r24, 0xF2	; 242
    2084:	9e 4f       	sbci	r25, 0xFE	; 254
    2086:	dc 01       	movw	r26, r24
    2088:	a4 0f       	add	r26, r20
    208a:	b5 1f       	adc	r27, r21
    208c:	8c 91       	ld	r24, X
    208e:	90 e0       	ldi	r25, 0x00	; 0
    2090:	8e 0f       	add	r24, r30
    2092:	91 1d       	adc	r25, r1
    2094:	68 17       	cp	r22, r24
    2096:	79 07       	cpc	r23, r25
    2098:	2c f4       	brge	.+10     	; 0x20a4 <Solve_3_ways+0xd8e>
                    {
                        rotate_left();
    209a:	0e 94 0c 12 	call	0x2418	; 0x2418 <rotate_left>
                        forward();
    209e:	0e 94 9e 12 	call	0x253c	; 0x253c <forward>
    20a2:	49 c1       	rjmp	.+658    	; 0x2336 <Solve_3_ways+0x1020>
                    }
                    else if ((Blocking_V_Walls[x_cor + 2][y_cor] + Blocking_H_Walls[x_cor + 1][y_cor]) > (Blocking_V_Walls[x_cor][y_cor - 1] + Blocking_H_Walls[x_cor][y_cor - 1]))
    20a4:	86 17       	cp	r24, r22
    20a6:	97 07       	cpc	r25, r23
    20a8:	0c f0       	brlt	.+2      	; 0x20ac <Solve_3_ways+0xd96>
    20aa:	45 c1       	rjmp	.+650    	; 0x2336 <Solve_3_ways+0x1020>
                    {
                        forward();
    20ac:	0e 94 9e 12 	call	0x253c	; 0x253c <forward>
    20b0:	42 c1       	rjmp	.+644    	; 0x2336 <Solve_3_ways+0x1020>
                    }
                }
            }
            else if (trail[x_cor + 1][y_cor] < trail[x_cor][y_cor - 1]) // moved in the right cell before?
    20b2:	32 17       	cp	r19, r18
    20b4:	28 f4       	brcc	.+10     	; 0x20c0 <Solve_3_ways+0xdaa>
            {
                rotate_left();
    20b6:	0e 94 0c 12 	call	0x2418	; 0x2418 <rotate_left>
                forward();
    20ba:	0e 94 9e 12 	call	0x253c	; 0x253c <forward>
    20be:	3b c1       	rjmp	.+630    	; 0x2336 <Solve_3_ways+0x1020>
            }
            else if (trail[x_cor + 1][y_cor] > trail[x_cor][y_cor - 1]) // moved in the leading cell before?
    20c0:	23 17       	cp	r18, r19
    20c2:	08 f0       	brcs	.+2      	; 0x20c6 <Solve_3_ways+0xdb0>
    20c4:	38 c1       	rjmp	.+624    	; 0x2336 <Solve_3_ways+0x1020>
            {
                forward();
    20c6:	0e 94 9e 12 	call	0x253c	; 0x253c <forward>
    20ca:	35 c1       	rjmp	.+618    	; 0x2336 <Solve_3_ways+0x1020>
            }
        }
        else if (face == east)
    20cc:	21 30       	cpi	r18, 0x01	; 1
    20ce:	09 f0       	breq	.+2      	; 0x20d2 <Solve_3_ways+0xdbc>
    20d0:	91 c0       	rjmp	.+290    	; 0x21f4 <Solve_3_ways+0xede>
        {
            if (trail[x_cor + 1][y_cor] == trail[x_cor][y_cor + 1])
    20d2:	fe 01       	movw	r30, r28
    20d4:	e2 95       	swap	r30
    20d6:	f2 95       	swap	r31
    20d8:	f0 7f       	andi	r31, 0xF0	; 240
    20da:	fe 27       	eor	r31, r30
    20dc:	e0 7f       	andi	r30, 0xF0	; 240
    20de:	fe 27       	eor	r31, r30
    20e0:	e3 5b       	subi	r30, 0xB3	; 179
    20e2:	fa 4f       	sbci	r31, 0xFA	; 250
    20e4:	e8 0f       	add	r30, r24
    20e6:	f9 1f       	adc	r31, r25
    20e8:	30 81       	ld	r19, Z
    20ea:	fa 01       	movw	r30, r20
    20ec:	e2 95       	swap	r30
    20ee:	f2 95       	swap	r31
    20f0:	f0 7f       	andi	r31, 0xF0	; 240
    20f2:	fe 27       	eor	r31, r30
    20f4:	e0 7f       	andi	r30, 0xF0	; 240
    20f6:	fe 27       	eor	r31, r30
    20f8:	e3 5b       	subi	r30, 0xB3	; 179
    20fa:	fa 4f       	sbci	r31, 0xFA	; 250
    20fc:	ea 0f       	add	r30, r26
    20fe:	fb 1f       	adc	r31, r27
    2100:	20 81       	ld	r18, Z
    2102:	32 13       	cpse	r19, r18
    2104:	6a c0       	rjmp	.+212    	; 0x21da <Solve_3_ways+0xec4>
            {
                if (((x_cor + 1) + (y_cor)) < ((x_cor) + (y_cor + 1)))
    2106:	8c 0f       	add	r24, r28
    2108:	9d 1f       	adc	r25, r29
    210a:	4a 0f       	add	r20, r26
    210c:	5b 1f       	adc	r21, r27
    210e:	84 17       	cp	r24, r20
    2110:	95 07       	cpc	r25, r21
    2112:	14 f4       	brge	.+4      	; 0x2118 <Solve_3_ways+0xe02>
                {
                    forward();
    2114:	0e 94 9e 12 	call	0x253c	; 0x253c <forward>
                }
                if (((x_cor + 1) + (y_cor)) > ((x_cor) + (y_cor + 1)))
    2118:	80 91 4d 06 	lds	r24, 0x064D	; 0x80064d <x_cor>
    211c:	90 e0       	ldi	r25, 0x00	; 0
    211e:	bc 01       	movw	r22, r24
    2120:	6f 5f       	subi	r22, 0xFF	; 255
    2122:	7f 4f       	sbci	r23, 0xFF	; 255
    2124:	20 91 48 03 	lds	r18, 0x0348	; 0x800348 <y_cor>
    2128:	30 e0       	ldi	r19, 0x00	; 0
    212a:	db 01       	movw	r26, r22
    212c:	a2 0f       	add	r26, r18
    212e:	b3 1f       	adc	r27, r19
    2130:	a9 01       	movw	r20, r18
    2132:	4f 5f       	subi	r20, 0xFF	; 255
    2134:	5f 4f       	sbci	r21, 0xFF	; 255
    2136:	fc 01       	movw	r30, r24
    2138:	e4 0f       	add	r30, r20
    213a:	f5 1f       	adc	r31, r21
    213c:	ea 17       	cp	r30, r26
    213e:	fb 07       	cpc	r31, r27
    2140:	2c f4       	brge	.+10     	; 0x214c <Solve_3_ways+0xe36>
                {
                    rotate_left();
    2142:	0e 94 0c 12 	call	0x2418	; 0x2418 <rotate_left>
                    forward();
    2146:	0e 94 9e 12 	call	0x253c	; 0x253c <forward>
    214a:	f5 c0       	rjmp	.+490    	; 0x2336 <Solve_3_ways+0x1020>
                }
                else
                {
                    if ((Blocking_V_Walls[x_cor][y_cor + 1] + Blocking_H_Walls[x_cor][y_cor + 2]) < (Blocking_V_Walls[x_cor + 2][y_cor] + Blocking_H_Walls[x_cor + 1][y_cor]))
    214c:	fc 01       	movw	r30, r24
    214e:	e2 95       	swap	r30
    2150:	f2 95       	swap	r31
    2152:	f0 7f       	andi	r31, 0xF0	; 240
    2154:	fe 27       	eor	r31, r30
    2156:	e0 7f       	andi	r30, 0xF0	; 240
    2158:	fe 27       	eor	r31, r30
    215a:	e2 5e       	subi	r30, 0xE2	; 226
    215c:	fd 4f       	sbci	r31, 0xFD	; 253
    215e:	e4 0f       	add	r30, r20
    2160:	f5 1f       	adc	r31, r21
    2162:	b0 81       	ld	r27, Z
    2164:	a9 01       	movw	r20, r18
    2166:	4e 5f       	subi	r20, 0xFE	; 254
    2168:	5f 4f       	sbci	r21, 0xFF	; 255
    216a:	a1 e1       	ldi	r26, 0x11	; 17
    216c:	a8 9f       	mul	r26, r24
    216e:	f0 01       	movw	r30, r0
    2170:	a9 9f       	mul	r26, r25
    2172:	f0 0d       	add	r31, r0
    2174:	11 24       	eor	r1, r1
    2176:	e2 5f       	subi	r30, 0xF2	; 242
    2178:	fe 4f       	sbci	r31, 0xFE	; 254
    217a:	e4 0f       	add	r30, r20
    217c:	f5 1f       	adc	r31, r21
    217e:	40 81       	ld	r20, Z
    2180:	50 e0       	ldi	r21, 0x00	; 0
    2182:	4b 0f       	add	r20, r27
    2184:	51 1d       	adc	r21, r1
    2186:	fc 01       	movw	r30, r24
    2188:	32 96       	adiw	r30, 0x02	; 2
    218a:	e2 95       	swap	r30
    218c:	f2 95       	swap	r31
    218e:	f0 7f       	andi	r31, 0xF0	; 240
    2190:	fe 27       	eor	r31, r30
    2192:	e0 7f       	andi	r30, 0xF0	; 240
    2194:	fe 27       	eor	r31, r30
    2196:	e2 5e       	subi	r30, 0xE2	; 226
    2198:	fd 4f       	sbci	r31, 0xFD	; 253
    219a:	e2 0f       	add	r30, r18
    219c:	f3 1f       	adc	r31, r19
    219e:	e0 81       	ld	r30, Z
    21a0:	a6 9f       	mul	r26, r22
    21a2:	c0 01       	movw	r24, r0
    21a4:	a7 9f       	mul	r26, r23
    21a6:	90 0d       	add	r25, r0
    21a8:	11 24       	eor	r1, r1
    21aa:	82 5f       	subi	r24, 0xF2	; 242
    21ac:	9e 4f       	sbci	r25, 0xFE	; 254
    21ae:	dc 01       	movw	r26, r24
    21b0:	a2 0f       	add	r26, r18
    21b2:	b3 1f       	adc	r27, r19
    21b4:	8c 91       	ld	r24, X
    21b6:	90 e0       	ldi	r25, 0x00	; 0
    21b8:	8e 0f       	add	r24, r30
    21ba:	91 1d       	adc	r25, r1
    21bc:	48 17       	cp	r20, r24
    21be:	59 07       	cpc	r21, r25
    21c0:	2c f4       	brge	.+10     	; 0x21cc <Solve_3_ways+0xeb6>
                    {
                        rotate_left();
    21c2:	0e 94 0c 12 	call	0x2418	; 0x2418 <rotate_left>
                        forward();
    21c6:	0e 94 9e 12 	call	0x253c	; 0x253c <forward>
    21ca:	b5 c0       	rjmp	.+362    	; 0x2336 <Solve_3_ways+0x1020>
                    }
                    else if ((Blocking_V_Walls[x_cor][y_cor + 1] + Blocking_H_Walls[x_cor][y_cor + 2]) > (Blocking_V_Walls[x_cor + 2][y_cor] + Blocking_H_Walls[x_cor + 1][y_cor]))
    21cc:	84 17       	cp	r24, r20
    21ce:	95 07       	cpc	r25, r21
    21d0:	0c f0       	brlt	.+2      	; 0x21d4 <Solve_3_ways+0xebe>
    21d2:	b1 c0       	rjmp	.+354    	; 0x2336 <Solve_3_ways+0x1020>
                    {
                        forward();
    21d4:	0e 94 9e 12 	call	0x253c	; 0x253c <forward>
    21d8:	ae c0       	rjmp	.+348    	; 0x2336 <Solve_3_ways+0x1020>
                    }
                }
            }
            else if (trail[x_cor + 1][y_cor] < trail[x_cor][y_cor + 1]) // moved in the right cell before?
    21da:	32 17       	cp	r19, r18
    21dc:	18 f4       	brcc	.+6      	; 0x21e4 <Solve_3_ways+0xece>
            {
                forward();
    21de:	0e 94 9e 12 	call	0x253c	; 0x253c <forward>
    21e2:	a9 c0       	rjmp	.+338    	; 0x2336 <Solve_3_ways+0x1020>
            }
            else if (trail[x_cor + 1][y_cor] > trail[x_cor][y_cor + 1]) // moved in the leading cell before?
    21e4:	23 17       	cp	r18, r19
    21e6:	08 f0       	brcs	.+2      	; 0x21ea <Solve_3_ways+0xed4>
    21e8:	a6 c0       	rjmp	.+332    	; 0x2336 <Solve_3_ways+0x1020>
            {
                rotate_left();
    21ea:	0e 94 0c 12 	call	0x2418	; 0x2418 <rotate_left>
                forward();
    21ee:	0e 94 9e 12 	call	0x253c	; 0x253c <forward>
    21f2:	a1 c0       	rjmp	.+322    	; 0x2336 <Solve_3_ways+0x1020>
            }
        }
        else if (face == west)
    21f4:	23 30       	cpi	r18, 0x03	; 3
    21f6:	09 f0       	breq	.+2      	; 0x21fa <Solve_3_ways+0xee4>
    21f8:	9e c0       	rjmp	.+316    	; 0x2336 <Solve_3_ways+0x1020>
        {
            if (trail[x_cor - 1][y_cor] == trail[x_cor][y_cor - 1])
    21fa:	f8 01       	movw	r30, r16
    21fc:	e2 95       	swap	r30
    21fe:	f2 95       	swap	r31
    2200:	f0 7f       	andi	r31, 0xF0	; 240
    2202:	fe 27       	eor	r31, r30
    2204:	e0 7f       	andi	r30, 0xF0	; 240
    2206:	fe 27       	eor	r31, r30
    2208:	e3 5b       	subi	r30, 0xB3	; 179
    220a:	fa 4f       	sbci	r31, 0xFA	; 250
    220c:	e8 0f       	add	r30, r24
    220e:	f9 1f       	adc	r31, r25
    2210:	30 81       	ld	r19, Z
    2212:	fa 01       	movw	r30, r20
    2214:	e2 95       	swap	r30
    2216:	f2 95       	swap	r31
    2218:	f0 7f       	andi	r31, 0xF0	; 240
    221a:	fe 27       	eor	r31, r30
    221c:	e0 7f       	andi	r30, 0xF0	; 240
    221e:	fe 27       	eor	r31, r30
    2220:	e3 5b       	subi	r30, 0xB3	; 179
    2222:	fa 4f       	sbci	r31, 0xFA	; 250
    2224:	e6 0f       	add	r30, r22
    2226:	f7 1f       	adc	r31, r23
    2228:	20 81       	ld	r18, Z
    222a:	32 13       	cpse	r19, r18
    222c:	79 c0       	rjmp	.+242    	; 0x2320 <Solve_3_ways+0x100a>
            {
                if (((x_cor - 1) + (y_cor)) < ((x_cor) + (y_cor - 1)))
    222e:	80 0f       	add	r24, r16
    2230:	91 1f       	adc	r25, r17
    2232:	46 0f       	add	r20, r22
    2234:	57 1f       	adc	r21, r23
    2236:	84 17       	cp	r24, r20
    2238:	95 07       	cpc	r25, r21
    223a:	14 f4       	brge	.+4      	; 0x2240 <Solve_3_ways+0xf2a>
                {
                    forward();
    223c:	0e 94 9e 12 	call	0x253c	; 0x253c <forward>
                }
                if (((x_cor - 1) + (y_cor)) > ((x_cor) + (y_cor - 1)))
    2240:	b0 91 4d 06 	lds	r27, 0x064D	; 0x80064d <x_cor>
    2244:	6b 2f       	mov	r22, r27
    2246:	70 e0       	ldi	r23, 0x00	; 0
    2248:	eb 01       	movw	r28, r22
    224a:	21 97       	sbiw	r28, 0x01	; 1
    224c:	a0 91 48 03 	lds	r26, 0x0348	; 0x800348 <y_cor>
    2250:	8a 2f       	mov	r24, r26
    2252:	90 e0       	ldi	r25, 0x00	; 0
    2254:	fe 01       	movw	r30, r28
    2256:	e8 0f       	add	r30, r24
    2258:	f9 1f       	adc	r31, r25
    225a:	ac 01       	movw	r20, r24
    225c:	41 50       	subi	r20, 0x01	; 1
    225e:	51 09       	sbc	r21, r1
    2260:	9b 01       	movw	r18, r22
    2262:	24 0f       	add	r18, r20
    2264:	35 1f       	adc	r19, r21
    2266:	2e 17       	cp	r18, r30
    2268:	3f 07       	cpc	r19, r31
    226a:	2c f4       	brge	.+10     	; 0x2276 <Solve_3_ways+0xf60>
                {
                    rotate_left();
    226c:	0e 94 0c 12 	call	0x2418	; 0x2418 <rotate_left>
                    forward();
    2270:	0e 94 9e 12 	call	0x253c	; 0x253c <forward>
    2274:	60 c0       	rjmp	.+192    	; 0x2336 <Solve_3_ways+0x1020>
                }
                else
                {
                    if ((Blocking_V_Walls[x_cor - 1][y_cor] + Blocking_H_Walls[x_cor - 1][y_cor]) < (Blocking_V_Walls[x_cor][y_cor - 1] + Blocking_H_Walls[x_cor][y_cor - 1]))
    2276:	fe 01       	movw	r30, r28
    2278:	e2 95       	swap	r30
    227a:	f2 95       	swap	r31
    227c:	f0 7f       	andi	r31, 0xF0	; 240
    227e:	fe 27       	eor	r31, r30
    2280:	e0 7f       	andi	r30, 0xF0	; 240
    2282:	fe 27       	eor	r31, r30
    2284:	e2 5e       	subi	r30, 0xE2	; 226
    2286:	fd 4f       	sbci	r31, 0xFD	; 253
    2288:	e8 0f       	add	r30, r24
    228a:	f9 1f       	adc	r31, r25
    228c:	e0 81       	ld	r30, Z
    228e:	11 e1       	ldi	r17, 0x11	; 17
    2290:	1c 9f       	mul	r17, r28
    2292:	90 01       	movw	r18, r0
    2294:	1d 9f       	mul	r17, r29
    2296:	30 0d       	add	r19, r0
    2298:	11 24       	eor	r1, r1
    229a:	22 5f       	subi	r18, 0xF2	; 242
    229c:	3e 4f       	sbci	r19, 0xFE	; 254
    229e:	e9 01       	movw	r28, r18
    22a0:	c8 0f       	add	r28, r24
    22a2:	d9 1f       	adc	r29, r25
    22a4:	28 81       	ld	r18, Y
    22a6:	30 e0       	ldi	r19, 0x00	; 0
    22a8:	2e 0f       	add	r18, r30
    22aa:	31 1d       	adc	r19, r1
    22ac:	fb 01       	movw	r30, r22
    22ae:	e2 95       	swap	r30
    22b0:	f2 95       	swap	r31
    22b2:	f0 7f       	andi	r31, 0xF0	; 240
    22b4:	fe 27       	eor	r31, r30
    22b6:	e0 7f       	andi	r30, 0xF0	; 240
    22b8:	fe 27       	eor	r31, r30
    22ba:	e2 5e       	subi	r30, 0xE2	; 226
    22bc:	fd 4f       	sbci	r31, 0xFD	; 253
    22be:	e4 0f       	add	r30, r20
    22c0:	f5 1f       	adc	r31, r21
    22c2:	e0 81       	ld	r30, Z
    22c4:	16 9f       	mul	r17, r22
    22c6:	c0 01       	movw	r24, r0
    22c8:	17 9f       	mul	r17, r23
    22ca:	90 0d       	add	r25, r0
    22cc:	11 24       	eor	r1, r1
    22ce:	82 5f       	subi	r24, 0xF2	; 242
    22d0:	9e 4f       	sbci	r25, 0xFE	; 254
    22d2:	ec 01       	movw	r28, r24
    22d4:	c4 0f       	add	r28, r20
    22d6:	d5 1f       	adc	r29, r21
    22d8:	88 81       	ld	r24, Y
    22da:	90 e0       	ldi	r25, 0x00	; 0
    22dc:	8e 0f       	add	r24, r30
    22de:	91 1d       	adc	r25, r1
    22e0:	28 17       	cp	r18, r24
    22e2:	39 07       	cpc	r19, r25
    22e4:	1c f4       	brge	.+6      	; 0x22ec <Solve_3_ways+0xfd6>
                    {
                        forward();
    22e6:	0e 94 9e 12 	call	0x253c	; 0x253c <forward>
    22ea:	25 c0       	rjmp	.+74     	; 0x2336 <Solve_3_ways+0x1020>
                    }
                    else if ((Blocking_V_Walls[x_cor - 1][y_cor] + Blocking_H_Walls[x_cor - 1][y_cor]) > (Blocking_V_Walls[x_cor][y_cor - 1] + Blocking_H_Walls[x_cor][y_cor - 1]))
    22ec:	82 17       	cp	r24, r18
    22ee:	93 07       	cpc	r25, r19
    22f0:	2c f4       	brge	.+10     	; 0x22fc <Solve_3_ways+0xfe6>
                    {
                        rotate_left();
    22f2:	0e 94 0c 12 	call	0x2418	; 0x2418 <rotate_left>
                        forward();
    22f6:	0e 94 9e 12 	call	0x253c	; 0x253c <forward>
    22fa:	1d c0       	rjmp	.+58     	; 0x2336 <Solve_3_ways+0x1020>
                    }
                    else
                    {
                        // north west quarter
                        if (x_cor <= x_fin && y_cor >= y_fin)
    22fc:	b9 30       	cpi	r27, 0x09	; 9
    22fe:	68 f4       	brcc	.+26     	; 0x231a <Solve_3_ways+0x1004>
    2300:	a8 30       	cpi	r26, 0x08	; 8
    2302:	58 f0       	brcs	.+22     	; 0x231a <Solve_3_ways+0x1004>
                        {
                            if (pot_south < pot_west)
    2304:	90 91 4f 07 	lds	r25, 0x074F	; 0x80074f <pot_south>
    2308:	80 91 52 07 	lds	r24, 0x0752	; 0x800752 <pot_west>
    230c:	98 17       	cp	r25, r24
    230e:	98 f4       	brcc	.+38     	; 0x2336 <Solve_3_ways+0x1020>
                            {
                                rotate_left();
    2310:	0e 94 0c 12 	call	0x2418	; 0x2418 <rotate_left>
                                forward();
    2314:	0e 94 9e 12 	call	0x253c	; 0x253c <forward>
    2318:	0e c0       	rjmp	.+28     	; 0x2336 <Solve_3_ways+0x1020>
                            }
                        }
                        else
                        {
                            forward();
    231a:	0e 94 9e 12 	call	0x253c	; 0x253c <forward>
    231e:	0b c0       	rjmp	.+22     	; 0x2336 <Solve_3_ways+0x1020>
                        }
                    }
                }
            }
            else if (trail[x_cor][y_cor - 1] < trail[x_cor - 1][y_cor]) // moved in the right cell before?
    2320:	23 17       	cp	r18, r19
    2322:	28 f4       	brcc	.+10     	; 0x232e <Solve_3_ways+0x1018>
            {
                rotate_left();
    2324:	0e 94 0c 12 	call	0x2418	; 0x2418 <rotate_left>
                forward();
    2328:	0e 94 9e 12 	call	0x253c	; 0x253c <forward>
    232c:	04 c0       	rjmp	.+8      	; 0x2336 <Solve_3_ways+0x1020>
            }
            else if (trail[x_cor - 1][y_cor] < trail[x_cor][y_cor - 1]) // moved in the leading cell before?
    232e:	32 17       	cp	r19, r18
    2330:	10 f4       	brcc	.+4      	; 0x2336 <Solve_3_ways+0x1020>
            {
                forward();
    2332:	0e 94 9e 12 	call	0x253c	; 0x253c <forward>
            }
        }
    }
}
    2336:	df 91       	pop	r29
    2338:	cf 91       	pop	r28
    233a:	1f 91       	pop	r17
    233c:	0f 91       	pop	r16
    233e:	ff 90       	pop	r15
    2340:	ef 90       	pop	r14
    2342:	df 90       	pop	r13
    2344:	08 95       	ret

00002346 <Find_Lowest_Path>:
{
    // Calculate potential field values for neighboring cells based on the current face
    // Access the array elements if within bounds

    // to be checked ----> change 0 to some thing
    trail_north = (y_cor + 1 < ROWS) ? trail[x_cor][y_cor + 1] : 0;
    2346:	20 91 48 03 	lds	r18, 0x0348	; 0x800348 <y_cor>
    234a:	30 e0       	ldi	r19, 0x00	; 0
    234c:	c9 01       	movw	r24, r18
    234e:	01 96       	adiw	r24, 0x01	; 1
    2350:	80 31       	cpi	r24, 0x10	; 16
    2352:	91 05       	cpc	r25, r1
    2354:	6c f4       	brge	.+26     	; 0x2370 <Find_Lowest_Path+0x2a>
    2356:	40 91 4d 06 	lds	r20, 0x064D	; 0x80064d <x_cor>
    235a:	60 e1       	ldi	r22, 0x10	; 16
    235c:	46 9f       	mul	r20, r22
    235e:	a0 01       	movw	r20, r0
    2360:	11 24       	eor	r1, r1
    2362:	43 5b       	subi	r20, 0xB3	; 179
    2364:	5a 4f       	sbci	r21, 0xFA	; 250
    2366:	fa 01       	movw	r30, r20
    2368:	e8 0f       	add	r30, r24
    236a:	f9 1f       	adc	r31, r25
    236c:	80 81       	ld	r24, Z
    236e:	01 c0       	rjmp	.+2      	; 0x2372 <Find_Lowest_Path+0x2c>
    2370:	80 e0       	ldi	r24, 0x00	; 0
    2372:	80 93 53 07 	sts	0x0753, r24	; 0x800753 <trail_north>
    trail_east = (x_cor + 1 < COLS) ? trail[x_cor + 1][y_cor] : 0;
    2376:	80 91 4d 06 	lds	r24, 0x064D	; 0x80064d <x_cor>
    237a:	90 e0       	ldi	r25, 0x00	; 0
    237c:	ac 01       	movw	r20, r24
    237e:	4f 5f       	subi	r20, 0xFF	; 255
    2380:	5f 4f       	sbci	r21, 0xFF	; 255
    2382:	40 31       	cpi	r20, 0x10	; 16
    2384:	51 05       	cpc	r21, r1
    2386:	6c f4       	brge	.+26     	; 0x23a2 <Find_Lowest_Path+0x5c>
    2388:	fa 01       	movw	r30, r20
    238a:	e2 95       	swap	r30
    238c:	f2 95       	swap	r31
    238e:	f0 7f       	andi	r31, 0xF0	; 240
    2390:	fe 27       	eor	r31, r30
    2392:	e0 7f       	andi	r30, 0xF0	; 240
    2394:	fe 27       	eor	r31, r30
    2396:	e3 5b       	subi	r30, 0xB3	; 179
    2398:	fa 4f       	sbci	r31, 0xFA	; 250
    239a:	e2 0f       	add	r30, r18
    239c:	f3 1f       	adc	r31, r19
    239e:	40 81       	ld	r20, Z
    23a0:	01 c0       	rjmp	.+2      	; 0x23a4 <Find_Lowest_Path+0x5e>
    23a2:	40 e0       	ldi	r20, 0x00	; 0
    23a4:	40 93 56 07 	sts	0x0756, r20	; 0x800756 <trail_east>
    trail_south = (y_cor - 1 >= 0) ? trail[x_cor][y_cor - 1] : 0;
    23a8:	a9 01       	movw	r20, r18
    23aa:	41 50       	subi	r20, 0x01	; 1
    23ac:	51 09       	sbc	r21, r1
    23ae:	72 f0       	brmi	.+28     	; 0x23cc <Find_Lowest_Path+0x86>
    23b0:	bc 01       	movw	r22, r24
    23b2:	62 95       	swap	r22
    23b4:	72 95       	swap	r23
    23b6:	70 7f       	andi	r23, 0xF0	; 240
    23b8:	76 27       	eor	r23, r22
    23ba:	60 7f       	andi	r22, 0xF0	; 240
    23bc:	76 27       	eor	r23, r22
    23be:	63 5b       	subi	r22, 0xB3	; 179
    23c0:	7a 4f       	sbci	r23, 0xFA	; 250
    23c2:	fb 01       	movw	r30, r22
    23c4:	e4 0f       	add	r30, r20
    23c6:	f5 1f       	adc	r31, r21
    23c8:	40 81       	ld	r20, Z
    23ca:	01 c0       	rjmp	.+2      	; 0x23ce <Find_Lowest_Path+0x88>
    23cc:	40 e0       	ldi	r20, 0x00	; 0
    23ce:	40 93 51 07 	sts	0x0751, r20	; 0x800751 <trail_south>
    trail_west = (x_cor - 1 >= 0) ? trail[x_cor - 1][y_cor] : 0;
    23d2:	01 97       	sbiw	r24, 0x01	; 1
    23d4:	6a f0       	brmi	.+26     	; 0x23f0 <Find_Lowest_Path+0xaa>
    23d6:	82 95       	swap	r24
    23d8:	92 95       	swap	r25
    23da:	90 7f       	andi	r25, 0xF0	; 240
    23dc:	98 27       	eor	r25, r24
    23de:	80 7f       	andi	r24, 0xF0	; 240
    23e0:	98 27       	eor	r25, r24
    23e2:	83 5b       	subi	r24, 0xB3	; 179
    23e4:	9a 4f       	sbci	r25, 0xFA	; 250
    23e6:	fc 01       	movw	r30, r24
    23e8:	e2 0f       	add	r30, r18
    23ea:	f3 1f       	adc	r31, r19
    23ec:	80 81       	ld	r24, Z
    23ee:	01 c0       	rjmp	.+2      	; 0x23f2 <Find_Lowest_Path+0xac>
    23f0:	80 e0       	ldi	r24, 0x00	; 0
    23f2:	80 93 55 07 	sts	0x0755, r24	; 0x800755 <trail_west>

    if (decision == 2)
    23f6:	80 91 4b 03 	lds	r24, 0x034B	; 0x80034b <decision>
    23fa:	82 30       	cpi	r24, 0x02	; 2
    23fc:	19 f4       	brne	.+6      	; 0x2404 <Find_Lowest_Path+0xbe>
    {
        oneway();
    23fe:	0e 94 a3 15 	call	0x2b46	; 0x2b46 <oneway>
    2402:	08 95       	ret
    }
    else if (decision == 1)
    2404:	81 30       	cpi	r24, 0x01	; 1
    2406:	19 f4       	brne	.+6      	; 0x240e <Find_Lowest_Path+0xc8>
    {
        Solve_2_ways();
    2408:	0e 94 3d 02 	call	0x47a	; 0x47a <Solve_2_ways>
    240c:	08 95       	ret
    }
    else if (decision == 3)
    240e:	83 30       	cpi	r24, 0x03	; 3
    2410:	11 f4       	brne	.+4      	; 0x2416 <Find_Lowest_Path+0xd0>
    {
        Solve_3_ways();
    2412:	0e 94 8b 09 	call	0x1316	; 0x1316 <Solve_3_ways>
    2416:	08 95       	ret

00002418 <rotate_left>:

// Rotate 90 degrees counterclockwise
void rotate_left()
{
    // Reset the tick counters for motor rotation
    GIE_disable();
    2418:	0e 94 5c 21 	call	0x42b8	; 0x42b8 <GIE_disable>
    ticks_l = 0;
    241c:	10 92 06 01 	sts	0x0106, r1	; 0x800106 <ticks_l>
    2420:	10 92 07 01 	sts	0x0107, r1	; 0x800107 <ticks_l+0x1>
    2424:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <ticks_l+0x2>
    2428:	10 92 09 01 	sts	0x0109, r1	; 0x800109 <ticks_l+0x3>
    ticks_r = 0;
    242c:	10 92 0a 01 	sts	0x010A, r1	; 0x80010a <ticks_r>
    2430:	10 92 0b 01 	sts	0x010B, r1	; 0x80010b <ticks_r+0x1>
    2434:	10 92 0c 01 	sts	0x010C, r1	; 0x80010c <ticks_r+0x2>
    2438:	10 92 0d 01 	sts	0x010D, r1	; 0x80010d <ticks_r+0x3>
    GIE_enable();
    243c:	0e 94 58 21 	call	0x42b0	; 0x42b0 <GIE_enable>
    // Rotate the micromouse 90 degrees (20 ticks per 90 degrees)
    while ((ticks_r < (Full_cycle / 4)) || (ticks_l < (Full_cycle / 4)))
    2440:	03 c0       	rjmp	.+6      	; 0x2448 <rotate_left+0x30>
    {
        // Use the PID controller to control the left wheel's motion
        PID_Controller(LEFT);
    2442:	83 e0       	ldi	r24, 0x03	; 3
    2444:	0e 94 9a 1f 	call	0x3f34	; 0x3f34 <PID_Controller>
    GIE_disable();
    ticks_l = 0;
    ticks_r = 0;
    GIE_enable();
    // Rotate the micromouse 90 degrees (20 ticks per 90 degrees)
    while ((ticks_r < (Full_cycle / 4)) || (ticks_l < (Full_cycle / 4)))
    2448:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <ticks_r>
    244c:	90 91 0b 01 	lds	r25, 0x010B	; 0x80010b <ticks_r+0x1>
    2450:	a0 91 0c 01 	lds	r26, 0x010C	; 0x80010c <ticks_r+0x2>
    2454:	b0 91 0d 01 	lds	r27, 0x010D	; 0x80010d <ticks_r+0x3>
    2458:	47 97       	sbiw	r24, 0x17	; 23
    245a:	a1 05       	cpc	r26, r1
    245c:	b1 05       	cpc	r27, r1
    245e:	88 f3       	brcs	.-30     	; 0x2442 <rotate_left+0x2a>
    2460:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <ticks_l>
    2464:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <ticks_l+0x1>
    2468:	a0 91 08 01 	lds	r26, 0x0108	; 0x800108 <ticks_l+0x2>
    246c:	b0 91 09 01 	lds	r27, 0x0109	; 0x800109 <ticks_l+0x3>
    2470:	47 97       	sbiw	r24, 0x17	; 23
    2472:	a1 05       	cpc	r26, r1
    2474:	b1 05       	cpc	r27, r1
    2476:	28 f3       	brcs	.-54     	; 0x2442 <rotate_left+0x2a>
        // Use the PID controller to control the left wheel's motion
        PID_Controller(LEFT);
    }

    // Update the facing direction based on the rotation
    switch (face)
    2478:	80 91 49 03 	lds	r24, 0x0349	; 0x800349 <face>
    247c:	81 30       	cpi	r24, 0x01	; 1
    247e:	91 f0       	breq	.+36     	; 0x24a4 <rotate_left+0x8c>
    2480:	28 f0       	brcs	.+10     	; 0x248c <rotate_left+0x74>
    2482:	82 30       	cpi	r24, 0x02	; 2
    2484:	59 f0       	breq	.+22     	; 0x249c <rotate_left+0x84>
    2486:	83 30       	cpi	r24, 0x03	; 3
    2488:	29 f0       	breq	.+10     	; 0x2494 <rotate_left+0x7c>
    248a:	08 95       	ret
    {
    case north:
        face = west;
    248c:	83 e0       	ldi	r24, 0x03	; 3
    248e:	80 93 49 03 	sts	0x0349, r24	; 0x800349 <face>
        break;
    2492:	08 95       	ret
    case west:
        face = south;
    2494:	82 e0       	ldi	r24, 0x02	; 2
    2496:	80 93 49 03 	sts	0x0349, r24	; 0x800349 <face>
        break;
    249a:	08 95       	ret
    case south:
        face = east;
    249c:	81 e0       	ldi	r24, 0x01	; 1
    249e:	80 93 49 03 	sts	0x0349, r24	; 0x800349 <face>
        break;
    24a2:	08 95       	ret
    case east:
        face = north;
    24a4:	10 92 49 03 	sts	0x0349, r1	; 0x800349 <face>
    24a8:	08 95       	ret

000024aa <rotate_right>:

// Rotate 90 degrees clockwise
void rotate_right()
{
    // Reset the tick counters for motor rotation
    GIE_disable();
    24aa:	0e 94 5c 21 	call	0x42b8	; 0x42b8 <GIE_disable>
    ticks_l = 0;
    24ae:	10 92 06 01 	sts	0x0106, r1	; 0x800106 <ticks_l>
    24b2:	10 92 07 01 	sts	0x0107, r1	; 0x800107 <ticks_l+0x1>
    24b6:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <ticks_l+0x2>
    24ba:	10 92 09 01 	sts	0x0109, r1	; 0x800109 <ticks_l+0x3>
    ticks_r = 0;
    24be:	10 92 0a 01 	sts	0x010A, r1	; 0x80010a <ticks_r>
    24c2:	10 92 0b 01 	sts	0x010B, r1	; 0x80010b <ticks_r+0x1>
    24c6:	10 92 0c 01 	sts	0x010C, r1	; 0x80010c <ticks_r+0x2>
    24ca:	10 92 0d 01 	sts	0x010D, r1	; 0x80010d <ticks_r+0x3>
    GIE_enable();
    24ce:	0e 94 58 21 	call	0x42b0	; 0x42b0 <GIE_enable>
    // Rotate the micromouse 90 degrees (20 ticks per 90 degrees)
    while ((ticks_r < (Full_cycle / 4)) || (ticks_l < (Full_cycle / 4)))
    24d2:	03 c0       	rjmp	.+6      	; 0x24da <rotate_right+0x30>
    {
        // Use the PID controller to control the right wheel's motion
        PID_Controller(RIGHT);
    24d4:	82 e0       	ldi	r24, 0x02	; 2
    24d6:	0e 94 9a 1f 	call	0x3f34	; 0x3f34 <PID_Controller>
    GIE_disable();
    ticks_l = 0;
    ticks_r = 0;
    GIE_enable();
    // Rotate the micromouse 90 degrees (20 ticks per 90 degrees)
    while ((ticks_r < (Full_cycle / 4)) || (ticks_l < (Full_cycle / 4)))
    24da:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <ticks_r>
    24de:	90 91 0b 01 	lds	r25, 0x010B	; 0x80010b <ticks_r+0x1>
    24e2:	a0 91 0c 01 	lds	r26, 0x010C	; 0x80010c <ticks_r+0x2>
    24e6:	b0 91 0d 01 	lds	r27, 0x010D	; 0x80010d <ticks_r+0x3>
    24ea:	47 97       	sbiw	r24, 0x17	; 23
    24ec:	a1 05       	cpc	r26, r1
    24ee:	b1 05       	cpc	r27, r1
    24f0:	88 f3       	brcs	.-30     	; 0x24d4 <rotate_right+0x2a>
    24f2:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <ticks_l>
    24f6:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <ticks_l+0x1>
    24fa:	a0 91 08 01 	lds	r26, 0x0108	; 0x800108 <ticks_l+0x2>
    24fe:	b0 91 09 01 	lds	r27, 0x0109	; 0x800109 <ticks_l+0x3>
    2502:	47 97       	sbiw	r24, 0x17	; 23
    2504:	a1 05       	cpc	r26, r1
    2506:	b1 05       	cpc	r27, r1
    2508:	28 f3       	brcs	.-54     	; 0x24d4 <rotate_right+0x2a>
        // Use the PID controller to control the right wheel's motion
        PID_Controller(RIGHT);
    }

    // Update the facing direction based on the rotation
    switch (face)
    250a:	80 91 49 03 	lds	r24, 0x0349	; 0x800349 <face>
    250e:	81 30       	cpi	r24, 0x01	; 1
    2510:	51 f0       	breq	.+20     	; 0x2526 <rotate_right+0x7c>
    2512:	28 f0       	brcs	.+10     	; 0x251e <rotate_right+0x74>
    2514:	82 30       	cpi	r24, 0x02	; 2
    2516:	59 f0       	breq	.+22     	; 0x252e <rotate_right+0x84>
    2518:	83 30       	cpi	r24, 0x03	; 3
    251a:	69 f0       	breq	.+26     	; 0x2536 <rotate_right+0x8c>
    251c:	08 95       	ret
    {
    case north:
        face = east;
    251e:	81 e0       	ldi	r24, 0x01	; 1
    2520:	80 93 49 03 	sts	0x0349, r24	; 0x800349 <face>
        break;
    2524:	08 95       	ret
    case east:
        face = south;
    2526:	82 e0       	ldi	r24, 0x02	; 2
    2528:	80 93 49 03 	sts	0x0349, r24	; 0x800349 <face>
        break;
    252c:	08 95       	ret
    case south:
        face = west;
    252e:	83 e0       	ldi	r24, 0x03	; 3
    2530:	80 93 49 03 	sts	0x0349, r24	; 0x800349 <face>
        break;
    2534:	08 95       	ret
    case west:
        face = north;
    2536:	10 92 49 03 	sts	0x0349, r1	; 0x800349 <face>
    253a:	08 95       	ret

0000253c <forward>:

// Move forward one cell (92 ticks)
void forward()
{
    // Increment the trail marker for the current cell
    if (isNavigating)
    253c:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
    2540:	88 23       	and	r24, r24
    2542:	09 f4       	brne	.+2      	; 0x2546 <forward+0xa>
    2544:	70 c0       	rjmp	.+224    	; 0x2626 <forward+0xea>
    {
        if (Navegating_times == DONE_Navigating)
    2546:	80 91 2e 03 	lds	r24, 0x032E	; 0x80032e <Navegating_times>
    254a:	83 30       	cpi	r24, 0x03	; 3
    254c:	19 f5       	brne	.+70     	; 0x2594 <forward+0x58>
        {
            trail[x_cor][y_cor] == 0;
    254e:	20 91 4d 06 	lds	r18, 0x064D	; 0x80064d <x_cor>
    2552:	30 e0       	ldi	r19, 0x00	; 0
    2554:	40 91 48 03 	lds	r20, 0x0348	; 0x800348 <y_cor>
    2558:	50 e0       	ldi	r21, 0x00	; 0
            EEPROM_write(x_cor * 10 + y_cor, trail[x_cor][y_cor]);
    255a:	b9 01       	movw	r22, r18
    255c:	66 0f       	add	r22, r22
    255e:	77 1f       	adc	r23, r23
    2560:	c9 01       	movw	r24, r18
    2562:	88 0f       	add	r24, r24
    2564:	99 1f       	adc	r25, r25
    2566:	88 0f       	add	r24, r24
    2568:	99 1f       	adc	r25, r25
    256a:	88 0f       	add	r24, r24
    256c:	99 1f       	adc	r25, r25
    256e:	86 0f       	add	r24, r22
    2570:	97 1f       	adc	r25, r23
    2572:	f9 01       	movw	r30, r18
    2574:	e2 95       	swap	r30
    2576:	f2 95       	swap	r31
    2578:	f0 7f       	andi	r31, 0xF0	; 240
    257a:	fe 27       	eor	r31, r30
    257c:	e0 7f       	andi	r30, 0xF0	; 240
    257e:	fe 27       	eor	r31, r30
    2580:	e3 5b       	subi	r30, 0xB3	; 179
    2582:	fa 4f       	sbci	r31, 0xFA	; 250
    2584:	e4 0f       	add	r30, r20
    2586:	f5 1f       	adc	r31, r21
    2588:	60 81       	ld	r22, Z
    258a:	84 0f       	add	r24, r20
    258c:	95 1f       	adc	r25, r21
    258e:	0e 94 e1 20 	call	0x41c2	; 0x41c2 <EEPROM_write>
    2592:	49 c0       	rjmp	.+146    	; 0x2626 <forward+0xea>
        }
        else
        {
            if (x_cor != 0 && y_cor != 0)
    2594:	20 91 4d 06 	lds	r18, 0x064D	; 0x80064d <x_cor>
    2598:	22 23       	and	r18, r18
    259a:	21 f1       	breq	.+72     	; 0x25e4 <forward+0xa8>
    259c:	80 91 48 03 	lds	r24, 0x0348	; 0x800348 <y_cor>
    25a0:	88 23       	and	r24, r24
    25a2:	01 f1       	breq	.+64     	; 0x25e4 <forward+0xa8>
            {
                trail[x_cor][y_cor]++;
    25a4:	30 e0       	ldi	r19, 0x00	; 0
    25a6:	90 e0       	ldi	r25, 0x00	; 0
    25a8:	f9 01       	movw	r30, r18
    25aa:	e2 95       	swap	r30
    25ac:	f2 95       	swap	r31
    25ae:	f0 7f       	andi	r31, 0xF0	; 240
    25b0:	fe 27       	eor	r31, r30
    25b2:	e0 7f       	andi	r30, 0xF0	; 240
    25b4:	fe 27       	eor	r31, r30
    25b6:	e3 5b       	subi	r30, 0xB3	; 179
    25b8:	fa 4f       	sbci	r31, 0xFA	; 250
    25ba:	e8 0f       	add	r30, r24
    25bc:	f9 1f       	adc	r31, r25
    25be:	60 81       	ld	r22, Z
    25c0:	6f 5f       	subi	r22, 0xFF	; 255
    25c2:	60 83       	st	Z, r22
                EEPROM_write(x_cor * 10 + y_cor, trail[x_cor][y_cor]);
    25c4:	a9 01       	movw	r20, r18
    25c6:	44 0f       	add	r20, r20
    25c8:	55 1f       	adc	r21, r21
    25ca:	22 0f       	add	r18, r18
    25cc:	33 1f       	adc	r19, r19
    25ce:	22 0f       	add	r18, r18
    25d0:	33 1f       	adc	r19, r19
    25d2:	22 0f       	add	r18, r18
    25d4:	33 1f       	adc	r19, r19
    25d6:	24 0f       	add	r18, r20
    25d8:	35 1f       	adc	r19, r21
    25da:	82 0f       	add	r24, r18
    25dc:	93 1f       	adc	r25, r19
    25de:	0e 94 e1 20 	call	0x41c2	; 0x41c2 <EEPROM_write>
    25e2:	21 c0       	rjmp	.+66     	; 0x2626 <forward+0xea>
            }
            else
            {
                trail[x_cor][y_cor] = 255;
    25e4:	30 e0       	ldi	r19, 0x00	; 0
    25e6:	80 91 48 03 	lds	r24, 0x0348	; 0x800348 <y_cor>
    25ea:	90 e0       	ldi	r25, 0x00	; 0
    25ec:	f9 01       	movw	r30, r18
    25ee:	e2 95       	swap	r30
    25f0:	f2 95       	swap	r31
    25f2:	f0 7f       	andi	r31, 0xF0	; 240
    25f4:	fe 27       	eor	r31, r30
    25f6:	e0 7f       	andi	r30, 0xF0	; 240
    25f8:	fe 27       	eor	r31, r30
    25fa:	e3 5b       	subi	r30, 0xB3	; 179
    25fc:	fa 4f       	sbci	r31, 0xFA	; 250
    25fe:	e8 0f       	add	r30, r24
    2600:	f9 1f       	adc	r31, r25
    2602:	4f ef       	ldi	r20, 0xFF	; 255
    2604:	40 83       	st	Z, r20
                EEPROM_write(x_cor * 10 + y_cor, trail[x_cor][y_cor]);
    2606:	a9 01       	movw	r20, r18
    2608:	44 0f       	add	r20, r20
    260a:	55 1f       	adc	r21, r21
    260c:	22 0f       	add	r18, r18
    260e:	33 1f       	adc	r19, r19
    2610:	22 0f       	add	r18, r18
    2612:	33 1f       	adc	r19, r19
    2614:	22 0f       	add	r18, r18
    2616:	33 1f       	adc	r19, r19
    2618:	24 0f       	add	r18, r20
    261a:	35 1f       	adc	r19, r21
    261c:	6f ef       	ldi	r22, 0xFF	; 255
    261e:	82 0f       	add	r24, r18
    2620:	93 1f       	adc	r25, r19
    2622:	0e 94 e1 20 	call	0x41c2	; 0x41c2 <EEPROM_write>
        }
    }

    // Reset encoder counts for the next control iteration
    // Disable interrupts while resetting to ensure atomicity
    GIE_disable();
    2626:	0e 94 5c 21 	call	0x42b8	; 0x42b8 <GIE_disable>
    ticks_l = 0;
    262a:	10 92 06 01 	sts	0x0106, r1	; 0x800106 <ticks_l>
    262e:	10 92 07 01 	sts	0x0107, r1	; 0x800107 <ticks_l+0x1>
    2632:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <ticks_l+0x2>
    2636:	10 92 09 01 	sts	0x0109, r1	; 0x800109 <ticks_l+0x3>
    ticks_r = 0;
    263a:	10 92 0a 01 	sts	0x010A, r1	; 0x80010a <ticks_r>
    263e:	10 92 0b 01 	sts	0x010B, r1	; 0x80010b <ticks_r+0x1>
    2642:	10 92 0c 01 	sts	0x010C, r1	; 0x80010c <ticks_r+0x2>
    2646:	10 92 0d 01 	sts	0x010D, r1	; 0x80010d <ticks_r+0x3>
    GIE_enable();
    264a:	0e 94 58 21 	call	0x42b0	; 0x42b0 <GIE_enable>

    // Move the micromouse forward by 92 ticks (equivalent to one cell)
    while ((ticks_r < Full_cycle) || (ticks_l < Full_cycle))
    264e:	03 c0       	rjmp	.+6      	; 0x2656 <forward+0x11a>
    {
        // Use the PID controller to maintain forward motion
        PID_Controller(FORWARD);
    2650:	80 e0       	ldi	r24, 0x00	; 0
    2652:	0e 94 9a 1f 	call	0x3f34	; 0x3f34 <PID_Controller>
    ticks_l = 0;
    ticks_r = 0;
    GIE_enable();

    // Move the micromouse forward by 92 ticks (equivalent to one cell)
    while ((ticks_r < Full_cycle) || (ticks_l < Full_cycle))
    2656:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <ticks_r>
    265a:	90 91 0b 01 	lds	r25, 0x010B	; 0x80010b <ticks_r+0x1>
    265e:	a0 91 0c 01 	lds	r26, 0x010C	; 0x80010c <ticks_r+0x2>
    2662:	b0 91 0d 01 	lds	r27, 0x010D	; 0x80010d <ticks_r+0x3>
    2666:	8c 35       	cpi	r24, 0x5C	; 92
    2668:	91 05       	cpc	r25, r1
    266a:	a1 05       	cpc	r26, r1
    266c:	b1 05       	cpc	r27, r1
    266e:	80 f3       	brcs	.-32     	; 0x2650 <forward+0x114>
    2670:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <ticks_l>
    2674:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <ticks_l+0x1>
    2678:	a0 91 08 01 	lds	r26, 0x0108	; 0x800108 <ticks_l+0x2>
    267c:	b0 91 09 01 	lds	r27, 0x0109	; 0x800109 <ticks_l+0x3>
    2680:	8c 35       	cpi	r24, 0x5C	; 92
    2682:	91 05       	cpc	r25, r1
    2684:	a1 05       	cpc	r26, r1
    2686:	b1 05       	cpc	r27, r1
    2688:	18 f3       	brcs	.-58     	; 0x2650 <forward+0x114>
        PID_Controller(FORWARD);
    }

    // Update the micromouse's coordinates based on the facing direction

    if (face == north)
    268a:	80 91 49 03 	lds	r24, 0x0349	; 0x800349 <face>
    268e:	81 11       	cpse	r24, r1
    2690:	06 c0       	rjmp	.+12     	; 0x269e <forward+0x162>
        y_cor++;
    2692:	80 91 48 03 	lds	r24, 0x0348	; 0x800348 <y_cor>
    2696:	8f 5f       	subi	r24, 0xFF	; 255
    2698:	80 93 48 03 	sts	0x0348, r24	; 0x800348 <y_cor>
    269c:	08 95       	ret
    else if (face == east)
    269e:	81 30       	cpi	r24, 0x01	; 1
    26a0:	31 f4       	brne	.+12     	; 0x26ae <forward+0x172>
        x_cor++;
    26a2:	80 91 4d 06 	lds	r24, 0x064D	; 0x80064d <x_cor>
    26a6:	8f 5f       	subi	r24, 0xFF	; 255
    26a8:	80 93 4d 06 	sts	0x064D, r24	; 0x80064d <x_cor>
    26ac:	08 95       	ret
    else if (face == south)
    26ae:	82 30       	cpi	r24, 0x02	; 2
    26b0:	31 f4       	brne	.+12     	; 0x26be <forward+0x182>
        y_cor--;
    26b2:	80 91 48 03 	lds	r24, 0x0348	; 0x800348 <y_cor>
    26b6:	81 50       	subi	r24, 0x01	; 1
    26b8:	80 93 48 03 	sts	0x0348, r24	; 0x800348 <y_cor>
    26bc:	08 95       	ret
    else if (face == west)
    26be:	83 30       	cpi	r24, 0x03	; 3
    26c0:	29 f4       	brne	.+10     	; 0x26cc <forward+0x190>
        x_cor--;
    26c2:	80 91 4d 06 	lds	r24, 0x064D	; 0x80064d <x_cor>
    26c6:	81 50       	subi	r24, 0x01	; 1
    26c8:	80 93 4d 06 	sts	0x064D, r24	; 0x80064d <x_cor>
    26cc:	08 95       	ret

000026ce <Movements>:

}

// Control the motors based on the specified movement and speeds
void Movements(uint8_t MOVING, uint8_t speed_A, uint8_t speed_B)
{
    26ce:	1f 93       	push	r17
    26d0:	cf 93       	push	r28
    26d2:	df 93       	push	r29
    26d4:	c8 2f       	mov	r28, r24
    26d6:	16 2f       	mov	r17, r22
    26d8:	d4 2f       	mov	r29, r20

    TIMER0_Start();
    26da:	0e 94 90 21 	call	0x4320	; 0x4320 <TIMER0_Start>
    TIMER1_Start();
    26de:	0e 94 9c 22 	call	0x4538	; 0x4538 <TIMER1_Start>

    switch (MOVING)
    26e2:	c1 30       	cpi	r28, 0x01	; 1
    26e4:	41 f1       	breq	.+80     	; 0x2736 <Movements+0x68>
    26e6:	38 f0       	brcs	.+14     	; 0x26f6 <Movements+0x28>
    26e8:	c2 30       	cpi	r28, 0x02	; 2
    26ea:	09 f4       	brne	.+2      	; 0x26ee <Movements+0x20>
    26ec:	51 c0       	rjmp	.+162    	; 0x2790 <Movements+0xc2>
    26ee:	c3 30       	cpi	r28, 0x03	; 3
    26f0:	09 f4       	brne	.+2      	; 0x26f4 <Movements+0x26>
    26f2:	7b c0       	rjmp	.+246    	; 0x27ea <Movements+0x11c>
    26f4:	a7 c0       	rjmp	.+334    	; 0x2844 <Movements+0x176>
    {
    case FORWARD:
        TIMER1_SetCounterValue(0);
    26f6:	80 e0       	ldi	r24, 0x00	; 0
    26f8:	90 e0       	ldi	r25, 0x00	; 0
    26fa:	0e 94 d6 22 	call	0x45ac	; 0x45ac <TIMER1_SetCounterValue>
        TIMER0_SetCounter(0);
    26fe:	80 e0       	ldi	r24, 0x00	; 0
    2700:	0e 94 a9 21 	call	0x4352	; 0x4352 <TIMER0_SetCounter>

        // Right motor
        MCAL_GPIO_WritePin(MOTOR_PORTS, Motor_A_6, LOW);
    2704:	40 e0       	ldi	r20, 0x00	; 0
    2706:	66 e0       	ldi	r22, 0x06	; 6
    2708:	70 e0       	ldi	r23, 0x00	; 0
    270a:	80 e3       	ldi	r24, 0x30	; 48
    270c:	90 e0       	ldi	r25, 0x00	; 0
    270e:	0e 94 3e 21 	call	0x427c	; 0x427c <MCAL_GPIO_WritePin>
        TIMER1_SetCompareValue(speed_A, TIMER1_SELECT_CHANNEL_A);
    2712:	60 e0       	ldi	r22, 0x00	; 0
    2714:	81 2f       	mov	r24, r17
    2716:	90 e0       	ldi	r25, 0x00	; 0
    2718:	0e 94 b4 22 	call	0x4568	; 0x4568 <TIMER1_SetCompareValue>

        // Left motor
        MCAL_GPIO_WritePin(MOTOR_PORTS, Motor_B_3, LOW);
    271c:	40 e0       	ldi	r20, 0x00	; 0
    271e:	63 e0       	ldi	r22, 0x03	; 3
    2720:	70 e0       	ldi	r23, 0x00	; 0
    2722:	80 e3       	ldi	r24, 0x30	; 48
    2724:	90 e0       	ldi	r25, 0x00	; 0
    2726:	0e 94 3e 21 	call	0x427c	; 0x427c <MCAL_GPIO_WritePin>
        TIMER1_SetCompareValue(speed_B, TIMER1_SELECT_CHANNEL_B);
    272a:	61 e0       	ldi	r22, 0x01	; 1
    272c:	8d 2f       	mov	r24, r29
    272e:	90 e0       	ldi	r25, 0x00	; 0
    2730:	0e 94 b4 22 	call	0x4568	; 0x4568 <TIMER1_SetCompareValue>
        break;
    2734:	aa c0       	rjmp	.+340    	; 0x288a <Movements+0x1bc>

    case HALF_TURN:

        // Right motor
        MCAL_GPIO_WritePin(MOTOR_PORTS, Motor_A_6, HIGH);
    2736:	41 e0       	ldi	r20, 0x01	; 1
    2738:	66 e0       	ldi	r22, 0x06	; 6
    273a:	70 e0       	ldi	r23, 0x00	; 0
    273c:	80 e3       	ldi	r24, 0x30	; 48
    273e:	90 e0       	ldi	r25, 0x00	; 0
    2740:	0e 94 3e 21 	call	0x427c	; 0x427c <MCAL_GPIO_WritePin>
        TIMER0_CALLBACK_Overflow_INTERRUPT(MA_OVF0);
    2744:	8b e9       	ldi	r24, 0x9B	; 155
    2746:	9e e1       	ldi	r25, 0x1E	; 30
    2748:	0e 94 b3 21 	call	0x4366	; 0x4366 <TIMER0_CALLBACK_Overflow_INTERRUPT>
        TIMER0_SetCompare(speed_A);
    274c:	81 2f       	mov	r24, r17
    274e:	0e 94 9f 21 	call	0x433e	; 0x433e <TIMER0_SetCompare>
        TIMER0_CALLBACK_CompareMatch_INTERRUPT(MA_CM0);
    2752:	85 ea       	ldi	r24, 0xA5	; 165
    2754:	9e e1       	ldi	r25, 0x1E	; 30
    2756:	0e 94 b8 21 	call	0x4370	; 0x4370 <TIMER0_CALLBACK_CompareMatch_INTERRUPT>

        TIMER0_SetCounter(0);
    275a:	80 e0       	ldi	r24, 0x00	; 0
    275c:	0e 94 a9 21 	call	0x4352	; 0x4352 <TIMER0_SetCounter>
        TIMER1_SetCounterValue(0);
    2760:	80 e0       	ldi	r24, 0x00	; 0
    2762:	90 e0       	ldi	r25, 0x00	; 0
    2764:	0e 94 d6 22 	call	0x45ac	; 0x45ac <TIMER1_SetCounterValue>

        // CustomPWM(speed_A, Motor_A_6, MOTOR_PORTS);
        MCAL_GPIO_WritePin(MOTOR_PORTS, Motor_A_5, LOW);
    2768:	40 e0       	ldi	r20, 0x00	; 0
    276a:	65 e0       	ldi	r22, 0x05	; 5
    276c:	70 e0       	ldi	r23, 0x00	; 0
    276e:	80 e3       	ldi	r24, 0x30	; 48
    2770:	90 e0       	ldi	r25, 0x00	; 0
    2772:	0e 94 3e 21 	call	0x427c	; 0x427c <MCAL_GPIO_WritePin>

        // Left motor
        MCAL_GPIO_WritePin(MOTOR_PORTS, Motor_B_3, LOW);
    2776:	40 e0       	ldi	r20, 0x00	; 0
    2778:	63 e0       	ldi	r22, 0x03	; 3
    277a:	70 e0       	ldi	r23, 0x00	; 0
    277c:	80 e3       	ldi	r24, 0x30	; 48
    277e:	90 e0       	ldi	r25, 0x00	; 0
    2780:	0e 94 3e 21 	call	0x427c	; 0x427c <MCAL_GPIO_WritePin>
        TIMER1_SetCompareValue(speed_B, TIMER1_SELECT_CHANNEL_B);
    2784:	61 e0       	ldi	r22, 0x01	; 1
    2786:	8d 2f       	mov	r24, r29
    2788:	90 e0       	ldi	r25, 0x00	; 0
    278a:	0e 94 b4 22 	call	0x4568	; 0x4568 <TIMER1_SetCompareValue>
        break;
    278e:	7d c0       	rjmp	.+250    	; 0x288a <Movements+0x1bc>

    case RIGHT:
        // Right motor
        MCAL_GPIO_WritePin(MOTOR_PORTS, Motor_A_6, HIGH);
    2790:	41 e0       	ldi	r20, 0x01	; 1
    2792:	66 e0       	ldi	r22, 0x06	; 6
    2794:	70 e0       	ldi	r23, 0x00	; 0
    2796:	80 e3       	ldi	r24, 0x30	; 48
    2798:	90 e0       	ldi	r25, 0x00	; 0
    279a:	0e 94 3e 21 	call	0x427c	; 0x427c <MCAL_GPIO_WritePin>
        TIMER0_CALLBACK_Overflow_INTERRUPT(MA_OVF0);
    279e:	8b e9       	ldi	r24, 0x9B	; 155
    27a0:	9e e1       	ldi	r25, 0x1E	; 30
    27a2:	0e 94 b3 21 	call	0x4366	; 0x4366 <TIMER0_CALLBACK_Overflow_INTERRUPT>
        TIMER0_SetCompare(speed_A);
    27a6:	81 2f       	mov	r24, r17
    27a8:	0e 94 9f 21 	call	0x433e	; 0x433e <TIMER0_SetCompare>
        TIMER0_CALLBACK_CompareMatch_INTERRUPT(MA_CM0);
    27ac:	85 ea       	ldi	r24, 0xA5	; 165
    27ae:	9e e1       	ldi	r25, 0x1E	; 30
    27b0:	0e 94 b8 21 	call	0x4370	; 0x4370 <TIMER0_CALLBACK_CompareMatch_INTERRUPT>

        TIMER0_SetCounter(0);
    27b4:	80 e0       	ldi	r24, 0x00	; 0
    27b6:	0e 94 a9 21 	call	0x4352	; 0x4352 <TIMER0_SetCounter>
        TIMER1_SetCounterValue(0);
    27ba:	80 e0       	ldi	r24, 0x00	; 0
    27bc:	90 e0       	ldi	r25, 0x00	; 0
    27be:	0e 94 d6 22 	call	0x45ac	; 0x45ac <TIMER1_SetCounterValue>

        MCAL_GPIO_WritePin(MOTOR_PORTS, Motor_A_5, LOW);
    27c2:	40 e0       	ldi	r20, 0x00	; 0
    27c4:	65 e0       	ldi	r22, 0x05	; 5
    27c6:	70 e0       	ldi	r23, 0x00	; 0
    27c8:	80 e3       	ldi	r24, 0x30	; 48
    27ca:	90 e0       	ldi	r25, 0x00	; 0
    27cc:	0e 94 3e 21 	call	0x427c	; 0x427c <MCAL_GPIO_WritePin>

        // Left motor
        MCAL_GPIO_WritePin(MOTOR_PORTS, Motor_B_3, LOW);
    27d0:	40 e0       	ldi	r20, 0x00	; 0
    27d2:	63 e0       	ldi	r22, 0x03	; 3
    27d4:	70 e0       	ldi	r23, 0x00	; 0
    27d6:	80 e3       	ldi	r24, 0x30	; 48
    27d8:	90 e0       	ldi	r25, 0x00	; 0
    27da:	0e 94 3e 21 	call	0x427c	; 0x427c <MCAL_GPIO_WritePin>
        TIMER1_SetCompareValue(speed_B, TIMER1_SELECT_CHANNEL_B);
    27de:	61 e0       	ldi	r22, 0x01	; 1
    27e0:	8d 2f       	mov	r24, r29
    27e2:	90 e0       	ldi	r25, 0x00	; 0
    27e4:	0e 94 b4 22 	call	0x4568	; 0x4568 <TIMER1_SetCompareValue>
        break;
    27e8:	50 c0       	rjmp	.+160    	; 0x288a <Movements+0x1bc>

    case LEFT:
        // Right motor
        MCAL_GPIO_WritePin(MOTOR_PORTS, Motor_A_6, LOW);
    27ea:	40 e0       	ldi	r20, 0x00	; 0
    27ec:	66 e0       	ldi	r22, 0x06	; 6
    27ee:	70 e0       	ldi	r23, 0x00	; 0
    27f0:	80 e3       	ldi	r24, 0x30	; 48
    27f2:	90 e0       	ldi	r25, 0x00	; 0
    27f4:	0e 94 3e 21 	call	0x427c	; 0x427c <MCAL_GPIO_WritePin>
        TIMER1_SetCompareValue(speed_A, TIMER1_SELECT_CHANNEL_A);
    27f8:	60 e0       	ldi	r22, 0x00	; 0
    27fa:	81 2f       	mov	r24, r17
    27fc:	90 e0       	ldi	r25, 0x00	; 0
    27fe:	0e 94 b4 22 	call	0x4568	; 0x4568 <TIMER1_SetCompareValue>

        // Left motor
        MCAL_GPIO_WritePin(MOTOR_PORTS, Motor_B_3, HIGH);
    2802:	41 e0       	ldi	r20, 0x01	; 1
    2804:	63 e0       	ldi	r22, 0x03	; 3
    2806:	70 e0       	ldi	r23, 0x00	; 0
    2808:	80 e3       	ldi	r24, 0x30	; 48
    280a:	90 e0       	ldi	r25, 0x00	; 0
    280c:	0e 94 3e 21 	call	0x427c	; 0x427c <MCAL_GPIO_WritePin>
        TIMER0_CALLBACK_Overflow_INTERRUPT(MB_OVF0);
    2810:	80 ea       	ldi	r24, 0xA0	; 160
    2812:	9e e1       	ldi	r25, 0x1E	; 30
    2814:	0e 94 b3 21 	call	0x4366	; 0x4366 <TIMER0_CALLBACK_Overflow_INTERRUPT>
        TIMER0_SetCompare(speed_B);
    2818:	8d 2f       	mov	r24, r29
    281a:	0e 94 9f 21 	call	0x433e	; 0x433e <TIMER0_SetCompare>
        TIMER0_CALLBACK_CompareMatch_INTERRUPT(MB_CM0);
    281e:	8a ea       	ldi	r24, 0xAA	; 170
    2820:	9e e1       	ldi	r25, 0x1E	; 30
    2822:	0e 94 b8 21 	call	0x4370	; 0x4370 <TIMER0_CALLBACK_CompareMatch_INTERRUPT>

        TIMER0_SetCounter(0);
    2826:	80 e0       	ldi	r24, 0x00	; 0
    2828:	0e 94 a9 21 	call	0x4352	; 0x4352 <TIMER0_SetCounter>
        TIMER1_SetCounterValue(0);
    282c:	80 e0       	ldi	r24, 0x00	; 0
    282e:	90 e0       	ldi	r25, 0x00	; 0
    2830:	0e 94 d6 22 	call	0x45ac	; 0x45ac <TIMER1_SetCounterValue>

        MCAL_GPIO_WritePin(MOTOR_PORTS, Motor_B_4, LOW);
    2834:	40 e0       	ldi	r20, 0x00	; 0
    2836:	64 e0       	ldi	r22, 0x04	; 4
    2838:	70 e0       	ldi	r23, 0x00	; 0
    283a:	80 e3       	ldi	r24, 0x30	; 48
    283c:	90 e0       	ldi	r25, 0x00	; 0
    283e:	0e 94 3e 21 	call	0x427c	; 0x427c <MCAL_GPIO_WritePin>
        break;
    2842:	23 c0       	rjmp	.+70     	; 0x288a <Movements+0x1bc>
		
    default:
        TIMER1_SetCounterValue(0);
    2844:	80 e0       	ldi	r24, 0x00	; 0
    2846:	90 e0       	ldi	r25, 0x00	; 0
    2848:	0e 94 d6 22 	call	0x45ac	; 0x45ac <TIMER1_SetCounterValue>
        TIMER0_SetCounter(0);
    284c:	80 e0       	ldi	r24, 0x00	; 0
    284e:	0e 94 a9 21 	call	0x4352	; 0x4352 <TIMER0_SetCounter>
        // Stop both motors
        MCAL_GPIO_WritePin(MOTOR_PORTS, Motor_B_4, LOW);
    2852:	40 e0       	ldi	r20, 0x00	; 0
    2854:	64 e0       	ldi	r22, 0x04	; 4
    2856:	70 e0       	ldi	r23, 0x00	; 0
    2858:	80 e3       	ldi	r24, 0x30	; 48
    285a:	90 e0       	ldi	r25, 0x00	; 0
    285c:	0e 94 3e 21 	call	0x427c	; 0x427c <MCAL_GPIO_WritePin>
        MCAL_GPIO_WritePin(MOTOR_PORTS, Motor_B_3, LOW);
    2860:	40 e0       	ldi	r20, 0x00	; 0
    2862:	63 e0       	ldi	r22, 0x03	; 3
    2864:	70 e0       	ldi	r23, 0x00	; 0
    2866:	80 e3       	ldi	r24, 0x30	; 48
    2868:	90 e0       	ldi	r25, 0x00	; 0
    286a:	0e 94 3e 21 	call	0x427c	; 0x427c <MCAL_GPIO_WritePin>
        MCAL_GPIO_WritePin(MOTOR_PORTS, Motor_A_6, LOW);
    286e:	40 e0       	ldi	r20, 0x00	; 0
    2870:	66 e0       	ldi	r22, 0x06	; 6
    2872:	70 e0       	ldi	r23, 0x00	; 0
    2874:	80 e3       	ldi	r24, 0x30	; 48
    2876:	90 e0       	ldi	r25, 0x00	; 0
    2878:	0e 94 3e 21 	call	0x427c	; 0x427c <MCAL_GPIO_WritePin>
        MCAL_GPIO_WritePin(MOTOR_PORTS, Motor_A_5, LOW);
    287c:	40 e0       	ldi	r20, 0x00	; 0
    287e:	65 e0       	ldi	r22, 0x05	; 5
    2880:	70 e0       	ldi	r23, 0x00	; 0
    2882:	80 e3       	ldi	r24, 0x30	; 48
    2884:	90 e0       	ldi	r25, 0x00	; 0
    2886:	0e 94 3e 21 	call	0x427c	; 0x427c <MCAL_GPIO_WritePin>
        break;
    }
    TIMER0_Stop();
    288a:	0e 94 9a 21 	call	0x4334	; 0x4334 <TIMER0_Stop>
    TIMER1_Stop();
    288e:	0e 94 a3 22 	call	0x4546	; 0x4546 <TIMER1_Stop>
}
    2892:	df 91       	pop	r29
    2894:	cf 91       	pop	r28
    2896:	1f 91       	pop	r17
    2898:	08 95       	ret

0000289a <Oop>:

// Stop the motors
void Oop()
{
    // Stop all movements
    Movements(STOP, 0, 0);
    289a:	40 e0       	ldi	r20, 0x00	; 0
    289c:	60 e0       	ldi	r22, 0x00	; 0
    289e:	84 e0       	ldi	r24, 0x04	; 4
    28a0:	0e 94 67 13 	call	0x26ce	; 0x26ce <Movements>
    28a4:	08 95       	ret

000028a6 <wall_present>:

// Check if a wall is present using ultrasonic sensors
uint8_t wall_present(S_GPIO_t *portName, uint8_t trigPin, uint8_t echoPin)
{	
	// Measure the distance from the sensor to the wall
	int distance = GetUltrasonicDistance(portName, trigPin, echoPin);
    28a6:	0e 94 2d 20 	call	0x405a	; 0x405a <GetUltrasonicDistance>
	
	// If the distance is greater than or equal to 100mm, assume no wall is present
	if (distance > THRESHOLD_DISTANCE && distance <= LARGEST_DISTANCE)
    28aa:	85 56       	subi	r24, 0x65	; 101
    28ac:	91 09       	sbc	r25, r1
    28ae:	8c 3d       	cpi	r24, 0xDC	; 220
    28b0:	2a e0       	ldi	r18, 0x0A	; 10
    28b2:	92 07       	cpc	r25, r18
    28b4:	20 f0       	brcs	.+8      	; 0x28be <wall_present+0x18>
		return 0; // No wall
	else if (distance <= THRESHOLD_DISTANCE ||distance > LARGEST_DISTANCE)
    28b6:	8c 3d       	cpi	r24, 0xDC	; 220
    28b8:	9a 40       	sbci	r25, 0x0A	; 10
    28ba:	18 f4       	brcc	.+6      	; 0x28c2 <wall_present+0x1c>
		return 1; // Wall detected
}
    28bc:	08 95       	ret
	// Measure the distance from the sensor to the wall
	int distance = GetUltrasonicDistance(portName, trigPin, echoPin);
	
	// If the distance is greater than or equal to 100mm, assume no wall is present
	if (distance > THRESHOLD_DISTANCE && distance <= LARGEST_DISTANCE)
		return 0; // No wall
    28be:	80 e0       	ldi	r24, 0x00	; 0
    28c0:	08 95       	ret
	else if (distance <= THRESHOLD_DISTANCE ||distance > LARGEST_DISTANCE)
		return 1; // Wall detected
    28c2:	81 e0       	ldi	r24, 0x01	; 1
}
    28c4:	08 95       	ret

000028c6 <DetermineWallTypes>:
    }
}

// Function to determine wall types and update maze values
void DetermineWallTypes(uint8_t x, uint8_t y)
{
    28c6:	cf 93       	push	r28
    28c8:	df 93       	push	r29
    28ca:	d8 2f       	mov	r29, r24
    28cc:	c6 2f       	mov	r28, r22
    // Determine wall types and update maze values based on the current facing direction
    if (face == north)
    28ce:	80 91 49 03 	lds	r24, 0x0349	; 0x800349 <face>
    28d2:	81 11       	cpse	r24, r1
    28d4:	1b c0       	rjmp	.+54     	; 0x290c <DetermineWallTypes+0x46>
    {
        if (way_left)
    28d6:	80 91 4c 04 	lds	r24, 0x044C	; 0x80044c <way_left>
    28da:	88 23       	and	r24, r24
    28dc:	19 f0       	breq	.+6      	; 0x28e4 <DetermineWallTypes+0x1e>
            setVerticalWall(x, y);
    28de:	8d 2f       	mov	r24, r29
    28e0:	0e 94 19 02 	call	0x432	; 0x432 <setVerticalWall>
        if (way_front)
    28e4:	80 91 4e 06 	lds	r24, 0x064E	; 0x80064e <way_front>
    28e8:	88 23       	and	r24, r24
    28ea:	29 f0       	breq	.+10     	; 0x28f6 <DetermineWallTypes+0x30>
            setHorizontalWall(x, y + 1);
    28ec:	61 e0       	ldi	r22, 0x01	; 1
    28ee:	6c 0f       	add	r22, r28
    28f0:	8d 2f       	mov	r24, r29
    28f2:	0e 94 2b 02 	call	0x456	; 0x456 <setHorizontalWall>
        if (way_right)
    28f6:	80 91 4a 03 	lds	r24, 0x034A	; 0x80034a <way_right>
    28fa:	88 23       	and	r24, r24
    28fc:	09 f4       	brne	.+2      	; 0x2900 <DetermineWallTypes+0x3a>
    28fe:	58 c0       	rjmp	.+176    	; 0x29b0 <DetermineWallTypes+0xea>
            setVerticalWall(x + 1, y);
    2900:	6c 2f       	mov	r22, r28
    2902:	81 e0       	ldi	r24, 0x01	; 1
    2904:	8d 0f       	add	r24, r29
    2906:	0e 94 19 02 	call	0x432	; 0x432 <setVerticalWall>
    290a:	52 c0       	rjmp	.+164    	; 0x29b0 <DetermineWallTypes+0xea>
    }
    else if (face == east)
    290c:	81 30       	cpi	r24, 0x01	; 1
    290e:	d9 f4       	brne	.+54     	; 0x2946 <DetermineWallTypes+0x80>
    {
        if (way_left)
    2910:	80 91 4c 04 	lds	r24, 0x044C	; 0x80044c <way_left>
    2914:	88 23       	and	r24, r24
    2916:	29 f0       	breq	.+10     	; 0x2922 <DetermineWallTypes+0x5c>
            setHorizontalWall(x, y + 1);
    2918:	61 e0       	ldi	r22, 0x01	; 1
    291a:	6c 0f       	add	r22, r28
    291c:	8d 2f       	mov	r24, r29
    291e:	0e 94 2b 02 	call	0x456	; 0x456 <setHorizontalWall>
        if (way_front)
    2922:	80 91 4e 06 	lds	r24, 0x064E	; 0x80064e <way_front>
    2926:	88 23       	and	r24, r24
    2928:	29 f0       	breq	.+10     	; 0x2934 <DetermineWallTypes+0x6e>
            setVerticalWall(x + 1, y);
    292a:	6c 2f       	mov	r22, r28
    292c:	81 e0       	ldi	r24, 0x01	; 1
    292e:	8d 0f       	add	r24, r29
    2930:	0e 94 19 02 	call	0x432	; 0x432 <setVerticalWall>
        if (way_right)
    2934:	80 91 4a 03 	lds	r24, 0x034A	; 0x80034a <way_right>
    2938:	88 23       	and	r24, r24
    293a:	d1 f1       	breq	.+116    	; 0x29b0 <DetermineWallTypes+0xea>
            setHorizontalWall(x, y);
    293c:	6c 2f       	mov	r22, r28
    293e:	8d 2f       	mov	r24, r29
    2940:	0e 94 2b 02 	call	0x456	; 0x456 <setHorizontalWall>
    2944:	35 c0       	rjmp	.+106    	; 0x29b0 <DetermineWallTypes+0xea>
    }
    else if (face == south)
    2946:	82 30       	cpi	r24, 0x02	; 2
    2948:	c9 f4       	brne	.+50     	; 0x297c <DetermineWallTypes+0xb6>
    {
        if (way_left)
    294a:	80 91 4c 04 	lds	r24, 0x044C	; 0x80044c <way_left>
    294e:	88 23       	and	r24, r24
    2950:	21 f0       	breq	.+8      	; 0x295a <DetermineWallTypes+0x94>
            setVerticalWall(x + 1, y);
    2952:	81 e0       	ldi	r24, 0x01	; 1
    2954:	8d 0f       	add	r24, r29
    2956:	0e 94 19 02 	call	0x432	; 0x432 <setVerticalWall>
        if (way_front)
    295a:	80 91 4e 06 	lds	r24, 0x064E	; 0x80064e <way_front>
    295e:	88 23       	and	r24, r24
    2960:	21 f0       	breq	.+8      	; 0x296a <DetermineWallTypes+0xa4>
            setHorizontalWall(x, y);
    2962:	6c 2f       	mov	r22, r28
    2964:	8d 2f       	mov	r24, r29
    2966:	0e 94 2b 02 	call	0x456	; 0x456 <setHorizontalWall>
        if (way_right)
    296a:	80 91 4a 03 	lds	r24, 0x034A	; 0x80034a <way_right>
    296e:	88 23       	and	r24, r24
    2970:	f9 f0       	breq	.+62     	; 0x29b0 <DetermineWallTypes+0xea>
            setVerticalWall(x, y);
    2972:	6c 2f       	mov	r22, r28
    2974:	8d 2f       	mov	r24, r29
    2976:	0e 94 19 02 	call	0x432	; 0x432 <setVerticalWall>
    297a:	1a c0       	rjmp	.+52     	; 0x29b0 <DetermineWallTypes+0xea>
    }
    else if (face == west)
    297c:	83 30       	cpi	r24, 0x03	; 3
    297e:	c1 f4       	brne	.+48     	; 0x29b0 <DetermineWallTypes+0xea>
    {
        if (way_left)
    2980:	80 91 4c 04 	lds	r24, 0x044C	; 0x80044c <way_left>
    2984:	88 23       	and	r24, r24
    2986:	19 f0       	breq	.+6      	; 0x298e <DetermineWallTypes+0xc8>
            setHorizontalWall(x, y);
    2988:	8d 2f       	mov	r24, r29
    298a:	0e 94 2b 02 	call	0x456	; 0x456 <setHorizontalWall>
        if (way_front)
    298e:	80 91 4e 06 	lds	r24, 0x064E	; 0x80064e <way_front>
    2992:	88 23       	and	r24, r24
    2994:	21 f0       	breq	.+8      	; 0x299e <DetermineWallTypes+0xd8>
            setVerticalWall(x, y);
    2996:	6c 2f       	mov	r22, r28
    2998:	8d 2f       	mov	r24, r29
    299a:	0e 94 19 02 	call	0x432	; 0x432 <setVerticalWall>
        if (way_right)
    299e:	80 91 4a 03 	lds	r24, 0x034A	; 0x80034a <way_right>
    29a2:	88 23       	and	r24, r24
    29a4:	29 f0       	breq	.+10     	; 0x29b0 <DetermineWallTypes+0xea>
            setHorizontalWall(x, y + 1);
    29a6:	61 e0       	ldi	r22, 0x01	; 1
    29a8:	6c 0f       	add	r22, r28
    29aa:	8d 2f       	mov	r24, r29
    29ac:	0e 94 2b 02 	call	0x456	; 0x456 <setHorizontalWall>
    }
}
    29b0:	df 91       	pop	r29
    29b2:	cf 91       	pop	r28
    29b4:	08 95       	ret

000029b6 <wallcheck>:

// Check for walls using ultrasonic sensors and update variables
void wallcheck()
{	
    // Check if there are walls in different directions
    way_left  = wall_present(US_PORT, ltrigger, lecho);
    29b6:	4d e0       	ldi	r20, 0x0D	; 13
    29b8:	6c e0       	ldi	r22, 0x0C	; 12
    29ba:	89 e3       	ldi	r24, 0x39	; 57
    29bc:	90 e0       	ldi	r25, 0x00	; 0
    29be:	0e 94 53 14 	call	0x28a6	; 0x28a6 <wall_present>
    29c2:	80 93 4c 04 	sts	0x044C, r24	; 0x80044c <way_left>
    way_front = wall_present(US_PORT, ftrigger, fecho);
    29c6:	4b e0       	ldi	r20, 0x0B	; 11
    29c8:	68 e0       	ldi	r22, 0x08	; 8
    29ca:	89 e3       	ldi	r24, 0x39	; 57
    29cc:	90 e0       	ldi	r25, 0x00	; 0
    29ce:	0e 94 53 14 	call	0x28a6	; 0x28a6 <wall_present>
    29d2:	80 93 4e 06 	sts	0x064E, r24	; 0x80064e <way_front>
    way_right = wall_present(US_PORT, rtrigger, recho);
    29d6:	47 e0       	ldi	r20, 0x07	; 7
    29d8:	64 e0       	ldi	r22, 0x04	; 4
    29da:	89 e3       	ldi	r24, 0x39	; 57
    29dc:	90 e0       	ldi	r25, 0x00	; 0
    29de:	0e 94 53 14 	call	0x28a6	; 0x28a6 <wall_present>
    29e2:	80 93 4a 03 	sts	0x034A, r24	; 0x80034a <way_right>
    if (isNavigating && Navegating_times != DONE_Navigating)
    29e6:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
    29ea:	88 23       	and	r24, r24
    29ec:	51 f0       	breq	.+20     	; 0x2a02 <wallcheck+0x4c>
    29ee:	80 91 2e 03 	lds	r24, 0x032E	; 0x80032e <Navegating_times>
    29f2:	83 30       	cpi	r24, 0x03	; 3
    29f4:	31 f0       	breq	.+12     	; 0x2a02 <wallcheck+0x4c>
    {
        DetermineWallTypes(x_cor, y_cor);
    29f6:	60 91 48 03 	lds	r22, 0x0348	; 0x800348 <y_cor>
    29fa:	80 91 4d 06 	lds	r24, 0x064D	; 0x80064d <x_cor>
    29fe:	0e 94 63 14 	call	0x28c6	; 0x28c6 <DetermineWallTypes>
    2a02:	08 95       	ret

00002a04 <finishcheck>:
    }
}
// Check if the micromouse has reached the finish cell
void finishcheck()
{
    if (x_cor == x_fin && y_cor == y_fin)
    2a04:	80 91 4d 06 	lds	r24, 0x064D	; 0x80064d <x_cor>
    2a08:	88 30       	cpi	r24, 0x08	; 8
    2a0a:	d9 f4       	brne	.+54     	; 0x2a42 <finishcheck+0x3e>
    2a0c:	80 91 48 03 	lds	r24, 0x0348	; 0x800348 <y_cor>
    2a10:	88 30       	cpi	r24, 0x08	; 8
    2a12:	b9 f4       	brne	.+46     	; 0x2a42 <finishcheck+0x3e>
    {
        // Perform actions when the finish cell is reached
        // Example: Serial.println("FINISH");

        if (Navegating_times < DONE_Navigating)
    2a14:	80 91 2e 03 	lds	r24, 0x032E	; 0x80032e <Navegating_times>
    2a18:	83 30       	cpi	r24, 0x03	; 3
    2a1a:	98 f4       	brcc	.+38     	; 0x2a42 <finishcheck+0x3e>
        {
            Navegating_times++;
    2a1c:	8f 5f       	subi	r24, 0xFF	; 255
    2a1e:	80 93 2e 03 	sts	0x032E, r24	; 0x80032e <Navegating_times>
            delay_ms(30 * 1000);
    2a22:	20 e3       	ldi	r18, 0x30	; 48
    2a24:	35 e7       	ldi	r19, 0x75	; 117
    2a26:	40 e0       	ldi	r20, 0x00	; 0
    2a28:	50 e0       	ldi	r21, 0x00	; 0
    2a2a:	60 e0       	ldi	r22, 0x00	; 0
    2a2c:	70 e0       	ldi	r23, 0x00	; 0
    2a2e:	80 e0       	ldi	r24, 0x00	; 0
    2a30:	90 e0       	ldi	r25, 0x00	; 0
    2a32:	0e 94 32 23 	call	0x4664	; 0x4664 <delay_ms>
            x_cor = 0;
    2a36:	10 92 4d 06 	sts	0x064D, r1	; 0x80064d <x_cor>
            y_cor = 0;
    2a3a:	10 92 48 03 	sts	0x0348, r1	; 0x800348 <y_cor>
            face = north;
    2a3e:	10 92 49 03 	sts	0x0349, r1	; 0x800349 <face>
    2a42:	08 95       	ret

00002a44 <half_turn>:

// Perform a half-turn (rotate 180 degrees clockwise)
void half_turn()
{
    // Reset the tick counters for motor rotation
    GIE_disable();
    2a44:	0e 94 5c 21 	call	0x42b8	; 0x42b8 <GIE_disable>
    ticks_l = 0;
    2a48:	10 92 06 01 	sts	0x0106, r1	; 0x800106 <ticks_l>
    2a4c:	10 92 07 01 	sts	0x0107, r1	; 0x800107 <ticks_l+0x1>
    2a50:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <ticks_l+0x2>
    2a54:	10 92 09 01 	sts	0x0109, r1	; 0x800109 <ticks_l+0x3>
    ticks_r = 0;
    2a58:	10 92 0a 01 	sts	0x010A, r1	; 0x80010a <ticks_r>
    2a5c:	10 92 0b 01 	sts	0x010B, r1	; 0x80010b <ticks_r+0x1>
    2a60:	10 92 0c 01 	sts	0x010C, r1	; 0x80010c <ticks_r+0x2>
    2a64:	10 92 0d 01 	sts	0x010D, r1	; 0x80010d <ticks_r+0x3>
    GIE_enable();
    2a68:	0e 94 58 21 	call	0x42b0	; 0x42b0 <GIE_enable>

    // Rotate 180 degrees clockwise (40 ticks per 180 degrees)
    while ((ticks_r < (Full_cycle / 2)) || (ticks_l < (Full_cycle / 2)))
    2a6c:	03 c0       	rjmp	.+6      	; 0x2a74 <half_turn+0x30>
    {
        // Use the PID controller to control the wheels for a half-turn
        PID_Controller(HALF_TURN);
    2a6e:	81 e0       	ldi	r24, 0x01	; 1
    2a70:	0e 94 9a 1f 	call	0x3f34	; 0x3f34 <PID_Controller>
    ticks_l = 0;
    ticks_r = 0;
    GIE_enable();

    // Rotate 180 degrees clockwise (40 ticks per 180 degrees)
    while ((ticks_r < (Full_cycle / 2)) || (ticks_l < (Full_cycle / 2)))
    2a74:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <ticks_r>
    2a78:	90 91 0b 01 	lds	r25, 0x010B	; 0x80010b <ticks_r+0x1>
    2a7c:	a0 91 0c 01 	lds	r26, 0x010C	; 0x80010c <ticks_r+0x2>
    2a80:	b0 91 0d 01 	lds	r27, 0x010D	; 0x80010d <ticks_r+0x3>
    2a84:	8e 97       	sbiw	r24, 0x2e	; 46
    2a86:	a1 05       	cpc	r26, r1
    2a88:	b1 05       	cpc	r27, r1
    2a8a:	88 f3       	brcs	.-30     	; 0x2a6e <half_turn+0x2a>
    2a8c:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <ticks_l>
    2a90:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <ticks_l+0x1>
    2a94:	a0 91 08 01 	lds	r26, 0x0108	; 0x800108 <ticks_l+0x2>
    2a98:	b0 91 09 01 	lds	r27, 0x0109	; 0x800109 <ticks_l+0x3>
    2a9c:	8e 97       	sbiw	r24, 0x2e	; 46
    2a9e:	a1 05       	cpc	r26, r1
    2aa0:	b1 05       	cpc	r27, r1
    2aa2:	28 f3       	brcs	.-54     	; 0x2a6e <half_turn+0x2a>
        // Use the PID controller to control the wheels for a half-turn
        PID_Controller(HALF_TURN);
    }

    // Update the facing direction after the half-turn
    if (face == north)
    2aa4:	80 91 49 03 	lds	r24, 0x0349	; 0x800349 <face>
    2aa8:	81 11       	cpse	r24, r1
    2aaa:	04 c0       	rjmp	.+8      	; 0x2ab4 <half_turn+0x70>
        face = south;
    2aac:	82 e0       	ldi	r24, 0x02	; 2
    2aae:	80 93 49 03 	sts	0x0349, r24	; 0x800349 <face>
    2ab2:	08 95       	ret
    else if (face == west)
    2ab4:	83 30       	cpi	r24, 0x03	; 3
    2ab6:	21 f4       	brne	.+8      	; 0x2ac0 <half_turn+0x7c>
        face = east;
    2ab8:	81 e0       	ldi	r24, 0x01	; 1
    2aba:	80 93 49 03 	sts	0x0349, r24	; 0x800349 <face>
    2abe:	08 95       	ret
    else if (face == south)
    2ac0:	82 30       	cpi	r24, 0x02	; 2
    2ac2:	19 f4       	brne	.+6      	; 0x2aca <half_turn+0x86>
        face = north;
    2ac4:	10 92 49 03 	sts	0x0349, r1	; 0x800349 <face>
    2ac8:	08 95       	ret
    else if (face == east)
    2aca:	81 30       	cpi	r24, 0x01	; 1
    2acc:	19 f4       	brne	.+6      	; 0x2ad4 <half_turn+0x90>
        face = west;
    2ace:	83 e0       	ldi	r24, 0x03	; 3
    2ad0:	80 93 49 03 	sts	0x0349, r24	; 0x800349 <face>
    2ad4:	08 95       	ret

00002ad6 <Go_Back>:
    }
}

void Go_Back()
{
    half_turn();
    2ad6:	0e 94 22 15 	call	0x2a44	; 0x2a44 <half_turn>
    while (x_cor != 0 && y_cor != 0)
    2ada:	04 c0       	rjmp	.+8      	; 0x2ae4 <Go_Back+0xe>
    {
        wallcheck();
    2adc:	0e 94 db 14 	call	0x29b6	; 0x29b6 <wallcheck>
        Find_Lowest_Path();
    2ae0:	0e 94 a3 11 	call	0x2346	; 0x2346 <Find_Lowest_Path>
}

void Go_Back()
{
    half_turn();
    while (x_cor != 0 && y_cor != 0)
    2ae4:	80 91 4d 06 	lds	r24, 0x064D	; 0x80064d <x_cor>
    2ae8:	88 23       	and	r24, r24
    2aea:	21 f0       	breq	.+8      	; 0x2af4 <Go_Back+0x1e>
    2aec:	80 91 48 03 	lds	r24, 0x0348	; 0x800348 <y_cor>
    2af0:	81 11       	cpse	r24, r1
    2af2:	f4 cf       	rjmp	.-24     	; 0x2adc <Go_Back+0x6>
    2af4:	08 95       	ret

00002af6 <Close_Cell_After_Deadend>:
}

// Closes a cell after reaching a dead end.
void Close_Cell_After_Deadend()
{
	if (face == north)
    2af6:	80 91 49 03 	lds	r24, 0x0349	; 0x800349 <face>
    2afa:	81 11       	cpse	r24, r1
    2afc:	07 c0       	rjmp	.+14     	; 0x2b0c <Close_Cell_After_Deadend+0x16>
	setHorizontalWall(x_cor, y_cor);
    2afe:	60 91 48 03 	lds	r22, 0x0348	; 0x800348 <y_cor>
    2b02:	80 91 4d 06 	lds	r24, 0x064D	; 0x80064d <x_cor>
    2b06:	0e 94 2b 02 	call	0x456	; 0x456 <setHorizontalWall>
    2b0a:	08 95       	ret
	else if (face == south)
    2b0c:	82 30       	cpi	r24, 0x02	; 2
    2b0e:	41 f4       	brne	.+16     	; 0x2b20 <Close_Cell_After_Deadend+0x2a>
	setHorizontalWall(x_cor, y_cor + 1);
    2b10:	60 91 48 03 	lds	r22, 0x0348	; 0x800348 <y_cor>
    2b14:	6f 5f       	subi	r22, 0xFF	; 255
    2b16:	80 91 4d 06 	lds	r24, 0x064D	; 0x80064d <x_cor>
    2b1a:	0e 94 2b 02 	call	0x456	; 0x456 <setHorizontalWall>
    2b1e:	08 95       	ret
	else if (face == east)
    2b20:	81 30       	cpi	r24, 0x01	; 1
    2b22:	39 f4       	brne	.+14     	; 0x2b32 <Close_Cell_After_Deadend+0x3c>
	setVerticalWall(x_cor, y_cor);
    2b24:	60 91 48 03 	lds	r22, 0x0348	; 0x800348 <y_cor>
    2b28:	80 91 4d 06 	lds	r24, 0x064D	; 0x80064d <x_cor>
    2b2c:	0e 94 19 02 	call	0x432	; 0x432 <setVerticalWall>
    2b30:	08 95       	ret
	else if (face == west)
    2b32:	83 30       	cpi	r24, 0x03	; 3
    2b34:	39 f4       	brne	.+14     	; 0x2b44 <Close_Cell_After_Deadend+0x4e>
	setVerticalWall(x_cor + 1, y_cor);
    2b36:	80 91 4d 06 	lds	r24, 0x064D	; 0x80064d <x_cor>
    2b3a:	60 91 48 03 	lds	r22, 0x0348	; 0x800348 <y_cor>
    2b3e:	8f 5f       	subi	r24, 0xFF	; 255
    2b40:	0e 94 19 02 	call	0x432	; 0x432 <setVerticalWall>
    2b44:	08 95       	ret

00002b46 <oneway>:
// ==========================================================================================

// Handle one-way paths
void oneway()
{
	if (way_left == 0)
    2b46:	80 91 4c 04 	lds	r24, 0x044C	; 0x80044c <way_left>
    2b4a:	81 11       	cpse	r24, r1
    2b4c:	05 c0       	rjmp	.+10     	; 0x2b58 <oneway+0x12>
	{
		// If the left path is open, turn left and move forward
		rotate_left();
    2b4e:	0e 94 0c 12 	call	0x2418	; 0x2418 <rotate_left>
		forward();
    2b52:	0e 94 9e 12 	call	0x253c	; 0x253c <forward>
    2b56:	08 95       	ret
	}
	else if (way_right == 0)
    2b58:	80 91 4a 03 	lds	r24, 0x034A	; 0x80034a <way_right>
    2b5c:	81 11       	cpse	r24, r1
    2b5e:	05 c0       	rjmp	.+10     	; 0x2b6a <oneway+0x24>
	{
		// If the right path is open, turn right and move forward
		rotate_right();
    2b60:	0e 94 55 12 	call	0x24aa	; 0x24aa <rotate_right>
		forward();
    2b64:	0e 94 9e 12 	call	0x253c	; 0x253c <forward>
    2b68:	08 95       	ret
	}
	else if (way_front == 0)
    2b6a:	80 91 4e 06 	lds	r24, 0x064E	; 0x80064e <way_front>
    2b6e:	81 11       	cpse	r24, r1
    2b70:	02 c0       	rjmp	.+4      	; 0x2b76 <oneway+0x30>
	{
		// If the front path is open, move forward
		forward();
    2b72:	0e 94 9e 12 	call	0x253c	; 0x253c <forward>
    2b76:	08 95       	ret

00002b78 <dead_end>:

// Handle dead ends and find a way out
void dead_end()
{
	// Execute a half-turn to retrace the path
    half_turn();
    2b78:	0e 94 22 15 	call	0x2a44	; 0x2a44 <half_turn>
	wallcheck();
    2b7c:	0e 94 db 14 	call	0x29b6	; 0x29b6 <wallcheck>
	decision = way_left + way_right + way_right;
    2b80:	80 91 4a 03 	lds	r24, 0x034A	; 0x80034a <way_right>
    2b84:	90 91 4c 04 	lds	r25, 0x044C	; 0x80044c <way_left>
    2b88:	98 0f       	add	r25, r24
    2b8a:	89 0f       	add	r24, r25
    2b8c:	80 93 4b 03 	sts	0x034B, r24	; 0x80034b <decision>
	while(decision == 2)
    2b90:	38 c0       	rjmp	.+112    	; 0x2c02 <dead_end+0x8a>
	{
		deadend[x_cor][y_cor] = 1;
    2b92:	20 91 4d 06 	lds	r18, 0x064D	; 0x80064d <x_cor>
    2b96:	30 e0       	ldi	r19, 0x00	; 0
    2b98:	80 91 48 03 	lds	r24, 0x0348	; 0x800348 <y_cor>
    2b9c:	90 e0       	ldi	r25, 0x00	; 0
    2b9e:	f9 01       	movw	r30, r18
    2ba0:	e2 95       	swap	r30
    2ba2:	f2 95       	swap	r31
    2ba4:	f0 7f       	andi	r31, 0xF0	; 240
    2ba6:	fe 27       	eor	r31, r30
    2ba8:	e0 7f       	andi	r30, 0xF0	; 240
    2baa:	fe 27       	eor	r31, r30
    2bac:	df 01       	movw	r26, r30
    2bae:	a3 5b       	subi	r26, 0xB3	; 179
    2bb0:	bb 4f       	sbci	r27, 0xFB	; 251
    2bb2:	a8 0f       	add	r26, r24
    2bb4:	b9 1f       	adc	r27, r25
    2bb6:	41 e0       	ldi	r20, 0x01	; 1
    2bb8:	4c 93       	st	X, r20
		trail[x_cor][y_cor]++;
    2bba:	e3 5b       	subi	r30, 0xB3	; 179
    2bbc:	fa 4f       	sbci	r31, 0xFA	; 250
    2bbe:	e8 0f       	add	r30, r24
    2bc0:	f9 1f       	adc	r31, r25
    2bc2:	60 81       	ld	r22, Z
    2bc4:	6f 5f       	subi	r22, 0xFF	; 255
    2bc6:	60 83       	st	Z, r22
		EEPROM_write(x_cor * 10 + y_cor, trail[x_cor][y_cor]);
    2bc8:	a9 01       	movw	r20, r18
    2bca:	44 0f       	add	r20, r20
    2bcc:	55 1f       	adc	r21, r21
    2bce:	22 0f       	add	r18, r18
    2bd0:	33 1f       	adc	r19, r19
    2bd2:	22 0f       	add	r18, r18
    2bd4:	33 1f       	adc	r19, r19
    2bd6:	22 0f       	add	r18, r18
    2bd8:	33 1f       	adc	r19, r19
    2bda:	24 0f       	add	r18, r20
    2bdc:	35 1f       	adc	r19, r21
    2bde:	82 0f       	add	r24, r18
    2be0:	93 1f       	adc	r25, r19
    2be2:	0e 94 e1 20 	call	0x41c2	; 0x41c2 <EEPROM_write>
		
		oneway();		
    2be6:	0e 94 a3 15 	call	0x2b46	; 0x2b46 <oneway>
		Close_Cell_After_Deadend();
    2bea:	0e 94 7b 15 	call	0x2af6	; 0x2af6 <Close_Cell_After_Deadend>
		
		wallcheck();
    2bee:	0e 94 db 14 	call	0x29b6	; 0x29b6 <wallcheck>
		decision = way_left + way_right + way_right;
    2bf2:	80 91 4a 03 	lds	r24, 0x034A	; 0x80034a <way_right>
    2bf6:	90 91 4c 04 	lds	r25, 0x044C	; 0x80044c <way_left>
    2bfa:	98 0f       	add	r25, r24
    2bfc:	89 0f       	add	r24, r25
    2bfe:	80 93 4b 03 	sts	0x034B, r24	; 0x80034b <decision>
{
	// Execute a half-turn to retrace the path
    half_turn();
	wallcheck();
	decision = way_left + way_right + way_right;
	while(decision == 2)
    2c02:	80 91 4b 03 	lds	r24, 0x034B	; 0x80034b <decision>
    2c06:	82 30       	cpi	r24, 0x02	; 2
    2c08:	21 f2       	breq	.-120    	; 0x2b92 <dead_end+0x1a>
		Close_Cell_After_Deadend();
		
		wallcheck();
		decision = way_left + way_right + way_right;
	}
}
    2c0a:	08 95       	ret

00002c0c <two_way>:
// ==========================================================================================
//                                         2-WAY
// ==========================================================================================

void two_way()
{
    2c0c:	ef 92       	push	r14
    2c0e:	ff 92       	push	r15
    2c10:	0f 93       	push	r16
    2c12:	1f 93       	push	r17
    2c14:	cf 93       	push	r28
    2c16:	df 93       	push	r29
	
	// This subroutine will triggered when there are only two possible ways oppened.
	// Potential field will of every cell is important here in this case.

	// Access the array elements if within bounds
	pot_north = (y_cor + 1 < ROWS) ? pot_field[x_cor][y_cor + 1] : Maze_Border;
    2c18:	e0 91 48 03 	lds	r30, 0x0348	; 0x800348 <y_cor>
    2c1c:	2e 2f       	mov	r18, r30
    2c1e:	30 e0       	ldi	r19, 0x00	; 0
    2c20:	e9 01       	movw	r28, r18
    2c22:	21 96       	adiw	r28, 0x01	; 1
    2c24:	c0 31       	cpi	r28, 0x10	; 16
    2c26:	d1 05       	cpc	r29, r1
    2c28:	64 f4       	brge	.+24     	; 0x2c42 <two_way+0x36>
    2c2a:	e0 91 4d 06 	lds	r30, 0x064D	; 0x80064d <x_cor>
    2c2e:	80 e1       	ldi	r24, 0x10	; 16
    2c30:	e8 9f       	mul	r30, r24
    2c32:	f0 01       	movw	r30, r0
    2c34:	11 24       	eor	r1, r1
    2c36:	e4 5b       	subi	r30, 0xB4	; 180
    2c38:	fc 4f       	sbci	r31, 0xFC	; 252
    2c3a:	ec 0f       	add	r30, r28
    2c3c:	fd 1f       	adc	r31, r29
    2c3e:	f0 80       	ld	r15, Z
    2c40:	02 c0       	rjmp	.+4      	; 0x2c46 <two_way+0x3a>
    2c42:	ff 24       	eor	r15, r15
    2c44:	fa 94       	dec	r15
    2c46:	f0 92 50 07 	sts	0x0750, r15	; 0x800750 <pot_north>
	pot_east = (x_cor + 1 < COLS) ? pot_field[x_cor + 1][y_cor] : Maze_Border;
    2c4a:	80 91 4d 06 	lds	r24, 0x064D	; 0x80064d <x_cor>
    2c4e:	90 e0       	ldi	r25, 0x00	; 0
    2c50:	ac 01       	movw	r20, r24
    2c52:	4f 5f       	subi	r20, 0xFF	; 255
    2c54:	5f 4f       	sbci	r21, 0xFF	; 255
    2c56:	40 31       	cpi	r20, 0x10	; 16
    2c58:	51 05       	cpc	r21, r1
    2c5a:	6c f4       	brge	.+26     	; 0x2c76 <two_way+0x6a>
    2c5c:	fa 01       	movw	r30, r20
    2c5e:	e2 95       	swap	r30
    2c60:	f2 95       	swap	r31
    2c62:	f0 7f       	andi	r31, 0xF0	; 240
    2c64:	fe 27       	eor	r31, r30
    2c66:	e0 7f       	andi	r30, 0xF0	; 240
    2c68:	fe 27       	eor	r31, r30
    2c6a:	e4 5b       	subi	r30, 0xB4	; 180
    2c6c:	fc 4f       	sbci	r31, 0xFC	; 252
    2c6e:	e2 0f       	add	r30, r18
    2c70:	f3 1f       	adc	r31, r19
    2c72:	00 81       	ld	r16, Z
    2c74:	01 c0       	rjmp	.+2      	; 0x2c78 <two_way+0x6c>
    2c76:	0f ef       	ldi	r16, 0xFF	; 255
    2c78:	00 93 54 07 	sts	0x0754, r16	; 0x800754 <pot_east>
	pot_south = (y_cor - 1 >= 0) ? pot_field[x_cor][y_cor - 1] : Maze_Border;
    2c7c:	b9 01       	movw	r22, r18
    2c7e:	61 50       	subi	r22, 0x01	; 1
    2c80:	71 09       	sbc	r23, r1
    2c82:	6a f0       	brmi	.+26     	; 0x2c9e <two_way+0x92>
    2c84:	fc 01       	movw	r30, r24
    2c86:	e2 95       	swap	r30
    2c88:	f2 95       	swap	r31
    2c8a:	f0 7f       	andi	r31, 0xF0	; 240
    2c8c:	fe 27       	eor	r31, r30
    2c8e:	e0 7f       	andi	r30, 0xF0	; 240
    2c90:	fe 27       	eor	r31, r30
    2c92:	e4 5b       	subi	r30, 0xB4	; 180
    2c94:	fc 4f       	sbci	r31, 0xFC	; 252
    2c96:	e6 0f       	add	r30, r22
    2c98:	f7 1f       	adc	r31, r23
    2c9a:	10 81       	ld	r17, Z
    2c9c:	01 c0       	rjmp	.+2      	; 0x2ca0 <two_way+0x94>
    2c9e:	1f ef       	ldi	r17, 0xFF	; 255
    2ca0:	10 93 4f 07 	sts	0x074F, r17	; 0x80074f <pot_south>
	pot_west = (x_cor - 1 >= 0) ? pot_field[x_cor - 1][y_cor] : Maze_Border;
    2ca4:	fc 01       	movw	r30, r24
    2ca6:	31 97       	sbiw	r30, 0x01	; 1
    2ca8:	6a f0       	brmi	.+26     	; 0x2cc4 <two_way+0xb8>
    2caa:	df 01       	movw	r26, r30
    2cac:	a2 95       	swap	r26
    2cae:	b2 95       	swap	r27
    2cb0:	b0 7f       	andi	r27, 0xF0	; 240
    2cb2:	ba 27       	eor	r27, r26
    2cb4:	a0 7f       	andi	r26, 0xF0	; 240
    2cb6:	ba 27       	eor	r27, r26
    2cb8:	a4 5b       	subi	r26, 0xB4	; 180
    2cba:	bc 4f       	sbci	r27, 0xFC	; 252
    2cbc:	a2 0f       	add	r26, r18
    2cbe:	b3 1f       	adc	r27, r19
    2cc0:	ec 90       	ld	r14, X
    2cc2:	02 c0       	rjmp	.+4      	; 0x2cc8 <two_way+0xbc>
    2cc4:	ee 24       	eor	r14, r14
    2cc6:	ea 94       	dec	r14
    2cc8:	e0 92 52 07 	sts	0x0752, r14	; 0x800752 <pot_west>
	// Here are some possible way:

	// ------------------
	// Left way BLOCKED
	// ------------------
	if (way_left == 1)
    2ccc:	b0 91 4c 04 	lds	r27, 0x044C	; 0x80044c <way_left>
    2cd0:	b1 30       	cpi	r27, 0x01	; 1
    2cd2:	09 f0       	breq	.+2      	; 0x2cd6 <two_way+0xca>
    2cd4:	6b c1       	rjmp	.+726    	; 0x2fac <two_way+0x3a0>
	{
		// Facing north
		if (face == north)
    2cd6:	b0 91 49 03 	lds	r27, 0x0349	; 0x800349 <face>
    2cda:	b1 11       	cpse	r27, r1
    2cdc:	57 c0       	rjmp	.+174    	; 0x2d8c <two_way+0x180>
		{
			// Deadend: Front
			if (deadend[x_cor][y_cor + 1] == 1)
    2cde:	fc 01       	movw	r30, r24
    2ce0:	e2 95       	swap	r30
    2ce2:	f2 95       	swap	r31
    2ce4:	f0 7f       	andi	r31, 0xF0	; 240
    2ce6:	fe 27       	eor	r31, r30
    2ce8:	e0 7f       	andi	r30, 0xF0	; 240
    2cea:	fe 27       	eor	r31, r30
    2cec:	e3 5b       	subi	r30, 0xB3	; 179
    2cee:	fb 4f       	sbci	r31, 0xFB	; 251
    2cf0:	ec 0f       	add	r30, r28
    2cf2:	fd 1f       	adc	r31, r29
    2cf4:	60 81       	ld	r22, Z
    2cf6:	61 30       	cpi	r22, 0x01	; 1
    2cf8:	29 f4       	brne	.+10     	; 0x2d04 <two_way+0xf8>
			{
				rotate_right();
    2cfa:	0e 94 55 12 	call	0x24aa	; 0x24aa <rotate_right>
				forward();
    2cfe:	0e 94 9e 12 	call	0x253c	; 0x253c <forward>
    2d02:	37 c4       	rjmp	.+2158   	; 0x3572 <two_way+0x966>
			}
			// Deadend: Right
			else if (deadend[x_cor + 1][y_cor] == 1)
    2d04:	fa 01       	movw	r30, r20
    2d06:	e2 95       	swap	r30
    2d08:	f2 95       	swap	r31
    2d0a:	f0 7f       	andi	r31, 0xF0	; 240
    2d0c:	fe 27       	eor	r31, r30
    2d0e:	e0 7f       	andi	r30, 0xF0	; 240
    2d10:	fe 27       	eor	r31, r30
    2d12:	e3 5b       	subi	r30, 0xB3	; 179
    2d14:	fb 4f       	sbci	r31, 0xFB	; 251
    2d16:	e2 0f       	add	r30, r18
    2d18:	f3 1f       	adc	r31, r19
    2d1a:	60 81       	ld	r22, Z
    2d1c:	61 30       	cpi	r22, 0x01	; 1
    2d1e:	19 f4       	brne	.+6      	; 0x2d26 <two_way+0x11a>
			{
				forward();
    2d20:	0e 94 9e 12 	call	0x253c	; 0x253c <forward>
    2d24:	26 c4       	rjmp	.+2124   	; 0x3572 <two_way+0x966>
			}
			// if you didn't move there before
			else if (trail[x_cor + 1][y_cor] == trail[x_cor][y_cor + 1])
    2d26:	fa 01       	movw	r30, r20
    2d28:	e2 95       	swap	r30
    2d2a:	f2 95       	swap	r31
    2d2c:	f0 7f       	andi	r31, 0xF0	; 240
    2d2e:	fe 27       	eor	r31, r30
    2d30:	e0 7f       	andi	r30, 0xF0	; 240
    2d32:	fe 27       	eor	r31, r30
    2d34:	e3 5b       	subi	r30, 0xB3	; 179
    2d36:	fa 4f       	sbci	r31, 0xFA	; 250
    2d38:	e2 0f       	add	r30, r18
    2d3a:	f3 1f       	adc	r31, r19
    2d3c:	20 81       	ld	r18, Z
    2d3e:	82 95       	swap	r24
    2d40:	92 95       	swap	r25
    2d42:	90 7f       	andi	r25, 0xF0	; 240
    2d44:	98 27       	eor	r25, r24
    2d46:	80 7f       	andi	r24, 0xF0	; 240
    2d48:	98 27       	eor	r25, r24
    2d4a:	83 5b       	subi	r24, 0xB3	; 179
    2d4c:	9a 4f       	sbci	r25, 0xFA	; 250
    2d4e:	c8 0f       	add	r28, r24
    2d50:	d9 1f       	adc	r29, r25
    2d52:	88 81       	ld	r24, Y
    2d54:	28 13       	cpse	r18, r24
    2d56:	0d c0       	rjmp	.+26     	; 0x2d72 <two_way+0x166>
			{
				if (pot_north < pot_east)
    2d58:	f0 16       	cp	r15, r16
    2d5a:	18 f4       	brcc	.+6      	; 0x2d62 <two_way+0x156>
				{
					forward();
    2d5c:	0e 94 9e 12 	call	0x253c	; 0x253c <forward>
    2d60:	08 c4       	rjmp	.+2064   	; 0x3572 <two_way+0x966>
				}
				else if (pot_north >= pot_east)
    2d62:	f0 16       	cp	r15, r16
    2d64:	08 f4       	brcc	.+2      	; 0x2d68 <two_way+0x15c>
    2d66:	05 c4       	rjmp	.+2058   	; 0x3572 <two_way+0x966>
				{
					rotate_right();
    2d68:	0e 94 55 12 	call	0x24aa	; 0x24aa <rotate_right>
					forward();
    2d6c:	0e 94 9e 12 	call	0x253c	; 0x253c <forward>
    2d70:	00 c4       	rjmp	.+2048   	; 0x3572 <two_way+0x966>
				}
			}
			// if not entered the prev if then you must enter 1 of the following 2
			else if (trail[x_cor + 1][y_cor] < trail[x_cor][y_cor + 1]) // moved in the right cell before?
    2d72:	28 17       	cp	r18, r24
    2d74:	28 f4       	brcc	.+10     	; 0x2d80 <two_way+0x174>
			{
				//    if not
				rotate_right();
    2d76:	0e 94 55 12 	call	0x24aa	; 0x24aa <rotate_right>
				forward();
    2d7a:	0e 94 9e 12 	call	0x253c	; 0x253c <forward>
    2d7e:	f9 c3       	rjmp	.+2034   	; 0x3572 <two_way+0x966>
			}
			else if (trail[x_cor][y_cor + 1] < trail[x_cor + 1][y_cor]) // moved in the front cell before?
    2d80:	82 17       	cp	r24, r18
    2d82:	08 f0       	brcs	.+2      	; 0x2d86 <two_way+0x17a>
    2d84:	f6 c3       	rjmp	.+2028   	; 0x3572 <two_way+0x966>
			{
				//    if not
				forward();
    2d86:	0e 94 9e 12 	call	0x253c	; 0x253c <forward>
    2d8a:	f3 c3       	rjmp	.+2022   	; 0x3572 <two_way+0x966>
			}
		}

		// Facing east
		else if (face == east)
    2d8c:	b1 30       	cpi	r27, 0x01	; 1
    2d8e:	09 f0       	breq	.+2      	; 0x2d92 <two_way+0x186>
    2d90:	58 c0       	rjmp	.+176    	; 0x2e42 <two_way+0x236>
		{
			// Deadend: Front
			if (deadend[x_cor + 1][y_cor] == 1)
    2d92:	fa 01       	movw	r30, r20
    2d94:	e2 95       	swap	r30
    2d96:	f2 95       	swap	r31
    2d98:	f0 7f       	andi	r31, 0xF0	; 240
    2d9a:	fe 27       	eor	r31, r30
    2d9c:	e0 7f       	andi	r30, 0xF0	; 240
    2d9e:	fe 27       	eor	r31, r30
    2da0:	e3 5b       	subi	r30, 0xB3	; 179
    2da2:	fb 4f       	sbci	r31, 0xFB	; 251
    2da4:	e2 0f       	add	r30, r18
    2da6:	f3 1f       	adc	r31, r19
    2da8:	e0 81       	ld	r30, Z
    2daa:	e1 30       	cpi	r30, 0x01	; 1
    2dac:	29 f4       	brne	.+10     	; 0x2db8 <two_way+0x1ac>
			{
				rotate_right();
    2dae:	0e 94 55 12 	call	0x24aa	; 0x24aa <rotate_right>
				forward();
    2db2:	0e 94 9e 12 	call	0x253c	; 0x253c <forward>
    2db6:	dd c3       	rjmp	.+1978   	; 0x3572 <two_way+0x966>
			}
			// Deadend: Right
			else if (deadend[x_cor][y_cor - 1] == 1)
    2db8:	fc 01       	movw	r30, r24
    2dba:	e2 95       	swap	r30
    2dbc:	f2 95       	swap	r31
    2dbe:	f0 7f       	andi	r31, 0xF0	; 240
    2dc0:	fe 27       	eor	r31, r30
    2dc2:	e0 7f       	andi	r30, 0xF0	; 240
    2dc4:	fe 27       	eor	r31, r30
    2dc6:	e3 5b       	subi	r30, 0xB3	; 179
    2dc8:	fb 4f       	sbci	r31, 0xFB	; 251
    2dca:	e6 0f       	add	r30, r22
    2dcc:	f7 1f       	adc	r31, r23
    2dce:	e0 81       	ld	r30, Z
    2dd0:	e1 30       	cpi	r30, 0x01	; 1
    2dd2:	19 f4       	brne	.+6      	; 0x2dda <two_way+0x1ce>
			{
				forward();
    2dd4:	0e 94 9e 12 	call	0x253c	; 0x253c <forward>
    2dd8:	cc c3       	rjmp	.+1944   	; 0x3572 <two_way+0x966>
			}
			else if (trail[x_cor + 1][y_cor] == trail[x_cor][y_cor - 1])
    2dda:	fa 01       	movw	r30, r20
    2ddc:	e2 95       	swap	r30
    2dde:	f2 95       	swap	r31
    2de0:	f0 7f       	andi	r31, 0xF0	; 240
    2de2:	fe 27       	eor	r31, r30
    2de4:	e0 7f       	andi	r30, 0xF0	; 240
    2de6:	fe 27       	eor	r31, r30
    2de8:	e3 5b       	subi	r30, 0xB3	; 179
    2dea:	fa 4f       	sbci	r31, 0xFA	; 250
    2dec:	e2 0f       	add	r30, r18
    2dee:	f3 1f       	adc	r31, r19
    2df0:	20 81       	ld	r18, Z
    2df2:	82 95       	swap	r24
    2df4:	92 95       	swap	r25
    2df6:	90 7f       	andi	r25, 0xF0	; 240
    2df8:	98 27       	eor	r25, r24
    2dfa:	80 7f       	andi	r24, 0xF0	; 240
    2dfc:	98 27       	eor	r25, r24
    2dfe:	83 5b       	subi	r24, 0xB3	; 179
    2e00:	9a 4f       	sbci	r25, 0xFA	; 250
    2e02:	fc 01       	movw	r30, r24
    2e04:	e6 0f       	add	r30, r22
    2e06:	f7 1f       	adc	r31, r23
    2e08:	80 81       	ld	r24, Z
    2e0a:	28 13       	cpse	r18, r24
    2e0c:	0d c0       	rjmp	.+26     	; 0x2e28 <two_way+0x21c>
			{
				if (pot_east < pot_south)
    2e0e:	01 17       	cp	r16, r17
    2e10:	18 f4       	brcc	.+6      	; 0x2e18 <two_way+0x20c>
				{
					forward();
    2e12:	0e 94 9e 12 	call	0x253c	; 0x253c <forward>
    2e16:	ad c3       	rjmp	.+1882   	; 0x3572 <two_way+0x966>
				}
				else if (pot_east >= pot_south)
    2e18:	01 17       	cp	r16, r17
    2e1a:	08 f4       	brcc	.+2      	; 0x2e1e <two_way+0x212>
    2e1c:	aa c3       	rjmp	.+1876   	; 0x3572 <two_way+0x966>
				{
					rotate_right();
    2e1e:	0e 94 55 12 	call	0x24aa	; 0x24aa <rotate_right>
					forward();
    2e22:	0e 94 9e 12 	call	0x253c	; 0x253c <forward>
    2e26:	a5 c3       	rjmp	.+1866   	; 0x3572 <two_way+0x966>
				}
			}
			// if not entered the prev if then you must enter 1 of the following 2
			else if (trail[x_cor + 1][y_cor] < trail[x_cor][y_cor - 1]) // moved in the leading cell before?
    2e28:	28 17       	cp	r18, r24
    2e2a:	18 f4       	brcc	.+6      	; 0x2e32 <two_way+0x226>
			{
				forward();
    2e2c:	0e 94 9e 12 	call	0x253c	; 0x253c <forward>
    2e30:	a0 c3       	rjmp	.+1856   	; 0x3572 <two_way+0x966>
			}
			else if (trail[x_cor][y_cor - 1] < trail[x_cor + 1][y_cor]) // moved in the benith cell before?
    2e32:	82 17       	cp	r24, r18
    2e34:	08 f0       	brcs	.+2      	; 0x2e38 <two_way+0x22c>
    2e36:	9d c3       	rjmp	.+1850   	; 0x3572 <two_way+0x966>
			{
				rotate_right();
    2e38:	0e 94 55 12 	call	0x24aa	; 0x24aa <rotate_right>
				forward();
    2e3c:	0e 94 9e 12 	call	0x253c	; 0x253c <forward>
    2e40:	98 c3       	rjmp	.+1840   	; 0x3572 <two_way+0x966>
			}
		}
		// Facing South
		else if (face == south)
    2e42:	b2 30       	cpi	r27, 0x02	; 2
    2e44:	09 f0       	breq	.+2      	; 0x2e48 <two_way+0x23c>
    2e46:	57 c0       	rjmp	.+174    	; 0x2ef6 <two_way+0x2ea>
		{
			// Deadend: Front
			if (deadend[x_cor][y_cor - 1] == 1)
    2e48:	dc 01       	movw	r26, r24
    2e4a:	a2 95       	swap	r26
    2e4c:	b2 95       	swap	r27
    2e4e:	b0 7f       	andi	r27, 0xF0	; 240
    2e50:	ba 27       	eor	r27, r26
    2e52:	a0 7f       	andi	r26, 0xF0	; 240
    2e54:	ba 27       	eor	r27, r26
    2e56:	a3 5b       	subi	r26, 0xB3	; 179
    2e58:	bb 4f       	sbci	r27, 0xFB	; 251
    2e5a:	a6 0f       	add	r26, r22
    2e5c:	b7 1f       	adc	r27, r23
    2e5e:	4c 91       	ld	r20, X
    2e60:	41 30       	cpi	r20, 0x01	; 1
    2e62:	29 f4       	brne	.+10     	; 0x2e6e <two_way+0x262>
			{
				rotate_right();
    2e64:	0e 94 55 12 	call	0x24aa	; 0x24aa <rotate_right>
				forward();
    2e68:	0e 94 9e 12 	call	0x253c	; 0x253c <forward>
    2e6c:	82 c3       	rjmp	.+1796   	; 0x3572 <two_way+0x966>
			}
			// Deadend: Right
			else if (deadend[x_cor - 1][y_cor] == 1)
    2e6e:	df 01       	movw	r26, r30
    2e70:	a2 95       	swap	r26
    2e72:	b2 95       	swap	r27
    2e74:	b0 7f       	andi	r27, 0xF0	; 240
    2e76:	ba 27       	eor	r27, r26
    2e78:	a0 7f       	andi	r26, 0xF0	; 240
    2e7a:	ba 27       	eor	r27, r26
    2e7c:	a3 5b       	subi	r26, 0xB3	; 179
    2e7e:	bb 4f       	sbci	r27, 0xFB	; 251
    2e80:	a2 0f       	add	r26, r18
    2e82:	b3 1f       	adc	r27, r19
    2e84:	4c 91       	ld	r20, X
    2e86:	41 30       	cpi	r20, 0x01	; 1
    2e88:	19 f4       	brne	.+6      	; 0x2e90 <two_way+0x284>
			{
				forward();
    2e8a:	0e 94 9e 12 	call	0x253c	; 0x253c <forward>
    2e8e:	71 c3       	rjmp	.+1762   	; 0x3572 <two_way+0x966>
			}
			else if (trail[x_cor - 1][y_cor] == trail[x_cor][y_cor - 1])
    2e90:	e2 95       	swap	r30
    2e92:	f2 95       	swap	r31
    2e94:	f0 7f       	andi	r31, 0xF0	; 240
    2e96:	fe 27       	eor	r31, r30
    2e98:	e0 7f       	andi	r30, 0xF0	; 240
    2e9a:	fe 27       	eor	r31, r30
    2e9c:	e3 5b       	subi	r30, 0xB3	; 179
    2e9e:	fa 4f       	sbci	r31, 0xFA	; 250
    2ea0:	e2 0f       	add	r30, r18
    2ea2:	f3 1f       	adc	r31, r19
    2ea4:	20 81       	ld	r18, Z
    2ea6:	82 95       	swap	r24
    2ea8:	92 95       	swap	r25
    2eaa:	90 7f       	andi	r25, 0xF0	; 240
    2eac:	98 27       	eor	r25, r24
    2eae:	80 7f       	andi	r24, 0xF0	; 240
    2eb0:	98 27       	eor	r25, r24
    2eb2:	83 5b       	subi	r24, 0xB3	; 179
    2eb4:	9a 4f       	sbci	r25, 0xFA	; 250
    2eb6:	fc 01       	movw	r30, r24
    2eb8:	e6 0f       	add	r30, r22
    2eba:	f7 1f       	adc	r31, r23
    2ebc:	80 81       	ld	r24, Z
    2ebe:	28 13       	cpse	r18, r24
    2ec0:	0d c0       	rjmp	.+26     	; 0x2edc <two_way+0x2d0>
			{
				if (pot_south <= pot_east)
    2ec2:	01 17       	cp	r16, r17
    2ec4:	18 f0       	brcs	.+6      	; 0x2ecc <two_way+0x2c0>
				{
					forward();
    2ec6:	0e 94 9e 12 	call	0x253c	; 0x253c <forward>
    2eca:	53 c3       	rjmp	.+1702   	; 0x3572 <two_way+0x966>
				}
				else if (pot_south > pot_east)
    2ecc:	01 17       	cp	r16, r17
    2ece:	08 f0       	brcs	.+2      	; 0x2ed2 <two_way+0x2c6>
    2ed0:	50 c3       	rjmp	.+1696   	; 0x3572 <two_way+0x966>
				{
					rotate_right();
    2ed2:	0e 94 55 12 	call	0x24aa	; 0x24aa <rotate_right>
					forward();
    2ed6:	0e 94 9e 12 	call	0x253c	; 0x253c <forward>
    2eda:	4b c3       	rjmp	.+1686   	; 0x3572 <two_way+0x966>
				}
			}
			else if (trail[x_cor - 1][y_cor] < trail[x_cor][y_cor - 1]) // moved in the right cell before?
    2edc:	28 17       	cp	r18, r24
    2ede:	28 f4       	brcc	.+10     	; 0x2eea <two_way+0x2de>
			{
				rotate_right();
    2ee0:	0e 94 55 12 	call	0x24aa	; 0x24aa <rotate_right>
				forward();
    2ee4:	0e 94 9e 12 	call	0x253c	; 0x253c <forward>
    2ee8:	44 c3       	rjmp	.+1672   	; 0x3572 <two_way+0x966>
			}
			else if (trail[x_cor][y_cor - 1] < trail[x_cor - 1][y_cor]) // moved in the leading cell before?
    2eea:	82 17       	cp	r24, r18
    2eec:	08 f0       	brcs	.+2      	; 0x2ef0 <two_way+0x2e4>
    2eee:	41 c3       	rjmp	.+1666   	; 0x3572 <two_way+0x966>
			{
				forward();
    2ef0:	0e 94 9e 12 	call	0x253c	; 0x253c <forward>
    2ef4:	3e c3       	rjmp	.+1660   	; 0x3572 <two_way+0x966>
			}
		}

		// Facing west
		else if (face == west)
    2ef6:	b3 30       	cpi	r27, 0x03	; 3
    2ef8:	09 f0       	breq	.+2      	; 0x2efc <two_way+0x2f0>
    2efa:	3b c3       	rjmp	.+1654   	; 0x3572 <two_way+0x966>
		{
			// Deadend: Front
			if (deadend[x_cor - 1][y_cor] == 1)
    2efc:	af 01       	movw	r20, r30
    2efe:	42 95       	swap	r20
    2f00:	52 95       	swap	r21
    2f02:	50 7f       	andi	r21, 0xF0	; 240
    2f04:	54 27       	eor	r21, r20
    2f06:	40 7f       	andi	r20, 0xF0	; 240
    2f08:	54 27       	eor	r21, r20
    2f0a:	43 5b       	subi	r20, 0xB3	; 179
    2f0c:	5b 4f       	sbci	r21, 0xFB	; 251
    2f0e:	42 0f       	add	r20, r18
    2f10:	53 1f       	adc	r21, r19
    2f12:	da 01       	movw	r26, r20
    2f14:	4c 91       	ld	r20, X
    2f16:	41 30       	cpi	r20, 0x01	; 1
    2f18:	29 f4       	brne	.+10     	; 0x2f24 <two_way+0x318>
			{
				rotate_right();
    2f1a:	0e 94 55 12 	call	0x24aa	; 0x24aa <rotate_right>
				forward();
    2f1e:	0e 94 9e 12 	call	0x253c	; 0x253c <forward>
    2f22:	27 c3       	rjmp	.+1614   	; 0x3572 <two_way+0x966>
			}
			// Deadend: Right
			else if (deadend[x_cor][y_cor + 1] == 1)
    2f24:	ac 01       	movw	r20, r24
    2f26:	42 95       	swap	r20
    2f28:	52 95       	swap	r21
    2f2a:	50 7f       	andi	r21, 0xF0	; 240
    2f2c:	54 27       	eor	r21, r20
    2f2e:	40 7f       	andi	r20, 0xF0	; 240
    2f30:	54 27       	eor	r21, r20
    2f32:	43 5b       	subi	r20, 0xB3	; 179
    2f34:	5b 4f       	sbci	r21, 0xFB	; 251
    2f36:	4c 0f       	add	r20, r28
    2f38:	5d 1f       	adc	r21, r29
    2f3a:	da 01       	movw	r26, r20
    2f3c:	4c 91       	ld	r20, X
    2f3e:	41 30       	cpi	r20, 0x01	; 1
    2f40:	19 f4       	brne	.+6      	; 0x2f48 <two_way+0x33c>
			{
				forward();
    2f42:	0e 94 9e 12 	call	0x253c	; 0x253c <forward>
    2f46:	15 c3       	rjmp	.+1578   	; 0x3572 <two_way+0x966>
			}
			else if (trail[x_cor - 1][y_cor] == trail[x_cor][y_cor + 1])
    2f48:	e2 95       	swap	r30
    2f4a:	f2 95       	swap	r31
    2f4c:	f0 7f       	andi	r31, 0xF0	; 240
    2f4e:	fe 27       	eor	r31, r30
    2f50:	e0 7f       	andi	r30, 0xF0	; 240
    2f52:	fe 27       	eor	r31, r30
    2f54:	e3 5b       	subi	r30, 0xB3	; 179
    2f56:	fa 4f       	sbci	r31, 0xFA	; 250
    2f58:	e2 0f       	add	r30, r18
    2f5a:	f3 1f       	adc	r31, r19
    2f5c:	20 81       	ld	r18, Z
    2f5e:	82 95       	swap	r24
    2f60:	92 95       	swap	r25
    2f62:	90 7f       	andi	r25, 0xF0	; 240
    2f64:	98 27       	eor	r25, r24
    2f66:	80 7f       	andi	r24, 0xF0	; 240
    2f68:	98 27       	eor	r25, r24
    2f6a:	83 5b       	subi	r24, 0xB3	; 179
    2f6c:	9a 4f       	sbci	r25, 0xFA	; 250
    2f6e:	c8 0f       	add	r28, r24
    2f70:	d9 1f       	adc	r29, r25
    2f72:	88 81       	ld	r24, Y
    2f74:	28 13       	cpse	r18, r24
    2f76:	0d c0       	rjmp	.+26     	; 0x2f92 <two_way+0x386>
			{
				if (pot_north < pot_west)
    2f78:	fe 14       	cp	r15, r14
    2f7a:	28 f4       	brcc	.+10     	; 0x2f86 <two_way+0x37a>
				{
					rotate_right();
    2f7c:	0e 94 55 12 	call	0x24aa	; 0x24aa <rotate_right>
					forward();
    2f80:	0e 94 9e 12 	call	0x253c	; 0x253c <forward>
    2f84:	f6 c2       	rjmp	.+1516   	; 0x3572 <two_way+0x966>
				}
				else if (pot_north >= pot_west)
    2f86:	fe 14       	cp	r15, r14
    2f88:	08 f4       	brcc	.+2      	; 0x2f8c <two_way+0x380>
    2f8a:	f3 c2       	rjmp	.+1510   	; 0x3572 <two_way+0x966>
				{
					forward();
    2f8c:	0e 94 9e 12 	call	0x253c	; 0x253c <forward>
    2f90:	f0 c2       	rjmp	.+1504   	; 0x3572 <two_way+0x966>
				}
			}
			else if (trail[x_cor - 1][y_cor] < trail[x_cor][y_cor + 1]) // moved in the right cell before?
    2f92:	28 17       	cp	r18, r24
    2f94:	18 f4       	brcc	.+6      	; 0x2f9c <two_way+0x390>
			{
				forward();
    2f96:	0e 94 9e 12 	call	0x253c	; 0x253c <forward>
    2f9a:	eb c2       	rjmp	.+1494   	; 0x3572 <two_way+0x966>
			}
			else if (trail[x_cor][y_cor + 1] < trail[x_cor - 1][y_cor]) // moved in the leading cell before?
    2f9c:	82 17       	cp	r24, r18
    2f9e:	08 f0       	brcs	.+2      	; 0x2fa2 <two_way+0x396>
    2fa0:	e8 c2       	rjmp	.+1488   	; 0x3572 <two_way+0x966>
			{
				rotate_right();
    2fa2:	0e 94 55 12 	call	0x24aa	; 0x24aa <rotate_right>
				forward();
    2fa6:	0e 94 9e 12 	call	0x253c	; 0x253c <forward>
    2faa:	e3 c2       	rjmp	.+1478   	; 0x3572 <two_way+0x966>
		}
	}
	// ------------------
	// front way BLOCKED
	// ------------------
	else if (way_front == 1)
    2fac:	b0 91 4e 06 	lds	r27, 0x064E	; 0x80064e <way_front>
    2fb0:	b1 30       	cpi	r27, 0x01	; 1
    2fb2:	09 f0       	breq	.+2      	; 0x2fb6 <two_way+0x3aa>
    2fb4:	71 c1       	rjmp	.+738    	; 0x3298 <two_way+0x68c>
	{
		// Facing north
		if (face == north)
    2fb6:	b0 91 49 03 	lds	r27, 0x0349	; 0x800349 <face>
    2fba:	b1 11       	cpse	r27, r1
    2fbc:	5d c0       	rjmp	.+186    	; 0x3078 <two_way+0x46c>
		{
			// Deadend: Left
			if (deadend[x_cor - 1][y_cor] == 1)
    2fbe:	ef 01       	movw	r28, r30
    2fc0:	c2 95       	swap	r28
    2fc2:	d2 95       	swap	r29
    2fc4:	d0 7f       	andi	r29, 0xF0	; 240
    2fc6:	dc 27       	eor	r29, r28
    2fc8:	c0 7f       	andi	r28, 0xF0	; 240
    2fca:	dc 27       	eor	r29, r28
    2fcc:	c3 5b       	subi	r28, 0xB3	; 179
    2fce:	db 4f       	sbci	r29, 0xFB	; 251
    2fd0:	c2 0f       	add	r28, r18
    2fd2:	d3 1f       	adc	r29, r19
    2fd4:	88 81       	ld	r24, Y
    2fd6:	81 30       	cpi	r24, 0x01	; 1
    2fd8:	29 f4       	brne	.+10     	; 0x2fe4 <two_way+0x3d8>
			{
				rotate_right();
    2fda:	0e 94 55 12 	call	0x24aa	; 0x24aa <rotate_right>
				forward();
    2fde:	0e 94 9e 12 	call	0x253c	; 0x253c <forward>
    2fe2:	c7 c2       	rjmp	.+1422   	; 0x3572 <two_way+0x966>
			}
			// Deadend: Right
			else if (deadend[x_cor + 1][y_cor] == 1)
    2fe4:	ea 01       	movw	r28, r20
    2fe6:	c2 95       	swap	r28
    2fe8:	d2 95       	swap	r29
    2fea:	d0 7f       	andi	r29, 0xF0	; 240
    2fec:	dc 27       	eor	r29, r28
    2fee:	c0 7f       	andi	r28, 0xF0	; 240
    2ff0:	dc 27       	eor	r29, r28
    2ff2:	c3 5b       	subi	r28, 0xB3	; 179
    2ff4:	db 4f       	sbci	r29, 0xFB	; 251
    2ff6:	c2 0f       	add	r28, r18
    2ff8:	d3 1f       	adc	r29, r19
    2ffa:	88 81       	ld	r24, Y
    2ffc:	81 30       	cpi	r24, 0x01	; 1
    2ffe:	29 f4       	brne	.+10     	; 0x300a <two_way+0x3fe>
			{
				rotate_left();
    3000:	0e 94 0c 12 	call	0x2418	; 0x2418 <rotate_left>
				forward();
    3004:	0e 94 9e 12 	call	0x253c	; 0x253c <forward>
    3008:	b4 c2       	rjmp	.+1384   	; 0x3572 <two_way+0x966>
			}
			else if (trail[x_cor + 1][y_cor] == trail[x_cor - 1][y_cor])
    300a:	ea 01       	movw	r28, r20
    300c:	c2 95       	swap	r28
    300e:	d2 95       	swap	r29
    3010:	d0 7f       	andi	r29, 0xF0	; 240
    3012:	dc 27       	eor	r29, r28
    3014:	c0 7f       	andi	r28, 0xF0	; 240
    3016:	dc 27       	eor	r29, r28
    3018:	c3 5b       	subi	r28, 0xB3	; 179
    301a:	da 4f       	sbci	r29, 0xFA	; 250
    301c:	c2 0f       	add	r28, r18
    301e:	d3 1f       	adc	r29, r19
    3020:	98 81       	ld	r25, Y
    3022:	e2 95       	swap	r30
    3024:	f2 95       	swap	r31
    3026:	f0 7f       	andi	r31, 0xF0	; 240
    3028:	fe 27       	eor	r31, r30
    302a:	e0 7f       	andi	r30, 0xF0	; 240
    302c:	fe 27       	eor	r31, r30
    302e:	e3 5b       	subi	r30, 0xB3	; 179
    3030:	fa 4f       	sbci	r31, 0xFA	; 250
    3032:	e2 0f       	add	r30, r18
    3034:	f3 1f       	adc	r31, r19
    3036:	80 81       	ld	r24, Z
    3038:	98 13       	cpse	r25, r24
    303a:	0f c0       	rjmp	.+30     	; 0x305a <two_way+0x44e>
			{
				if (pot_west < pot_east)
    303c:	e0 16       	cp	r14, r16
    303e:	28 f4       	brcc	.+10     	; 0x304a <two_way+0x43e>
				{
					rotate_left();
    3040:	0e 94 0c 12 	call	0x2418	; 0x2418 <rotate_left>
					forward();
    3044:	0e 94 9e 12 	call	0x253c	; 0x253c <forward>
    3048:	94 c2       	rjmp	.+1320   	; 0x3572 <two_way+0x966>
				}
				else if (pot_west >= pot_east)
    304a:	e0 16       	cp	r14, r16
    304c:	08 f4       	brcc	.+2      	; 0x3050 <two_way+0x444>
    304e:	91 c2       	rjmp	.+1314   	; 0x3572 <two_way+0x966>
				{
					rotate_right();
    3050:	0e 94 55 12 	call	0x24aa	; 0x24aa <rotate_right>
					forward();
    3054:	0e 94 9e 12 	call	0x253c	; 0x253c <forward>
    3058:	8c c2       	rjmp	.+1304   	; 0x3572 <two_way+0x966>
				}
			}
			else if (trail[x_cor - 1][y_cor] < trail[x_cor + 1][y_cor]) // moved in the right cell before?
    305a:	89 17       	cp	r24, r25
    305c:	28 f4       	brcc	.+10     	; 0x3068 <two_way+0x45c>
			{
				rotate_left();
    305e:	0e 94 0c 12 	call	0x2418	; 0x2418 <rotate_left>
				forward();
    3062:	0e 94 9e 12 	call	0x253c	; 0x253c <forward>
    3066:	85 c2       	rjmp	.+1290   	; 0x3572 <two_way+0x966>
			}
			else if (trail[x_cor + 1][y_cor] < trail[x_cor - 1][y_cor]) // moved in the leading cell before?
    3068:	98 17       	cp	r25, r24
    306a:	08 f0       	brcs	.+2      	; 0x306e <two_way+0x462>
    306c:	82 c2       	rjmp	.+1284   	; 0x3572 <two_way+0x966>
			{
				rotate_right();
    306e:	0e 94 55 12 	call	0x24aa	; 0x24aa <rotate_right>
				forward();
    3072:	0e 94 9e 12 	call	0x253c	; 0x253c <forward>
    3076:	7d c2       	rjmp	.+1274   	; 0x3572 <two_way+0x966>
			}
		}

		// Facing east
		else if (face == east)
    3078:	b1 30       	cpi	r27, 0x01	; 1
    307a:	09 f0       	breq	.+2      	; 0x307e <two_way+0x472>
    307c:	55 c0       	rjmp	.+170    	; 0x3128 <two_way+0x51c>
		{
			// Deadend: Left
			if (deadend[x_cor][y_cor + 1] == 1)
    307e:	fc 01       	movw	r30, r24
    3080:	e2 95       	swap	r30
    3082:	f2 95       	swap	r31
    3084:	f0 7f       	andi	r31, 0xF0	; 240
    3086:	fe 27       	eor	r31, r30
    3088:	e0 7f       	andi	r30, 0xF0	; 240
    308a:	fe 27       	eor	r31, r30
    308c:	e3 5b       	subi	r30, 0xB3	; 179
    308e:	fb 4f       	sbci	r31, 0xFB	; 251
    3090:	ec 0f       	add	r30, r28
    3092:	fd 1f       	adc	r31, r29
    3094:	20 81       	ld	r18, Z
    3096:	21 30       	cpi	r18, 0x01	; 1
    3098:	29 f4       	brne	.+10     	; 0x30a4 <two_way+0x498>
			{
				rotate_right();
    309a:	0e 94 55 12 	call	0x24aa	; 0x24aa <rotate_right>
				forward();
    309e:	0e 94 9e 12 	call	0x253c	; 0x253c <forward>
    30a2:	67 c2       	rjmp	.+1230   	; 0x3572 <two_way+0x966>
			}
			// Deadend: Right
			else if (deadend[x_cor][y_cor - 1] == 1)
    30a4:	fc 01       	movw	r30, r24
    30a6:	e2 95       	swap	r30
    30a8:	f2 95       	swap	r31
    30aa:	f0 7f       	andi	r31, 0xF0	; 240
    30ac:	fe 27       	eor	r31, r30
    30ae:	e0 7f       	andi	r30, 0xF0	; 240
    30b0:	fe 27       	eor	r31, r30
    30b2:	e3 5b       	subi	r30, 0xB3	; 179
    30b4:	fb 4f       	sbci	r31, 0xFB	; 251
    30b6:	e6 0f       	add	r30, r22
    30b8:	f7 1f       	adc	r31, r23
    30ba:	20 81       	ld	r18, Z
    30bc:	21 30       	cpi	r18, 0x01	; 1
    30be:	29 f4       	brne	.+10     	; 0x30ca <two_way+0x4be>
			{
				rotate_left();
    30c0:	0e 94 0c 12 	call	0x2418	; 0x2418 <rotate_left>
				forward();
    30c4:	0e 94 9e 12 	call	0x253c	; 0x253c <forward>
    30c8:	54 c2       	rjmp	.+1192   	; 0x3572 <two_way+0x966>
			}

			else if (trail[x_cor][y_cor + 1] == trail[x_cor][y_cor - 1])
    30ca:	82 95       	swap	r24
    30cc:	92 95       	swap	r25
    30ce:	90 7f       	andi	r25, 0xF0	; 240
    30d0:	98 27       	eor	r25, r24
    30d2:	80 7f       	andi	r24, 0xF0	; 240
    30d4:	98 27       	eor	r25, r24
    30d6:	83 5b       	subi	r24, 0xB3	; 179
    30d8:	9a 4f       	sbci	r25, 0xFA	; 250
    30da:	c8 0f       	add	r28, r24
    30dc:	d9 1f       	adc	r29, r25
    30de:	28 81       	ld	r18, Y
    30e0:	fc 01       	movw	r30, r24
    30e2:	e6 0f       	add	r30, r22
    30e4:	f7 1f       	adc	r31, r23
    30e6:	80 81       	ld	r24, Z
    30e8:	28 13       	cpse	r18, r24
    30ea:	0f c0       	rjmp	.+30     	; 0x310a <two_way+0x4fe>
			{
				if (pot_north < pot_south)
    30ec:	f1 16       	cp	r15, r17
    30ee:	28 f4       	brcc	.+10     	; 0x30fa <two_way+0x4ee>
				{
					rotate_left();
    30f0:	0e 94 0c 12 	call	0x2418	; 0x2418 <rotate_left>
					forward();
    30f4:	0e 94 9e 12 	call	0x253c	; 0x253c <forward>
    30f8:	3c c2       	rjmp	.+1144   	; 0x3572 <two_way+0x966>
				}
				else if (pot_north >= pot_south)
    30fa:	f1 16       	cp	r15, r17
    30fc:	08 f4       	brcc	.+2      	; 0x3100 <two_way+0x4f4>
    30fe:	39 c2       	rjmp	.+1138   	; 0x3572 <two_way+0x966>
				{
					rotate_right();
    3100:	0e 94 55 12 	call	0x24aa	; 0x24aa <rotate_right>
					forward();
    3104:	0e 94 9e 12 	call	0x253c	; 0x253c <forward>
    3108:	34 c2       	rjmp	.+1128   	; 0x3572 <two_way+0x966>
				}
			}
			else if (trail[x_cor][y_cor - 1] < trail[x_cor][y_cor + 1]) // moved in the right cell before?
    310a:	82 17       	cp	r24, r18
    310c:	28 f4       	brcc	.+10     	; 0x3118 <two_way+0x50c>
			{
				rotate_right();
    310e:	0e 94 55 12 	call	0x24aa	; 0x24aa <rotate_right>
				forward();
    3112:	0e 94 9e 12 	call	0x253c	; 0x253c <forward>
    3116:	2d c2       	rjmp	.+1114   	; 0x3572 <two_way+0x966>
			}
			else if (trail[x_cor][y_cor + 1] < trail[x_cor][y_cor - 1]) // moved in the leading cell before?
    3118:	28 17       	cp	r18, r24
    311a:	08 f0       	brcs	.+2      	; 0x311e <two_way+0x512>
    311c:	2a c2       	rjmp	.+1108   	; 0x3572 <two_way+0x966>
			{
				rotate_left();
    311e:	0e 94 0c 12 	call	0x2418	; 0x2418 <rotate_left>
				forward();
    3122:	0e 94 9e 12 	call	0x253c	; 0x253c <forward>
    3126:	25 c2       	rjmp	.+1098   	; 0x3572 <two_way+0x966>
			}
		}

		// Facing South
		else if (face == south)
    3128:	b2 30       	cpi	r27, 0x02	; 2
    312a:	09 f0       	breq	.+2      	; 0x312e <two_way+0x522>
    312c:	5d c0       	rjmp	.+186    	; 0x31e8 <two_way+0x5dc>
		{
			// Deadend: Left
			if (deadend[x_cor + 1][y_cor] == 1)
    312e:	ea 01       	movw	r28, r20
    3130:	c2 95       	swap	r28
    3132:	d2 95       	swap	r29
    3134:	d0 7f       	andi	r29, 0xF0	; 240
    3136:	dc 27       	eor	r29, r28
    3138:	c0 7f       	andi	r28, 0xF0	; 240
    313a:	dc 27       	eor	r29, r28
    313c:	c3 5b       	subi	r28, 0xB3	; 179
    313e:	db 4f       	sbci	r29, 0xFB	; 251
    3140:	c2 0f       	add	r28, r18
    3142:	d3 1f       	adc	r29, r19
    3144:	88 81       	ld	r24, Y
    3146:	81 30       	cpi	r24, 0x01	; 1
    3148:	29 f4       	brne	.+10     	; 0x3154 <two_way+0x548>
			{
				rotate_right();
    314a:	0e 94 55 12 	call	0x24aa	; 0x24aa <rotate_right>
				forward();
    314e:	0e 94 9e 12 	call	0x253c	; 0x253c <forward>
    3152:	0f c2       	rjmp	.+1054   	; 0x3572 <two_way+0x966>
			}
			// Deadend: Right
			else if (deadend[x_cor - 1][y_cor] == 1)
    3154:	ef 01       	movw	r28, r30
    3156:	c2 95       	swap	r28
    3158:	d2 95       	swap	r29
    315a:	d0 7f       	andi	r29, 0xF0	; 240
    315c:	dc 27       	eor	r29, r28
    315e:	c0 7f       	andi	r28, 0xF0	; 240
    3160:	dc 27       	eor	r29, r28
    3162:	c3 5b       	subi	r28, 0xB3	; 179
    3164:	db 4f       	sbci	r29, 0xFB	; 251
    3166:	c2 0f       	add	r28, r18
    3168:	d3 1f       	adc	r29, r19
    316a:	88 81       	ld	r24, Y
    316c:	81 30       	cpi	r24, 0x01	; 1
    316e:	29 f4       	brne	.+10     	; 0x317a <two_way+0x56e>
			{
				rotate_left();
    3170:	0e 94 0c 12 	call	0x2418	; 0x2418 <rotate_left>
				forward();
    3174:	0e 94 9e 12 	call	0x253c	; 0x253c <forward>
    3178:	fc c1       	rjmp	.+1016   	; 0x3572 <two_way+0x966>
			}
			else if (trail[x_cor + 1][y_cor] == trail[x_cor - 1][y_cor])
    317a:	ea 01       	movw	r28, r20
    317c:	c2 95       	swap	r28
    317e:	d2 95       	swap	r29
    3180:	d0 7f       	andi	r29, 0xF0	; 240
    3182:	dc 27       	eor	r29, r28
    3184:	c0 7f       	andi	r28, 0xF0	; 240
    3186:	dc 27       	eor	r29, r28
    3188:	c3 5b       	subi	r28, 0xB3	; 179
    318a:	da 4f       	sbci	r29, 0xFA	; 250
    318c:	c2 0f       	add	r28, r18
    318e:	d3 1f       	adc	r29, r19
    3190:	98 81       	ld	r25, Y
    3192:	e2 95       	swap	r30
    3194:	f2 95       	swap	r31
    3196:	f0 7f       	andi	r31, 0xF0	; 240
    3198:	fe 27       	eor	r31, r30
    319a:	e0 7f       	andi	r30, 0xF0	; 240
    319c:	fe 27       	eor	r31, r30
    319e:	e3 5b       	subi	r30, 0xB3	; 179
    31a0:	fa 4f       	sbci	r31, 0xFA	; 250
    31a2:	e2 0f       	add	r30, r18
    31a4:	f3 1f       	adc	r31, r19
    31a6:	80 81       	ld	r24, Z
    31a8:	98 13       	cpse	r25, r24
    31aa:	0f c0       	rjmp	.+30     	; 0x31ca <two_way+0x5be>
			{
				if (pot_west < pot_east)
    31ac:	e0 16       	cp	r14, r16
    31ae:	28 f4       	brcc	.+10     	; 0x31ba <two_way+0x5ae>
				{
					rotate_right();
    31b0:	0e 94 55 12 	call	0x24aa	; 0x24aa <rotate_right>
					forward();
    31b4:	0e 94 9e 12 	call	0x253c	; 0x253c <forward>
    31b8:	dc c1       	rjmp	.+952    	; 0x3572 <two_way+0x966>
				}
				else if (pot_west >= pot_east)
    31ba:	e0 16       	cp	r14, r16
    31bc:	08 f4       	brcc	.+2      	; 0x31c0 <two_way+0x5b4>
    31be:	d9 c1       	rjmp	.+946    	; 0x3572 <two_way+0x966>
				{
					rotate_left();
    31c0:	0e 94 0c 12 	call	0x2418	; 0x2418 <rotate_left>
					forward();
    31c4:	0e 94 9e 12 	call	0x253c	; 0x253c <forward>
    31c8:	d4 c1       	rjmp	.+936    	; 0x3572 <two_way+0x966>
				}
			}
			else if (trail[x_cor - 1][y_cor] < trail[x_cor + 1][y_cor]) // moved in the right cell before?
    31ca:	89 17       	cp	r24, r25
    31cc:	28 f4       	brcc	.+10     	; 0x31d8 <two_way+0x5cc>
			{
				rotate_right();
    31ce:	0e 94 55 12 	call	0x24aa	; 0x24aa <rotate_right>
				forward();
    31d2:	0e 94 9e 12 	call	0x253c	; 0x253c <forward>
    31d6:	cd c1       	rjmp	.+922    	; 0x3572 <two_way+0x966>
			}
			else if (trail[x_cor + 1][y_cor] < trail[x_cor - 1][y_cor]) // moved in the leading cell before?
    31d8:	98 17       	cp	r25, r24
    31da:	08 f0       	brcs	.+2      	; 0x31de <two_way+0x5d2>
    31dc:	ca c1       	rjmp	.+916    	; 0x3572 <two_way+0x966>
			{
				rotate_left();
    31de:	0e 94 0c 12 	call	0x2418	; 0x2418 <rotate_left>
				forward();
    31e2:	0e 94 9e 12 	call	0x253c	; 0x253c <forward>
    31e6:	c5 c1       	rjmp	.+906    	; 0x3572 <two_way+0x966>
			}
		}

		// Facing west
		else if (face == west)
    31e8:	b3 30       	cpi	r27, 0x03	; 3
    31ea:	09 f0       	breq	.+2      	; 0x31ee <two_way+0x5e2>
    31ec:	c2 c1       	rjmp	.+900    	; 0x3572 <two_way+0x966>
		{
			// Deadend: Left
			if (deadend[x_cor][y_cor - 1] == 1)
    31ee:	fc 01       	movw	r30, r24
    31f0:	e2 95       	swap	r30
    31f2:	f2 95       	swap	r31
    31f4:	f0 7f       	andi	r31, 0xF0	; 240
    31f6:	fe 27       	eor	r31, r30
    31f8:	e0 7f       	andi	r30, 0xF0	; 240
    31fa:	fe 27       	eor	r31, r30
    31fc:	e3 5b       	subi	r30, 0xB3	; 179
    31fe:	fb 4f       	sbci	r31, 0xFB	; 251
    3200:	e6 0f       	add	r30, r22
    3202:	f7 1f       	adc	r31, r23
    3204:	20 81       	ld	r18, Z
    3206:	21 30       	cpi	r18, 0x01	; 1
    3208:	29 f4       	brne	.+10     	; 0x3214 <two_way+0x608>
			{
				rotate_right();
    320a:	0e 94 55 12 	call	0x24aa	; 0x24aa <rotate_right>
				forward();
    320e:	0e 94 9e 12 	call	0x253c	; 0x253c <forward>
    3212:	af c1       	rjmp	.+862    	; 0x3572 <two_way+0x966>
			}
			// Deadend: Right
			else if (deadend[x_cor][y_cor + 1] == 1)
    3214:	fc 01       	movw	r30, r24
    3216:	e2 95       	swap	r30
    3218:	f2 95       	swap	r31
    321a:	f0 7f       	andi	r31, 0xF0	; 240
    321c:	fe 27       	eor	r31, r30
    321e:	e0 7f       	andi	r30, 0xF0	; 240
    3220:	fe 27       	eor	r31, r30
    3222:	e3 5b       	subi	r30, 0xB3	; 179
    3224:	fb 4f       	sbci	r31, 0xFB	; 251
    3226:	ec 0f       	add	r30, r28
    3228:	fd 1f       	adc	r31, r29
    322a:	20 81       	ld	r18, Z
    322c:	21 30       	cpi	r18, 0x01	; 1
    322e:	29 f4       	brne	.+10     	; 0x323a <two_way+0x62e>
			{
				rotate_left();
    3230:	0e 94 0c 12 	call	0x2418	; 0x2418 <rotate_left>
				forward();
    3234:	0e 94 9e 12 	call	0x253c	; 0x253c <forward>
    3238:	9c c1       	rjmp	.+824    	; 0x3572 <two_way+0x966>
			}
			else if (trail[x_cor][y_cor - 1] == trail[x_cor][y_cor + 1])
    323a:	82 95       	swap	r24
    323c:	92 95       	swap	r25
    323e:	90 7f       	andi	r25, 0xF0	; 240
    3240:	98 27       	eor	r25, r24
    3242:	80 7f       	andi	r24, 0xF0	; 240
    3244:	98 27       	eor	r25, r24
    3246:	83 5b       	subi	r24, 0xB3	; 179
    3248:	9a 4f       	sbci	r25, 0xFA	; 250
    324a:	fc 01       	movw	r30, r24
    324c:	e6 0f       	add	r30, r22
    324e:	f7 1f       	adc	r31, r23
    3250:	20 81       	ld	r18, Z
    3252:	c8 0f       	add	r28, r24
    3254:	d9 1f       	adc	r29, r25
    3256:	88 81       	ld	r24, Y
    3258:	28 13       	cpse	r18, r24
    325a:	0f c0       	rjmp	.+30     	; 0x327a <two_way+0x66e>
			{
				if (pot_north <= pot_south)
    325c:	1f 15       	cp	r17, r15
    325e:	28 f0       	brcs	.+10     	; 0x326a <two_way+0x65e>
				{
					rotate_right();
    3260:	0e 94 55 12 	call	0x24aa	; 0x24aa <rotate_right>
					forward();
    3264:	0e 94 9e 12 	call	0x253c	; 0x253c <forward>
    3268:	84 c1       	rjmp	.+776    	; 0x3572 <two_way+0x966>
				}
				else if (pot_north > pot_south)
    326a:	1f 15       	cp	r17, r15
    326c:	08 f0       	brcs	.+2      	; 0x3270 <two_way+0x664>
    326e:	81 c1       	rjmp	.+770    	; 0x3572 <two_way+0x966>
				{
					rotate_left();
    3270:	0e 94 0c 12 	call	0x2418	; 0x2418 <rotate_left>
					forward();
    3274:	0e 94 9e 12 	call	0x253c	; 0x253c <forward>
    3278:	7c c1       	rjmp	.+760    	; 0x3572 <two_way+0x966>
				}
			}
			else if (trail[x_cor][y_cor + 1] < trail[x_cor][y_cor - 1]) // moved in the right cell before?
    327a:	82 17       	cp	r24, r18
    327c:	28 f4       	brcc	.+10     	; 0x3288 <two_way+0x67c>
			{
				rotate_right();
    327e:	0e 94 55 12 	call	0x24aa	; 0x24aa <rotate_right>
				forward();
    3282:	0e 94 9e 12 	call	0x253c	; 0x253c <forward>
    3286:	75 c1       	rjmp	.+746    	; 0x3572 <two_way+0x966>
			}
			else if (trail[x_cor][y_cor - 1] < trail[x_cor][y_cor + 1]) // moved in the leading cell before?
    3288:	28 17       	cp	r18, r24
    328a:	08 f0       	brcs	.+2      	; 0x328e <two_way+0x682>
    328c:	72 c1       	rjmp	.+740    	; 0x3572 <two_way+0x966>
			{
				rotate_left();
    328e:	0e 94 0c 12 	call	0x2418	; 0x2418 <rotate_left>
				forward();
    3292:	0e 94 9e 12 	call	0x253c	; 0x253c <forward>
    3296:	6d c1       	rjmp	.+730    	; 0x3572 <two_way+0x966>
		}
	}
	// ------------------
	// right way BLOCKED
	// ------------------
	else if (way_right == 1)
    3298:	b0 91 4a 03 	lds	r27, 0x034A	; 0x80034a <way_right>
    329c:	b1 30       	cpi	r27, 0x01	; 1
    329e:	09 f0       	breq	.+2      	; 0x32a2 <two_way+0x696>
    32a0:	68 c1       	rjmp	.+720    	; 0x3572 <two_way+0x966>
	{
		// Facing North
		if (face == north)
    32a2:	b0 91 49 03 	lds	r27, 0x0349	; 0x800349 <face>
    32a6:	b1 11       	cpse	r27, r1
    32a8:	58 c0       	rjmp	.+176    	; 0x335a <two_way+0x74e>
		{
			// Deadend: Left
			if (deadend[x_cor - 1][y_cor] == 1)
    32aa:	af 01       	movw	r20, r30
    32ac:	42 95       	swap	r20
    32ae:	52 95       	swap	r21
    32b0:	50 7f       	andi	r21, 0xF0	; 240
    32b2:	54 27       	eor	r21, r20
    32b4:	40 7f       	andi	r20, 0xF0	; 240
    32b6:	54 27       	eor	r21, r20
    32b8:	43 5b       	subi	r20, 0xB3	; 179
    32ba:	5b 4f       	sbci	r21, 0xFB	; 251
    32bc:	42 0f       	add	r20, r18
    32be:	53 1f       	adc	r21, r19
    32c0:	da 01       	movw	r26, r20
    32c2:	4c 91       	ld	r20, X
    32c4:	41 30       	cpi	r20, 0x01	; 1
    32c6:	19 f4       	brne	.+6      	; 0x32ce <two_way+0x6c2>
			{
				forward();
    32c8:	0e 94 9e 12 	call	0x253c	; 0x253c <forward>
    32cc:	52 c1       	rjmp	.+676    	; 0x3572 <two_way+0x966>
			}
			// Deadend: Front
			else if (deadend[x_cor][y_cor + 1] == 1)
    32ce:	ac 01       	movw	r20, r24
    32d0:	42 95       	swap	r20
    32d2:	52 95       	swap	r21
    32d4:	50 7f       	andi	r21, 0xF0	; 240
    32d6:	54 27       	eor	r21, r20
    32d8:	40 7f       	andi	r20, 0xF0	; 240
    32da:	54 27       	eor	r21, r20
    32dc:	43 5b       	subi	r20, 0xB3	; 179
    32de:	5b 4f       	sbci	r21, 0xFB	; 251
    32e0:	4c 0f       	add	r20, r28
    32e2:	5d 1f       	adc	r21, r29
    32e4:	da 01       	movw	r26, r20
    32e6:	4c 91       	ld	r20, X
    32e8:	41 30       	cpi	r20, 0x01	; 1
    32ea:	29 f4       	brne	.+10     	; 0x32f6 <two_way+0x6ea>
			{
				rotate_left();
    32ec:	0e 94 0c 12 	call	0x2418	; 0x2418 <rotate_left>
				forward();
    32f0:	0e 94 9e 12 	call	0x253c	; 0x253c <forward>
    32f4:	3e c1       	rjmp	.+636    	; 0x3572 <two_way+0x966>
			}
			else if (trail[x_cor][y_cor + 1] == trail[x_cor - 1][y_cor])
    32f6:	82 95       	swap	r24
    32f8:	92 95       	swap	r25
    32fa:	90 7f       	andi	r25, 0xF0	; 240
    32fc:	98 27       	eor	r25, r24
    32fe:	80 7f       	andi	r24, 0xF0	; 240
    3300:	98 27       	eor	r25, r24
    3302:	83 5b       	subi	r24, 0xB3	; 179
    3304:	9a 4f       	sbci	r25, 0xFA	; 250
    3306:	c8 0f       	add	r28, r24
    3308:	d9 1f       	adc	r29, r25
    330a:	98 81       	ld	r25, Y
    330c:	e2 95       	swap	r30
    330e:	f2 95       	swap	r31
    3310:	f0 7f       	andi	r31, 0xF0	; 240
    3312:	fe 27       	eor	r31, r30
    3314:	e0 7f       	andi	r30, 0xF0	; 240
    3316:	fe 27       	eor	r31, r30
    3318:	e3 5b       	subi	r30, 0xB3	; 179
    331a:	fa 4f       	sbci	r31, 0xFA	; 250
    331c:	e2 0f       	add	r30, r18
    331e:	f3 1f       	adc	r31, r19
    3320:	80 81       	ld	r24, Z
    3322:	98 13       	cpse	r25, r24
    3324:	0d c0       	rjmp	.+26     	; 0x3340 <two_way+0x734>
			{
				if (pot_west < pot_north)
    3326:	ef 14       	cp	r14, r15
    3328:	28 f4       	brcc	.+10     	; 0x3334 <two_way+0x728>
				{
					rotate_left();
    332a:	0e 94 0c 12 	call	0x2418	; 0x2418 <rotate_left>
					forward();
    332e:	0e 94 9e 12 	call	0x253c	; 0x253c <forward>
    3332:	1f c1       	rjmp	.+574    	; 0x3572 <two_way+0x966>
				}
				else if (pot_west >= pot_north)
    3334:	ef 14       	cp	r14, r15
    3336:	08 f4       	brcc	.+2      	; 0x333a <two_way+0x72e>
    3338:	1c c1       	rjmp	.+568    	; 0x3572 <two_way+0x966>
				{
					forward();
    333a:	0e 94 9e 12 	call	0x253c	; 0x253c <forward>
    333e:	19 c1       	rjmp	.+562    	; 0x3572 <two_way+0x966>
				}
			}
			else if (trail[x_cor][y_cor + 1] < trail[x_cor - 1][y_cor]) // moved in the right cell before?
    3340:	98 17       	cp	r25, r24
    3342:	18 f4       	brcc	.+6      	; 0x334a <two_way+0x73e>
			{
				// rotate_right();
				forward();
    3344:	0e 94 9e 12 	call	0x253c	; 0x253c <forward>
    3348:	14 c1       	rjmp	.+552    	; 0x3572 <two_way+0x966>
			}
			else if (trail[x_cor - 1][y_cor] < trail[x_cor][y_cor + 1]) // moved in the leading cell before?
    334a:	89 17       	cp	r24, r25
    334c:	08 f0       	brcs	.+2      	; 0x3350 <two_way+0x744>
    334e:	11 c1       	rjmp	.+546    	; 0x3572 <two_way+0x966>
			{
				rotate_left();
    3350:	0e 94 0c 12 	call	0x2418	; 0x2418 <rotate_left>
				forward();
    3354:	0e 94 9e 12 	call	0x253c	; 0x253c <forward>
    3358:	0c c1       	rjmp	.+536    	; 0x3572 <two_way+0x966>
			}
		}
		// Facing East
		else if (face == east)
    335a:	b1 30       	cpi	r27, 0x01	; 1
    335c:	09 f0       	breq	.+2      	; 0x3360 <two_way+0x754>
    335e:	57 c0       	rjmp	.+174    	; 0x340e <two_way+0x802>
		{
			// Deadend: Left
			if (deadend[x_cor][y_cor + 1] == 1)
    3360:	fc 01       	movw	r30, r24
    3362:	e2 95       	swap	r30
    3364:	f2 95       	swap	r31
    3366:	f0 7f       	andi	r31, 0xF0	; 240
    3368:	fe 27       	eor	r31, r30
    336a:	e0 7f       	andi	r30, 0xF0	; 240
    336c:	fe 27       	eor	r31, r30
    336e:	e3 5b       	subi	r30, 0xB3	; 179
    3370:	fb 4f       	sbci	r31, 0xFB	; 251
    3372:	ec 0f       	add	r30, r28
    3374:	fd 1f       	adc	r31, r29
    3376:	60 81       	ld	r22, Z
    3378:	61 30       	cpi	r22, 0x01	; 1
    337a:	19 f4       	brne	.+6      	; 0x3382 <two_way+0x776>
			{
				forward();
    337c:	0e 94 9e 12 	call	0x253c	; 0x253c <forward>
    3380:	f8 c0       	rjmp	.+496    	; 0x3572 <two_way+0x966>
			}
			// Deadend: Front
			else if (deadend[x_cor + 1][y_cor] == 1)
    3382:	fa 01       	movw	r30, r20
    3384:	e2 95       	swap	r30
    3386:	f2 95       	swap	r31
    3388:	f0 7f       	andi	r31, 0xF0	; 240
    338a:	fe 27       	eor	r31, r30
    338c:	e0 7f       	andi	r30, 0xF0	; 240
    338e:	fe 27       	eor	r31, r30
    3390:	e3 5b       	subi	r30, 0xB3	; 179
    3392:	fb 4f       	sbci	r31, 0xFB	; 251
    3394:	e2 0f       	add	r30, r18
    3396:	f3 1f       	adc	r31, r19
    3398:	60 81       	ld	r22, Z
    339a:	61 30       	cpi	r22, 0x01	; 1
    339c:	29 f4       	brne	.+10     	; 0x33a8 <two_way+0x79c>
			{
				rotate_left();
    339e:	0e 94 0c 12 	call	0x2418	; 0x2418 <rotate_left>
				forward();
    33a2:	0e 94 9e 12 	call	0x253c	; 0x253c <forward>
    33a6:	e5 c0       	rjmp	.+458    	; 0x3572 <two_way+0x966>
			}
			else if (trail[x_cor][y_cor + 1] == trail[x_cor + 1][y_cor])
    33a8:	82 95       	swap	r24
    33aa:	92 95       	swap	r25
    33ac:	90 7f       	andi	r25, 0xF0	; 240
    33ae:	98 27       	eor	r25, r24
    33b0:	80 7f       	andi	r24, 0xF0	; 240
    33b2:	98 27       	eor	r25, r24
    33b4:	83 5b       	subi	r24, 0xB3	; 179
    33b6:	9a 4f       	sbci	r25, 0xFA	; 250
    33b8:	c8 0f       	add	r28, r24
    33ba:	d9 1f       	adc	r29, r25
    33bc:	98 81       	ld	r25, Y
    33be:	fa 01       	movw	r30, r20
    33c0:	e2 95       	swap	r30
    33c2:	f2 95       	swap	r31
    33c4:	f0 7f       	andi	r31, 0xF0	; 240
    33c6:	fe 27       	eor	r31, r30
    33c8:	e0 7f       	andi	r30, 0xF0	; 240
    33ca:	fe 27       	eor	r31, r30
    33cc:	e3 5b       	subi	r30, 0xB3	; 179
    33ce:	fa 4f       	sbci	r31, 0xFA	; 250
    33d0:	e2 0f       	add	r30, r18
    33d2:	f3 1f       	adc	r31, r19
    33d4:	80 81       	ld	r24, Z
    33d6:	98 13       	cpse	r25, r24
    33d8:	0d c0       	rjmp	.+26     	; 0x33f4 <two_way+0x7e8>
			{
				if (pot_north < pot_east)
    33da:	f0 16       	cp	r15, r16
    33dc:	28 f4       	brcc	.+10     	; 0x33e8 <two_way+0x7dc>
				{
					rotate_left();
    33de:	0e 94 0c 12 	call	0x2418	; 0x2418 <rotate_left>
					forward();
    33e2:	0e 94 9e 12 	call	0x253c	; 0x253c <forward>
    33e6:	c5 c0       	rjmp	.+394    	; 0x3572 <two_way+0x966>
				}
				else if (pot_north >= pot_east)
    33e8:	f0 16       	cp	r15, r16
    33ea:	08 f4       	brcc	.+2      	; 0x33ee <two_way+0x7e2>
    33ec:	c2 c0       	rjmp	.+388    	; 0x3572 <two_way+0x966>
				{
					forward();
    33ee:	0e 94 9e 12 	call	0x253c	; 0x253c <forward>
    33f2:	bf c0       	rjmp	.+382    	; 0x3572 <two_way+0x966>
				}
			}
			else if (trail[x_cor][y_cor + 1] < trail[x_cor + 1][y_cor]) // moved in the right cell before?
    33f4:	98 17       	cp	r25, r24
    33f6:	28 f4       	brcc	.+10     	; 0x3402 <two_way+0x7f6>
			{
				rotate_left();
    33f8:	0e 94 0c 12 	call	0x2418	; 0x2418 <rotate_left>
				forward();
    33fc:	0e 94 9e 12 	call	0x253c	; 0x253c <forward>
    3400:	b8 c0       	rjmp	.+368    	; 0x3572 <two_way+0x966>
			}
			else if (trail[x_cor + 1][y_cor] < trail[x_cor][y_cor + 1]) // moved in the leading cell before?
    3402:	89 17       	cp	r24, r25
    3404:	08 f0       	brcs	.+2      	; 0x3408 <two_way+0x7fc>
    3406:	b5 c0       	rjmp	.+362    	; 0x3572 <two_way+0x966>
			{
				forward();
    3408:	0e 94 9e 12 	call	0x253c	; 0x253c <forward>
    340c:	b2 c0       	rjmp	.+356    	; 0x3572 <two_way+0x966>
			}
		}

		// Facing South
		else if (face == south)
    340e:	b2 30       	cpi	r27, 0x02	; 2
    3410:	09 f0       	breq	.+2      	; 0x3414 <two_way+0x808>
    3412:	58 c0       	rjmp	.+176    	; 0x34c4 <two_way+0x8b8>
		{
			// Deadend: Left
			if (deadend[x_cor + 1][y_cor] == 1)
    3414:	fa 01       	movw	r30, r20
    3416:	e2 95       	swap	r30
    3418:	f2 95       	swap	r31
    341a:	f0 7f       	andi	r31, 0xF0	; 240
    341c:	fe 27       	eor	r31, r30
    341e:	e0 7f       	andi	r30, 0xF0	; 240
    3420:	fe 27       	eor	r31, r30
    3422:	e3 5b       	subi	r30, 0xB3	; 179
    3424:	fb 4f       	sbci	r31, 0xFB	; 251
    3426:	e2 0f       	add	r30, r18
    3428:	f3 1f       	adc	r31, r19
    342a:	e0 81       	ld	r30, Z
    342c:	e1 30       	cpi	r30, 0x01	; 1
    342e:	19 f4       	brne	.+6      	; 0x3436 <two_way+0x82a>
			{
				forward();
    3430:	0e 94 9e 12 	call	0x253c	; 0x253c <forward>
    3434:	9e c0       	rjmp	.+316    	; 0x3572 <two_way+0x966>
			}
			// Deadend: Front
			else if (deadend[x_cor][y_cor - 1] == 1)
    3436:	fc 01       	movw	r30, r24
    3438:	e2 95       	swap	r30
    343a:	f2 95       	swap	r31
    343c:	f0 7f       	andi	r31, 0xF0	; 240
    343e:	fe 27       	eor	r31, r30
    3440:	e0 7f       	andi	r30, 0xF0	; 240
    3442:	fe 27       	eor	r31, r30
    3444:	e3 5b       	subi	r30, 0xB3	; 179
    3446:	fb 4f       	sbci	r31, 0xFB	; 251
    3448:	e6 0f       	add	r30, r22
    344a:	f7 1f       	adc	r31, r23
    344c:	e0 81       	ld	r30, Z
    344e:	e1 30       	cpi	r30, 0x01	; 1
    3450:	29 f4       	brne	.+10     	; 0x345c <two_way+0x850>
			{
				rotate_left();
    3452:	0e 94 0c 12 	call	0x2418	; 0x2418 <rotate_left>
				forward();
    3456:	0e 94 9e 12 	call	0x253c	; 0x253c <forward>
    345a:	8b c0       	rjmp	.+278    	; 0x3572 <two_way+0x966>
			}
			else if (trail[x_cor][y_cor - 1] == trail[x_cor + 1][y_cor])
    345c:	82 95       	swap	r24
    345e:	92 95       	swap	r25
    3460:	90 7f       	andi	r25, 0xF0	; 240
    3462:	98 27       	eor	r25, r24
    3464:	80 7f       	andi	r24, 0xF0	; 240
    3466:	98 27       	eor	r25, r24
    3468:	83 5b       	subi	r24, 0xB3	; 179
    346a:	9a 4f       	sbci	r25, 0xFA	; 250
    346c:	fc 01       	movw	r30, r24
    346e:	e6 0f       	add	r30, r22
    3470:	f7 1f       	adc	r31, r23
    3472:	90 81       	ld	r25, Z
    3474:	fa 01       	movw	r30, r20
    3476:	e2 95       	swap	r30
    3478:	f2 95       	swap	r31
    347a:	f0 7f       	andi	r31, 0xF0	; 240
    347c:	fe 27       	eor	r31, r30
    347e:	e0 7f       	andi	r30, 0xF0	; 240
    3480:	fe 27       	eor	r31, r30
    3482:	e3 5b       	subi	r30, 0xB3	; 179
    3484:	fa 4f       	sbci	r31, 0xFA	; 250
    3486:	e2 0f       	add	r30, r18
    3488:	f3 1f       	adc	r31, r19
    348a:	80 81       	ld	r24, Z
    348c:	98 13       	cpse	r25, r24
    348e:	0d c0       	rjmp	.+26     	; 0x34aa <two_way+0x89e>
			{
				if (pot_east < pot_south)
    3490:	01 17       	cp	r16, r17
    3492:	28 f4       	brcc	.+10     	; 0x349e <two_way+0x892>
				{
					rotate_left();
    3494:	0e 94 0c 12 	call	0x2418	; 0x2418 <rotate_left>
					forward();
    3498:	0e 94 9e 12 	call	0x253c	; 0x253c <forward>
    349c:	6a c0       	rjmp	.+212    	; 0x3572 <two_way+0x966>
				}
				else if (pot_east >= pot_south)
    349e:	01 17       	cp	r16, r17
    34a0:	08 f4       	brcc	.+2      	; 0x34a4 <two_way+0x898>
    34a2:	67 c0       	rjmp	.+206    	; 0x3572 <two_way+0x966>
				{
					forward();
    34a4:	0e 94 9e 12 	call	0x253c	; 0x253c <forward>
    34a8:	64 c0       	rjmp	.+200    	; 0x3572 <two_way+0x966>
				}
			}
			else if (trail[x_cor + 1][y_cor] < trail[x_cor][y_cor - 1]) // moved in the right cell before?
    34aa:	89 17       	cp	r24, r25
    34ac:	28 f4       	brcc	.+10     	; 0x34b8 <two_way+0x8ac>
			{
				rotate_left();
    34ae:	0e 94 0c 12 	call	0x2418	; 0x2418 <rotate_left>
				forward();
    34b2:	0e 94 9e 12 	call	0x253c	; 0x253c <forward>
    34b6:	5d c0       	rjmp	.+186    	; 0x3572 <two_way+0x966>
			}
			else if (trail[x_cor][y_cor - 1] < trail[x_cor + 1][y_cor]) // moved in the leading cell before?
    34b8:	98 17       	cp	r25, r24
    34ba:	08 f0       	brcs	.+2      	; 0x34be <two_way+0x8b2>
    34bc:	5a c0       	rjmp	.+180    	; 0x3572 <two_way+0x966>
			{
				forward();
    34be:	0e 94 9e 12 	call	0x253c	; 0x253c <forward>
    34c2:	57 c0       	rjmp	.+174    	; 0x3572 <two_way+0x966>
			}
		}

		// Facing West
		else if (face == west)
    34c4:	b3 30       	cpi	r27, 0x03	; 3
    34c6:	09 f0       	breq	.+2      	; 0x34ca <two_way+0x8be>
    34c8:	54 c0       	rjmp	.+168    	; 0x3572 <two_way+0x966>
		{
			// Deadend: Left
			if (deadend[x_cor][y_cor - 1] == 1)
    34ca:	ec 01       	movw	r28, r24
    34cc:	c2 95       	swap	r28
    34ce:	d2 95       	swap	r29
    34d0:	d0 7f       	andi	r29, 0xF0	; 240
    34d2:	dc 27       	eor	r29, r28
    34d4:	c0 7f       	andi	r28, 0xF0	; 240
    34d6:	dc 27       	eor	r29, r28
    34d8:	c3 5b       	subi	r28, 0xB3	; 179
    34da:	db 4f       	sbci	r29, 0xFB	; 251
    34dc:	c6 0f       	add	r28, r22
    34de:	d7 1f       	adc	r29, r23
    34e0:	48 81       	ld	r20, Y
    34e2:	41 30       	cpi	r20, 0x01	; 1
    34e4:	19 f4       	brne	.+6      	; 0x34ec <two_way+0x8e0>
			{
				forward();
    34e6:	0e 94 9e 12 	call	0x253c	; 0x253c <forward>
    34ea:	43 c0       	rjmp	.+134    	; 0x3572 <two_way+0x966>
			}
			// Deadend: Front
			else if (deadend[x_cor - 1][y_cor] == 1)
    34ec:	ef 01       	movw	r28, r30
    34ee:	c2 95       	swap	r28
    34f0:	d2 95       	swap	r29
    34f2:	d0 7f       	andi	r29, 0xF0	; 240
    34f4:	dc 27       	eor	r29, r28
    34f6:	c0 7f       	andi	r28, 0xF0	; 240
    34f8:	dc 27       	eor	r29, r28
    34fa:	c3 5b       	subi	r28, 0xB3	; 179
    34fc:	db 4f       	sbci	r29, 0xFB	; 251
    34fe:	c2 0f       	add	r28, r18
    3500:	d3 1f       	adc	r29, r19
    3502:	48 81       	ld	r20, Y
    3504:	41 30       	cpi	r20, 0x01	; 1
    3506:	29 f4       	brne	.+10     	; 0x3512 <two_way+0x906>
			{
				rotate_left();
    3508:	0e 94 0c 12 	call	0x2418	; 0x2418 <rotate_left>
				forward();
    350c:	0e 94 9e 12 	call	0x253c	; 0x253c <forward>
    3510:	30 c0       	rjmp	.+96     	; 0x3572 <two_way+0x966>
			}
			else if (trail[x_cor][y_cor - 1] == trail[x_cor - 1][y_cor])
    3512:	82 95       	swap	r24
    3514:	92 95       	swap	r25
    3516:	90 7f       	andi	r25, 0xF0	; 240
    3518:	98 27       	eor	r25, r24
    351a:	80 7f       	andi	r24, 0xF0	; 240
    351c:	98 27       	eor	r25, r24
    351e:	83 5b       	subi	r24, 0xB3	; 179
    3520:	9a 4f       	sbci	r25, 0xFA	; 250
    3522:	ec 01       	movw	r28, r24
    3524:	c6 0f       	add	r28, r22
    3526:	d7 1f       	adc	r29, r23
    3528:	98 81       	ld	r25, Y
    352a:	e2 95       	swap	r30
    352c:	f2 95       	swap	r31
    352e:	f0 7f       	andi	r31, 0xF0	; 240
    3530:	fe 27       	eor	r31, r30
    3532:	e0 7f       	andi	r30, 0xF0	; 240
    3534:	fe 27       	eor	r31, r30
    3536:	e3 5b       	subi	r30, 0xB3	; 179
    3538:	fa 4f       	sbci	r31, 0xFA	; 250
    353a:	e2 0f       	add	r30, r18
    353c:	f3 1f       	adc	r31, r19
    353e:	80 81       	ld	r24, Z
    3540:	98 13       	cpse	r25, r24
    3542:	0c c0       	rjmp	.+24     	; 0x355c <two_way+0x950>
			{
				if (pot_south < pot_west)
    3544:	1e 15       	cp	r17, r14
    3546:	28 f4       	brcc	.+10     	; 0x3552 <two_way+0x946>
				{
					rotate_left();
    3548:	0e 94 0c 12 	call	0x2418	; 0x2418 <rotate_left>
					forward();
    354c:	0e 94 9e 12 	call	0x253c	; 0x253c <forward>
    3550:	10 c0       	rjmp	.+32     	; 0x3572 <two_way+0x966>
				}
				else if (pot_south >= pot_west)
    3552:	1e 15       	cp	r17, r14
    3554:	70 f0       	brcs	.+28     	; 0x3572 <two_way+0x966>
				{
					forward();
    3556:	0e 94 9e 12 	call	0x253c	; 0x253c <forward>
    355a:	0b c0       	rjmp	.+22     	; 0x3572 <two_way+0x966>
				}
			}
			else if (trail[x_cor][y_cor - 1] < trail[x_cor - 1][y_cor]) // moved in the right cell before?
    355c:	98 17       	cp	r25, r24
    355e:	28 f4       	brcc	.+10     	; 0x356a <two_way+0x95e>
			{
				rotate_left();
    3560:	0e 94 0c 12 	call	0x2418	; 0x2418 <rotate_left>
				forward();
    3564:	0e 94 9e 12 	call	0x253c	; 0x253c <forward>
    3568:	04 c0       	rjmp	.+8      	; 0x3572 <two_way+0x966>
			}
			else if (trail[x_cor - 1][y_cor] < trail[x_cor][y_cor - 1]) // moved in the leading cell before?
    356a:	89 17       	cp	r24, r25
    356c:	10 f4       	brcc	.+4      	; 0x3572 <two_way+0x966>
			{
				forward();
    356e:	0e 94 9e 12 	call	0x253c	; 0x253c <forward>
			}
		}
	}
}
    3572:	df 91       	pop	r29
    3574:	cf 91       	pop	r28
    3576:	1f 91       	pop	r17
    3578:	0f 91       	pop	r16
    357a:	ff 90       	pop	r15
    357c:	ef 90       	pop	r14
    357e:	08 95       	ret

00003580 <three_way>:
// ==========================================================================================
//                                         3-WAY
// ==========================================================================================

void three_way()
{
    3580:	9f 92       	push	r9
    3582:	af 92       	push	r10
    3584:	bf 92       	push	r11
    3586:	cf 92       	push	r12
    3588:	df 92       	push	r13
    358a:	ef 92       	push	r14
    358c:	ff 92       	push	r15
    358e:	0f 93       	push	r16
    3590:	1f 93       	push	r17
    3592:	cf 93       	push	r28
    3594:	df 93       	push	r29
	// This subroutine is triggered when there are 3 possible ways open.

	// Access the array elements if within bounds
	pot_north = (y_cor + 1 < ROWS) ? pot_field[x_cor][y_cor + 1] : Maze_Border;
    3596:	20 91 48 03 	lds	r18, 0x0348	; 0x800348 <y_cor>
    359a:	30 e0       	ldi	r19, 0x00	; 0
    359c:	d9 01       	movw	r26, r18
    359e:	11 96       	adiw	r26, 0x01	; 1
    35a0:	a0 31       	cpi	r26, 0x10	; 16
    35a2:	b1 05       	cpc	r27, r1
    35a4:	64 f4       	brge	.+24     	; 0x35be <three_way+0x3e>
    35a6:	e0 91 4d 06 	lds	r30, 0x064D	; 0x80064d <x_cor>
    35aa:	80 e1       	ldi	r24, 0x10	; 16
    35ac:	e8 9f       	mul	r30, r24
    35ae:	f0 01       	movw	r30, r0
    35b0:	11 24       	eor	r1, r1
    35b2:	e4 5b       	subi	r30, 0xB4	; 180
    35b4:	fc 4f       	sbci	r31, 0xFC	; 252
    35b6:	ea 0f       	add	r30, r26
    35b8:	fb 1f       	adc	r31, r27
    35ba:	f0 80       	ld	r15, Z
    35bc:	02 c0       	rjmp	.+4      	; 0x35c2 <three_way+0x42>
    35be:	ff 24       	eor	r15, r15
    35c0:	fa 94       	dec	r15
    35c2:	f0 92 50 07 	sts	0x0750, r15	; 0x800750 <pot_north>
	pot_east = (x_cor + 1 < COLS) ? pot_field[x_cor + 1][y_cor] : Maze_Border;
    35c6:	80 91 4d 06 	lds	r24, 0x064D	; 0x80064d <x_cor>
    35ca:	90 e0       	ldi	r25, 0x00	; 0
    35cc:	ac 01       	movw	r20, r24
    35ce:	4f 5f       	subi	r20, 0xFF	; 255
    35d0:	5f 4f       	sbci	r21, 0xFF	; 255
    35d2:	40 31       	cpi	r20, 0x10	; 16
    35d4:	51 05       	cpc	r21, r1
    35d6:	6c f4       	brge	.+26     	; 0x35f2 <three_way+0x72>
    35d8:	fa 01       	movw	r30, r20
    35da:	e2 95       	swap	r30
    35dc:	f2 95       	swap	r31
    35de:	f0 7f       	andi	r31, 0xF0	; 240
    35e0:	fe 27       	eor	r31, r30
    35e2:	e0 7f       	andi	r30, 0xF0	; 240
    35e4:	fe 27       	eor	r31, r30
    35e6:	e4 5b       	subi	r30, 0xB4	; 180
    35e8:	fc 4f       	sbci	r31, 0xFC	; 252
    35ea:	e2 0f       	add	r30, r18
    35ec:	f3 1f       	adc	r31, r19
    35ee:	c0 80       	ld	r12, Z
    35f0:	02 c0       	rjmp	.+4      	; 0x35f6 <three_way+0x76>
    35f2:	cc 24       	eor	r12, r12
    35f4:	ca 94       	dec	r12
    35f6:	c0 92 54 07 	sts	0x0754, r12	; 0x800754 <pot_east>
	pot_south = (y_cor - 1 >= 0) ? pot_field[x_cor][y_cor - 1] : Maze_Border;
    35fa:	f9 01       	movw	r30, r18
    35fc:	31 97       	sbiw	r30, 0x01	; 1
    35fe:	6a f0       	brmi	.+26     	; 0x361a <three_way+0x9a>
    3600:	ec 01       	movw	r28, r24
    3602:	c2 95       	swap	r28
    3604:	d2 95       	swap	r29
    3606:	d0 7f       	andi	r29, 0xF0	; 240
    3608:	dc 27       	eor	r29, r28
    360a:	c0 7f       	andi	r28, 0xF0	; 240
    360c:	dc 27       	eor	r29, r28
    360e:	c4 5b       	subi	r28, 0xB4	; 180
    3610:	dc 4f       	sbci	r29, 0xFC	; 252
    3612:	ce 0f       	add	r28, r30
    3614:	df 1f       	adc	r29, r31
    3616:	d8 80       	ld	r13, Y
    3618:	02 c0       	rjmp	.+4      	; 0x361e <three_way+0x9e>
    361a:	dd 24       	eor	r13, r13
    361c:	da 94       	dec	r13
    361e:	d0 92 4f 07 	sts	0x074F, r13	; 0x80074f <pot_south>
	pot_west = (x_cor - 1 >= 0) ? pot_field[x_cor - 1][y_cor] : Maze_Border;
    3622:	bc 01       	movw	r22, r24
    3624:	61 50       	subi	r22, 0x01	; 1
    3626:	71 09       	sbc	r23, r1
    3628:	6a f0       	brmi	.+26     	; 0x3644 <three_way+0xc4>
    362a:	eb 01       	movw	r28, r22
    362c:	c2 95       	swap	r28
    362e:	d2 95       	swap	r29
    3630:	d0 7f       	andi	r29, 0xF0	; 240
    3632:	dc 27       	eor	r29, r28
    3634:	c0 7f       	andi	r28, 0xF0	; 240
    3636:	dc 27       	eor	r29, r28
    3638:	c4 5b       	subi	r28, 0xB4	; 180
    363a:	dc 4f       	sbci	r29, 0xFC	; 252
    363c:	c2 0f       	add	r28, r18
    363e:	d3 1f       	adc	r29, r19
    3640:	e8 80       	ld	r14, Y
    3642:	02 c0       	rjmp	.+4      	; 0x3648 <three_way+0xc8>
    3644:	ee 24       	eor	r14, r14
    3646:	ea 94       	dec	r14
    3648:	e0 92 52 07 	sts	0x0752, r14	; 0x800752 <pot_west>

	trail_north = (y_cor + 1 < ROWS) ? trail[x_cor][y_cor + 1] : Maze_Border;
    364c:	a0 31       	cpi	r26, 0x10	; 16
    364e:	b1 05       	cpc	r27, r1
    3650:	6c f4       	brge	.+26     	; 0x366c <three_way+0xec>
    3652:	ec 01       	movw	r28, r24
    3654:	c2 95       	swap	r28
    3656:	d2 95       	swap	r29
    3658:	d0 7f       	andi	r29, 0xF0	; 240
    365a:	dc 27       	eor	r29, r28
    365c:	c0 7f       	andi	r28, 0xF0	; 240
    365e:	dc 27       	eor	r29, r28
    3660:	c3 5b       	subi	r28, 0xB3	; 179
    3662:	da 4f       	sbci	r29, 0xFA	; 250
    3664:	ca 0f       	add	r28, r26
    3666:	db 1f       	adc	r29, r27
    3668:	a8 80       	ld	r10, Y
    366a:	02 c0       	rjmp	.+4      	; 0x3670 <three_way+0xf0>
    366c:	aa 24       	eor	r10, r10
    366e:	aa 94       	dec	r10
    3670:	a0 92 53 07 	sts	0x0753, r10	; 0x800753 <trail_north>
	trail_east = (x_cor + 1 < COLS) ? trail[x_cor + 1][y_cor] : Maze_Border;
    3674:	40 31       	cpi	r20, 0x10	; 16
    3676:	51 05       	cpc	r21, r1
    3678:	74 f4       	brge	.+28     	; 0x3696 <three_way+0x116>
    367a:	8a 01       	movw	r16, r20
    367c:	02 95       	swap	r16
    367e:	12 95       	swap	r17
    3680:	10 7f       	andi	r17, 0xF0	; 240
    3682:	10 27       	eor	r17, r16
    3684:	00 7f       	andi	r16, 0xF0	; 240
    3686:	10 27       	eor	r17, r16
    3688:	03 5b       	subi	r16, 0xB3	; 179
    368a:	1a 4f       	sbci	r17, 0xFA	; 250
    368c:	02 0f       	add	r16, r18
    368e:	13 1f       	adc	r17, r19
    3690:	e8 01       	movw	r28, r16
    3692:	98 80       	ld	r9, Y
    3694:	02 c0       	rjmp	.+4      	; 0x369a <three_way+0x11a>
    3696:	99 24       	eor	r9, r9
    3698:	9a 94       	dec	r9
    369a:	90 92 56 07 	sts	0x0756, r9	; 0x800756 <trail_east>
	trail_south = (y_cor - 1 >= 0) ? trail[x_cor][y_cor - 1] : Maze_Border;
    369e:	ff 23       	and	r31, r31
    36a0:	74 f0       	brlt	.+28     	; 0x36be <three_way+0x13e>
    36a2:	8c 01       	movw	r16, r24
    36a4:	02 95       	swap	r16
    36a6:	12 95       	swap	r17
    36a8:	10 7f       	andi	r17, 0xF0	; 240
    36aa:	10 27       	eor	r17, r16
    36ac:	00 7f       	andi	r16, 0xF0	; 240
    36ae:	10 27       	eor	r17, r16
    36b0:	03 5b       	subi	r16, 0xB3	; 179
    36b2:	1a 4f       	sbci	r17, 0xFA	; 250
    36b4:	0e 0f       	add	r16, r30
    36b6:	1f 1f       	adc	r17, r31
    36b8:	e8 01       	movw	r28, r16
    36ba:	b8 80       	ld	r11, Y
    36bc:	02 c0       	rjmp	.+4      	; 0x36c2 <three_way+0x142>
    36be:	bb 24       	eor	r11, r11
    36c0:	ba 94       	dec	r11
    36c2:	b0 92 51 07 	sts	0x0751, r11	; 0x800751 <trail_south>
	trail_west = (x_cor - 1 >= 0) ? trail[x_cor - 1][y_cor] : Maze_Border;
    36c6:	77 23       	and	r23, r23
    36c8:	74 f0       	brlt	.+28     	; 0x36e6 <three_way+0x166>
    36ca:	8b 01       	movw	r16, r22
    36cc:	02 95       	swap	r16
    36ce:	12 95       	swap	r17
    36d0:	10 7f       	andi	r17, 0xF0	; 240
    36d2:	10 27       	eor	r17, r16
    36d4:	00 7f       	andi	r16, 0xF0	; 240
    36d6:	10 27       	eor	r17, r16
    36d8:	03 5b       	subi	r16, 0xB3	; 179
    36da:	1a 4f       	sbci	r17, 0xFA	; 250
    36dc:	02 0f       	add	r16, r18
    36de:	13 1f       	adc	r17, r19
    36e0:	e8 01       	movw	r28, r16
    36e2:	18 81       	ld	r17, Y
    36e4:	01 c0       	rjmp	.+2      	; 0x36e8 <three_way+0x168>
    36e6:	1f ef       	ldi	r17, 0xFF	; 255
    36e8:	10 93 55 07 	sts	0x0755, r17	; 0x800755 <trail_west>

	if (face == north)
    36ec:	00 91 49 03 	lds	r16, 0x0349	; 0x800349 <face>
    36f0:	01 11       	cpse	r16, r1
    36f2:	b7 c0       	rjmp	.+366    	; 0x3862 <three_way+0x2e2>
	{
		// Deadend: Front
		if (deadend[x_cor][y_cor + 1] == 1)
    36f4:	bc 01       	movw	r22, r24
    36f6:	62 95       	swap	r22
    36f8:	72 95       	swap	r23
    36fa:	70 7f       	andi	r23, 0xF0	; 240
    36fc:	76 27       	eor	r23, r22
    36fe:	60 7f       	andi	r22, 0xF0	; 240
    3700:	76 27       	eor	r23, r22
    3702:	63 5b       	subi	r22, 0xB3	; 179
    3704:	7b 4f       	sbci	r23, 0xFB	; 251
    3706:	a6 0f       	add	r26, r22
    3708:	b7 1f       	adc	r27, r23
    370a:	6c 91       	ld	r22, X
    370c:	61 30       	cpi	r22, 0x01	; 1
    370e:	31 f4       	brne	.+12     	; 0x371c <three_way+0x19c>
		{
			way_front = 1;
    3710:	81 e0       	ldi	r24, 0x01	; 1
    3712:	80 93 4e 06 	sts	0x064E, r24	; 0x80064e <way_front>
			two_way();
    3716:	0e 94 06 16 	call	0x2c0c	; 0x2c0c <two_way>
    371a:	e3 c2       	rjmp	.+1478   	; 0x3ce2 <three_way+0x762>
		}
		// Deadend: Right
		else if (deadend[x_cor + 1][y_cor] == 1)
    371c:	fa 01       	movw	r30, r20
    371e:	e2 95       	swap	r30
    3720:	f2 95       	swap	r31
    3722:	f0 7f       	andi	r31, 0xF0	; 240
    3724:	fe 27       	eor	r31, r30
    3726:	e0 7f       	andi	r30, 0xF0	; 240
    3728:	fe 27       	eor	r31, r30
    372a:	e3 5b       	subi	r30, 0xB3	; 179
    372c:	fb 4f       	sbci	r31, 0xFB	; 251
    372e:	e2 0f       	add	r30, r18
    3730:	f3 1f       	adc	r31, r19
    3732:	40 81       	ld	r20, Z
    3734:	41 30       	cpi	r20, 0x01	; 1
    3736:	31 f4       	brne	.+12     	; 0x3744 <three_way+0x1c4>
		{
			way_right = 1;
    3738:	81 e0       	ldi	r24, 0x01	; 1
    373a:	80 93 4a 03 	sts	0x034A, r24	; 0x80034a <way_right>
			two_way();
    373e:	0e 94 06 16 	call	0x2c0c	; 0x2c0c <two_way>
    3742:	cf c2       	rjmp	.+1438   	; 0x3ce2 <three_way+0x762>
		}
		// Deadend: Left
		else if (deadend[x_cor][y_cor] == 1)
    3744:	82 95       	swap	r24
    3746:	92 95       	swap	r25
    3748:	90 7f       	andi	r25, 0xF0	; 240
    374a:	98 27       	eor	r25, r24
    374c:	80 7f       	andi	r24, 0xF0	; 240
    374e:	98 27       	eor	r25, r24
    3750:	83 5b       	subi	r24, 0xB3	; 179
    3752:	9b 4f       	sbci	r25, 0xFB	; 251
    3754:	fc 01       	movw	r30, r24
    3756:	e2 0f       	add	r30, r18
    3758:	f3 1f       	adc	r31, r19
    375a:	80 81       	ld	r24, Z
    375c:	81 30       	cpi	r24, 0x01	; 1
    375e:	29 f4       	brne	.+10     	; 0x376a <three_way+0x1ea>
		{
			way_left = 1;
    3760:	80 93 4c 04 	sts	0x044C, r24	; 0x80044c <way_left>
			two_way();
    3764:	0e 94 06 16 	call	0x2c0c	; 0x2c0c <two_way>
    3768:	bc c2       	rjmp	.+1400   	; 0x3ce2 <three_way+0x762>
		}
		else if (trail_east < trail_north && trail_east < trail_west)
    376a:	9a 14       	cp	r9, r10
    376c:	38 f4       	brcc	.+14     	; 0x377c <three_way+0x1fc>
    376e:	91 16       	cp	r9, r17
    3770:	28 f4       	brcc	.+10     	; 0x377c <three_way+0x1fc>
		{
			rotate_right();
    3772:	0e 94 55 12 	call	0x24aa	; 0x24aa <rotate_right>
			forward();
    3776:	0e 94 9e 12 	call	0x253c	; 0x253c <forward>
    377a:	b3 c2       	rjmp	.+1382   	; 0x3ce2 <three_way+0x762>
		}
		else if ((trail_north < trail_east && trail_north < trail_west))
    377c:	a9 14       	cp	r10, r9
    377e:	28 f4       	brcc	.+10     	; 0x378a <three_way+0x20a>
    3780:	a1 16       	cp	r10, r17
    3782:	18 f4       	brcc	.+6      	; 0x378a <three_way+0x20a>
		{
			forward();
    3784:	0e 94 9e 12 	call	0x253c	; 0x253c <forward>
    3788:	ac c2       	rjmp	.+1368   	; 0x3ce2 <three_way+0x762>
		}
		else if (trail_west < trail_east && trail_west < trail_north)
    378a:	19 15       	cp	r17, r9
    378c:	38 f4       	brcc	.+14     	; 0x379c <three_way+0x21c>
    378e:	1a 15       	cp	r17, r10
    3790:	28 f4       	brcc	.+10     	; 0x379c <three_way+0x21c>
		{
			rotate_left();
    3792:	0e 94 0c 12 	call	0x2418	; 0x2418 <rotate_left>
			forward();
    3796:	0e 94 9e 12 	call	0x253c	; 0x253c <forward>
    379a:	a3 c2       	rjmp	.+1350   	; 0x3ce2 <three_way+0x762>
		}
		else if (trail_east == trail_north && trail_east == trail_west)
    379c:	a9 10       	cpse	r10, r9
    379e:	32 c0       	rjmp	.+100    	; 0x3804 <three_way+0x284>
    37a0:	91 12       	cpse	r9, r17
    37a2:	30 c0       	rjmp	.+96     	; 0x3804 <three_way+0x284>
		{
			if (pot_east < pot_north && pot_east < pot_west)
    37a4:	cf 14       	cp	r12, r15
    37a6:	38 f4       	brcc	.+14     	; 0x37b6 <three_way+0x236>
    37a8:	ce 14       	cp	r12, r14
    37aa:	28 f4       	brcc	.+10     	; 0x37b6 <three_way+0x236>
			{
				rotate_right();
    37ac:	0e 94 55 12 	call	0x24aa	; 0x24aa <rotate_right>
				forward();
    37b0:	0e 94 9e 12 	call	0x253c	; 0x253c <forward>
    37b4:	96 c2       	rjmp	.+1324   	; 0x3ce2 <three_way+0x762>
			}
			else if (pot_north < pot_east && pot_north < pot_west)
    37b6:	fc 14       	cp	r15, r12
    37b8:	28 f4       	brcc	.+10     	; 0x37c4 <three_way+0x244>
    37ba:	fe 14       	cp	r15, r14
    37bc:	18 f4       	brcc	.+6      	; 0x37c4 <three_way+0x244>
			{
				forward();
    37be:	0e 94 9e 12 	call	0x253c	; 0x253c <forward>
    37c2:	8f c2       	rjmp	.+1310   	; 0x3ce2 <three_way+0x762>
			}
			else if (pot_west < pot_east && pot_west < pot_north)
    37c4:	ec 14       	cp	r14, r12
    37c6:	38 f4       	brcc	.+14     	; 0x37d6 <three_way+0x256>
    37c8:	ef 14       	cp	r14, r15
    37ca:	28 f4       	brcc	.+10     	; 0x37d6 <three_way+0x256>
			{
				rotate_left();
    37cc:	0e 94 0c 12 	call	0x2418	; 0x2418 <rotate_left>
				forward();
    37d0:	0e 94 9e 12 	call	0x253c	; 0x253c <forward>
    37d4:	86 c2       	rjmp	.+1292   	; 0x3ce2 <three_way+0x762>
			}
			else if (pot_east == pot_north && pot_east == pot_west)
    37d6:	fc 10       	cpse	r15, r12
    37d8:	07 c0       	rjmp	.+14     	; 0x37e8 <three_way+0x268>
    37da:	ce 10       	cpse	r12, r14
    37dc:	05 c0       	rjmp	.+10     	; 0x37e8 <three_way+0x268>
			{
				rotate_right();
    37de:	0e 94 55 12 	call	0x24aa	; 0x24aa <rotate_right>
				forward();
    37e2:	0e 94 9e 12 	call	0x253c	; 0x253c <forward>
    37e6:	7d c2       	rjmp	.+1274   	; 0x3ce2 <three_way+0x762>
			}
			else if (pot_east == pot_north || pot_east == pot_west)
    37e8:	fc 14       	cp	r15, r12
    37ea:	11 f0       	breq	.+4      	; 0x37f0 <three_way+0x270>
    37ec:	ce 10       	cpse	r12, r14
    37ee:	05 c0       	rjmp	.+10     	; 0x37fa <three_way+0x27a>
			{
				rotate_right();
    37f0:	0e 94 55 12 	call	0x24aa	; 0x24aa <rotate_right>
				forward();
    37f4:	0e 94 9e 12 	call	0x253c	; 0x253c <forward>
    37f8:	74 c2       	rjmp	.+1256   	; 0x3ce2 <three_way+0x762>
			}
			else if (pot_north == pot_west)
    37fa:	fe 10       	cpse	r15, r14
    37fc:	72 c2       	rjmp	.+1252   	; 0x3ce2 <three_way+0x762>
			{
				forward();
    37fe:	0e 94 9e 12 	call	0x253c	; 0x253c <forward>
    3802:	6f c2       	rjmp	.+1246   	; 0x3ce2 <three_way+0x762>
			}
		}
		else if (trail_east == trail_north)
    3804:	a9 10       	cpse	r10, r9
    3806:	0d c0       	rjmp	.+26     	; 0x3822 <three_way+0x2a2>
		{
			if (pot_north < pot_east)
    3808:	fc 14       	cp	r15, r12
    380a:	18 f4       	brcc	.+6      	; 0x3812 <three_way+0x292>
			{
				forward();
    380c:	0e 94 9e 12 	call	0x253c	; 0x253c <forward>
    3810:	68 c2       	rjmp	.+1232   	; 0x3ce2 <three_way+0x762>
			}
			else if (pot_north >= pot_east)
    3812:	fc 14       	cp	r15, r12
    3814:	08 f4       	brcc	.+2      	; 0x3818 <three_way+0x298>
    3816:	65 c2       	rjmp	.+1226   	; 0x3ce2 <three_way+0x762>
			{
				rotate_right();
    3818:	0e 94 55 12 	call	0x24aa	; 0x24aa <rotate_right>
				forward();
    381c:	0e 94 9e 12 	call	0x253c	; 0x253c <forward>
    3820:	60 c2       	rjmp	.+1216   	; 0x3ce2 <three_way+0x762>
			}
		}
		else if (trail_east == trail_west)
    3822:	91 12       	cpse	r9, r17
    3824:	0f c0       	rjmp	.+30     	; 0x3844 <three_way+0x2c4>
		{
			if (pot_west < pot_east)
    3826:	ec 14       	cp	r14, r12
    3828:	28 f4       	brcc	.+10     	; 0x3834 <three_way+0x2b4>
			{
				rotate_left();
    382a:	0e 94 0c 12 	call	0x2418	; 0x2418 <rotate_left>
				forward();
    382e:	0e 94 9e 12 	call	0x253c	; 0x253c <forward>
    3832:	57 c2       	rjmp	.+1198   	; 0x3ce2 <three_way+0x762>
			}
			else if (pot_west >= pot_east)
    3834:	ec 14       	cp	r14, r12
    3836:	08 f4       	brcc	.+2      	; 0x383a <three_way+0x2ba>
    3838:	54 c2       	rjmp	.+1192   	; 0x3ce2 <three_way+0x762>
			{
				rotate_right();
    383a:	0e 94 55 12 	call	0x24aa	; 0x24aa <rotate_right>
				forward();
    383e:	0e 94 9e 12 	call	0x253c	; 0x253c <forward>
    3842:	4f c2       	rjmp	.+1182   	; 0x3ce2 <three_way+0x762>
			}
		}
		else if (trail_north == trail_west)
    3844:	a1 12       	cpse	r10, r17
    3846:	4d c2       	rjmp	.+1178   	; 0x3ce2 <three_way+0x762>
		{
			if (pot_north <= pot_west)
    3848:	ef 14       	cp	r14, r15
    384a:	18 f0       	brcs	.+6      	; 0x3852 <three_way+0x2d2>
			{
				forward();
    384c:	0e 94 9e 12 	call	0x253c	; 0x253c <forward>
    3850:	48 c2       	rjmp	.+1168   	; 0x3ce2 <three_way+0x762>
			}
			else if (pot_north > pot_west)
    3852:	ef 14       	cp	r14, r15
    3854:	08 f0       	brcs	.+2      	; 0x3858 <three_way+0x2d8>
    3856:	45 c2       	rjmp	.+1162   	; 0x3ce2 <three_way+0x762>
			{
				rotate_left();
    3858:	0e 94 0c 12 	call	0x2418	; 0x2418 <rotate_left>
				forward();
    385c:	0e 94 9e 12 	call	0x253c	; 0x253c <forward>
    3860:	40 c2       	rjmp	.+1152   	; 0x3ce2 <three_way+0x762>
			}
		}
	}
	else if (face == east)
    3862:	01 30       	cpi	r16, 0x01	; 1
    3864:	09 f0       	breq	.+2      	; 0x3868 <three_way+0x2e8>
    3866:	b6 c0       	rjmp	.+364    	; 0x39d4 <three_way+0x454>
	{
		// Deadend: Front
		if (deadend[x_cor + 1][y_cor] == 1)
    3868:	42 95       	swap	r20
    386a:	52 95       	swap	r21
    386c:	50 7f       	andi	r21, 0xF0	; 240
    386e:	54 27       	eor	r21, r20
    3870:	40 7f       	andi	r20, 0xF0	; 240
    3872:	54 27       	eor	r21, r20
    3874:	43 5b       	subi	r20, 0xB3	; 179
    3876:	5b 4f       	sbci	r21, 0xFB	; 251
    3878:	24 0f       	add	r18, r20
    387a:	35 1f       	adc	r19, r21
    387c:	e9 01       	movw	r28, r18
    387e:	28 81       	ld	r18, Y
    3880:	21 30       	cpi	r18, 0x01	; 1
    3882:	31 f4       	brne	.+12     	; 0x3890 <three_way+0x310>
		{
			way_front = 1;
    3884:	81 e0       	ldi	r24, 0x01	; 1
    3886:	80 93 4e 06 	sts	0x064E, r24	; 0x80064e <way_front>
			two_way();
    388a:	0e 94 06 16 	call	0x2c0c	; 0x2c0c <two_way>
    388e:	29 c2       	rjmp	.+1106   	; 0x3ce2 <three_way+0x762>
		}
		// Deadend: Right
		else if (deadend[x_cor][y_cor - 1] == 1)
    3890:	9c 01       	movw	r18, r24
    3892:	22 95       	swap	r18
    3894:	32 95       	swap	r19
    3896:	30 7f       	andi	r19, 0xF0	; 240
    3898:	32 27       	eor	r19, r18
    389a:	20 7f       	andi	r18, 0xF0	; 240
    389c:	32 27       	eor	r19, r18
    389e:	23 5b       	subi	r18, 0xB3	; 179
    38a0:	3b 4f       	sbci	r19, 0xFB	; 251
    38a2:	e2 0f       	add	r30, r18
    38a4:	f3 1f       	adc	r31, r19
    38a6:	20 81       	ld	r18, Z
    38a8:	21 30       	cpi	r18, 0x01	; 1
    38aa:	31 f4       	brne	.+12     	; 0x38b8 <three_way+0x338>
		{
			way_right = 1;
    38ac:	81 e0       	ldi	r24, 0x01	; 1
    38ae:	80 93 4a 03 	sts	0x034A, r24	; 0x80034a <way_right>
			two_way();
    38b2:	0e 94 06 16 	call	0x2c0c	; 0x2c0c <two_way>
    38b6:	15 c2       	rjmp	.+1066   	; 0x3ce2 <three_way+0x762>
		}
		// Deadend: Left
		else if (deadend[x_cor][y_cor + 1] == 1)
    38b8:	82 95       	swap	r24
    38ba:	92 95       	swap	r25
    38bc:	90 7f       	andi	r25, 0xF0	; 240
    38be:	98 27       	eor	r25, r24
    38c0:	80 7f       	andi	r24, 0xF0	; 240
    38c2:	98 27       	eor	r25, r24
    38c4:	83 5b       	subi	r24, 0xB3	; 179
    38c6:	9b 4f       	sbci	r25, 0xFB	; 251
    38c8:	a8 0f       	add	r26, r24
    38ca:	b9 1f       	adc	r27, r25
    38cc:	8c 91       	ld	r24, X
    38ce:	81 30       	cpi	r24, 0x01	; 1
    38d0:	29 f4       	brne	.+10     	; 0x38dc <three_way+0x35c>
		{
			way_left = 1;
    38d2:	80 93 4c 04 	sts	0x044C, r24	; 0x80044c <way_left>
			two_way();
    38d6:	0e 94 06 16 	call	0x2c0c	; 0x2c0c <two_way>
    38da:	03 c2       	rjmp	.+1030   	; 0x3ce2 <three_way+0x762>
		}
		else if (trail_east < trail_north && trail_east < trail_south)
    38dc:	9a 14       	cp	r9, r10
    38de:	28 f4       	brcc	.+10     	; 0x38ea <three_way+0x36a>
    38e0:	9b 14       	cp	r9, r11
    38e2:	18 f4       	brcc	.+6      	; 0x38ea <three_way+0x36a>
		{
			forward();
    38e4:	0e 94 9e 12 	call	0x253c	; 0x253c <forward>
    38e8:	fc c1       	rjmp	.+1016   	; 0x3ce2 <three_way+0x762>
		}
		else if (trail_north < trail_east && trail_north < trail_south)
    38ea:	a9 14       	cp	r10, r9
    38ec:	38 f4       	brcc	.+14     	; 0x38fc <three_way+0x37c>
    38ee:	ab 14       	cp	r10, r11
    38f0:	28 f4       	brcc	.+10     	; 0x38fc <three_way+0x37c>
		{
			rotate_left();
    38f2:	0e 94 0c 12 	call	0x2418	; 0x2418 <rotate_left>
			forward();
    38f6:	0e 94 9e 12 	call	0x253c	; 0x253c <forward>
    38fa:	f3 c1       	rjmp	.+998    	; 0x3ce2 <three_way+0x762>
		}
		else if (trail_south < trail_east && trail_south < trail_north)
    38fc:	b9 14       	cp	r11, r9
    38fe:	38 f4       	brcc	.+14     	; 0x390e <three_way+0x38e>
    3900:	ba 14       	cp	r11, r10
    3902:	28 f4       	brcc	.+10     	; 0x390e <three_way+0x38e>
		{
			rotate_right();
    3904:	0e 94 55 12 	call	0x24aa	; 0x24aa <rotate_right>
			forward();
    3908:	0e 94 9e 12 	call	0x253c	; 0x253c <forward>
    390c:	ea c1       	rjmp	.+980    	; 0x3ce2 <three_way+0x762>
		}
		else if (trail_east == trail_north && trail_east == trail_south)
    390e:	a9 10       	cpse	r10, r9
    3910:	32 c0       	rjmp	.+100    	; 0x3976 <three_way+0x3f6>
    3912:	9b 10       	cpse	r9, r11
    3914:	30 c0       	rjmp	.+96     	; 0x3976 <three_way+0x3f6>
		{
			if (pot_east < pot_north && pot_east < pot_south)
    3916:	cf 14       	cp	r12, r15
    3918:	28 f4       	brcc	.+10     	; 0x3924 <three_way+0x3a4>
    391a:	cd 14       	cp	r12, r13
    391c:	18 f4       	brcc	.+6      	; 0x3924 <three_way+0x3a4>
			{
				forward();
    391e:	0e 94 9e 12 	call	0x253c	; 0x253c <forward>
    3922:	df c1       	rjmp	.+958    	; 0x3ce2 <three_way+0x762>
			}
			else if (pot_north < pot_east && pot_north < pot_south)
    3924:	fc 14       	cp	r15, r12
    3926:	38 f4       	brcc	.+14     	; 0x3936 <three_way+0x3b6>
    3928:	fd 14       	cp	r15, r13
    392a:	28 f4       	brcc	.+10     	; 0x3936 <three_way+0x3b6>
			{
				rotate_left();
    392c:	0e 94 0c 12 	call	0x2418	; 0x2418 <rotate_left>
				forward();
    3930:	0e 94 9e 12 	call	0x253c	; 0x253c <forward>
    3934:	d6 c1       	rjmp	.+940    	; 0x3ce2 <three_way+0x762>
			}
			else if (pot_south < pot_east && pot_south < pot_north)
    3936:	dc 14       	cp	r13, r12
    3938:	38 f4       	brcc	.+14     	; 0x3948 <three_way+0x3c8>
    393a:	df 14       	cp	r13, r15
    393c:	28 f4       	brcc	.+10     	; 0x3948 <three_way+0x3c8>
			{
				rotate_right();
    393e:	0e 94 55 12 	call	0x24aa	; 0x24aa <rotate_right>
				forward();
    3942:	0e 94 9e 12 	call	0x253c	; 0x253c <forward>
    3946:	cd c1       	rjmp	.+922    	; 0x3ce2 <three_way+0x762>
			}
			else if (pot_east == pot_north && pot_east == pot_south)
    3948:	fc 10       	cpse	r15, r12
    394a:	07 c0       	rjmp	.+14     	; 0x395a <three_way+0x3da>
    394c:	cd 10       	cpse	r12, r13
    394e:	05 c0       	rjmp	.+10     	; 0x395a <three_way+0x3da>
			{
				rotate_right();
    3950:	0e 94 55 12 	call	0x24aa	; 0x24aa <rotate_right>
				forward();
    3954:	0e 94 9e 12 	call	0x253c	; 0x253c <forward>
    3958:	c4 c1       	rjmp	.+904    	; 0x3ce2 <three_way+0x762>
			}
			else if (pot_east == pot_north || pot_east == pot_south)
    395a:	fc 14       	cp	r15, r12
    395c:	11 f0       	breq	.+4      	; 0x3962 <three_way+0x3e2>
    395e:	cd 10       	cpse	r12, r13
    3960:	03 c0       	rjmp	.+6      	; 0x3968 <three_way+0x3e8>
			{
				forward();
    3962:	0e 94 9e 12 	call	0x253c	; 0x253c <forward>
    3966:	bd c1       	rjmp	.+890    	; 0x3ce2 <three_way+0x762>
			}
			else if (pot_north == pot_south)
    3968:	fd 10       	cpse	r15, r13
    396a:	bb c1       	rjmp	.+886    	; 0x3ce2 <three_way+0x762>
			{
				rotate_right();
    396c:	0e 94 55 12 	call	0x24aa	; 0x24aa <rotate_right>
				forward();
    3970:	0e 94 9e 12 	call	0x253c	; 0x253c <forward>
    3974:	b6 c1       	rjmp	.+876    	; 0x3ce2 <three_way+0x762>
			}
		}
		else if (trail_east == trail_north)
    3976:	a9 10       	cpse	r10, r9
    3978:	0d c0       	rjmp	.+26     	; 0x3994 <three_way+0x414>
		{
			if (pot_north < pot_east)
    397a:	fc 14       	cp	r15, r12
    397c:	28 f4       	brcc	.+10     	; 0x3988 <three_way+0x408>
			{
				rotate_left();
    397e:	0e 94 0c 12 	call	0x2418	; 0x2418 <rotate_left>
				forward();
    3982:	0e 94 9e 12 	call	0x253c	; 0x253c <forward>
    3986:	ad c1       	rjmp	.+858    	; 0x3ce2 <three_way+0x762>
			}
			else if (pot_north >= pot_east)
    3988:	fc 14       	cp	r15, r12
    398a:	08 f4       	brcc	.+2      	; 0x398e <three_way+0x40e>
    398c:	aa c1       	rjmp	.+852    	; 0x3ce2 <three_way+0x762>
			{
				forward();
    398e:	0e 94 9e 12 	call	0x253c	; 0x253c <forward>
    3992:	a7 c1       	rjmp	.+846    	; 0x3ce2 <three_way+0x762>
			}
		}
		else if (trail_east == trail_south)
    3994:	9b 10       	cpse	r9, r11
    3996:	0d c0       	rjmp	.+26     	; 0x39b2 <three_way+0x432>
		{
			if (pot_south < pot_east)
    3998:	dc 14       	cp	r13, r12
    399a:	28 f4       	brcc	.+10     	; 0x39a6 <three_way+0x426>
			{
				rotate_right();
    399c:	0e 94 55 12 	call	0x24aa	; 0x24aa <rotate_right>
				forward();
    39a0:	0e 94 9e 12 	call	0x253c	; 0x253c <forward>
    39a4:	9e c1       	rjmp	.+828    	; 0x3ce2 <three_way+0x762>
			}
			else if (pot_south >= pot_east)
    39a6:	dc 14       	cp	r13, r12
    39a8:	08 f4       	brcc	.+2      	; 0x39ac <three_way+0x42c>
    39aa:	9b c1       	rjmp	.+822    	; 0x3ce2 <three_way+0x762>
			{
				forward();
    39ac:	0e 94 9e 12 	call	0x253c	; 0x253c <forward>
    39b0:	98 c1       	rjmp	.+816    	; 0x3ce2 <three_way+0x762>
			}
		}
		else if (trail_south == trail_north)
    39b2:	ab 10       	cpse	r10, r11
    39b4:	96 c1       	rjmp	.+812    	; 0x3ce2 <three_way+0x762>
		{
			if (pot_north < pot_south)
    39b6:	fd 14       	cp	r15, r13
    39b8:	28 f4       	brcc	.+10     	; 0x39c4 <three_way+0x444>
			{
				rotate_left();
    39ba:	0e 94 0c 12 	call	0x2418	; 0x2418 <rotate_left>
				forward();
    39be:	0e 94 9e 12 	call	0x253c	; 0x253c <forward>
    39c2:	8f c1       	rjmp	.+798    	; 0x3ce2 <three_way+0x762>
			}
			else if (pot_north >= pot_south)
    39c4:	fd 14       	cp	r15, r13
    39c6:	08 f4       	brcc	.+2      	; 0x39ca <three_way+0x44a>
    39c8:	8c c1       	rjmp	.+792    	; 0x3ce2 <three_way+0x762>
			{
				rotate_right();
    39ca:	0e 94 55 12 	call	0x24aa	; 0x24aa <rotate_right>
				forward();
    39ce:	0e 94 9e 12 	call	0x253c	; 0x253c <forward>
    39d2:	87 c1       	rjmp	.+782    	; 0x3ce2 <three_way+0x762>
			}
		}
	}
	else if (face == south)
    39d4:	02 30       	cpi	r16, 0x02	; 2
    39d6:	09 f0       	breq	.+2      	; 0x39da <three_way+0x45a>
    39d8:	d3 c0       	rjmp	.+422    	; 0x3b80 <three_way+0x600>
	{
		// Deadend: Front
		if (deadend[x_cor][y_cor - 1] == 1)
    39da:	82 95       	swap	r24
    39dc:	92 95       	swap	r25
    39de:	90 7f       	andi	r25, 0xF0	; 240
    39e0:	98 27       	eor	r25, r24
    39e2:	80 7f       	andi	r24, 0xF0	; 240
    39e4:	98 27       	eor	r25, r24
    39e6:	83 5b       	subi	r24, 0xB3	; 179
    39e8:	9b 4f       	sbci	r25, 0xFB	; 251
    39ea:	e8 0f       	add	r30, r24
    39ec:	f9 1f       	adc	r31, r25
    39ee:	80 81       	ld	r24, Z
    39f0:	81 30       	cpi	r24, 0x01	; 1
    39f2:	29 f4       	brne	.+10     	; 0x39fe <three_way+0x47e>
		{
			way_front = 1;
    39f4:	80 93 4e 06 	sts	0x064E, r24	; 0x80064e <way_front>
			two_way();
    39f8:	0e 94 06 16 	call	0x2c0c	; 0x2c0c <two_way>
    39fc:	25 c0       	rjmp	.+74     	; 0x3a48 <three_way+0x4c8>
		}
		// Deadend: Right
		else if (deadend[x_cor - 1][y_cor] == 1)
    39fe:	fb 01       	movw	r30, r22
    3a00:	e2 95       	swap	r30
    3a02:	f2 95       	swap	r31
    3a04:	f0 7f       	andi	r31, 0xF0	; 240
    3a06:	fe 27       	eor	r31, r30
    3a08:	e0 7f       	andi	r30, 0xF0	; 240
    3a0a:	fe 27       	eor	r31, r30
    3a0c:	e3 5b       	subi	r30, 0xB3	; 179
    3a0e:	fb 4f       	sbci	r31, 0xFB	; 251
    3a10:	e2 0f       	add	r30, r18
    3a12:	f3 1f       	adc	r31, r19
    3a14:	80 81       	ld	r24, Z
    3a16:	81 30       	cpi	r24, 0x01	; 1
    3a18:	29 f4       	brne	.+10     	; 0x3a24 <three_way+0x4a4>
		{
			way_right = 1;
    3a1a:	80 93 4a 03 	sts	0x034A, r24	; 0x80034a <way_right>
			two_way();
    3a1e:	0e 94 06 16 	call	0x2c0c	; 0x2c0c <two_way>
    3a22:	12 c0       	rjmp	.+36     	; 0x3a48 <three_way+0x4c8>
		}
		// Deadend: Left
		else if (deadend[x_cor + 1][y_cor] == 1)
    3a24:	42 95       	swap	r20
    3a26:	52 95       	swap	r21
    3a28:	50 7f       	andi	r21, 0xF0	; 240
    3a2a:	54 27       	eor	r21, r20
    3a2c:	40 7f       	andi	r20, 0xF0	; 240
    3a2e:	54 27       	eor	r21, r20
    3a30:	43 5b       	subi	r20, 0xB3	; 179
    3a32:	5b 4f       	sbci	r21, 0xFB	; 251
    3a34:	fa 01       	movw	r30, r20
    3a36:	e2 0f       	add	r30, r18
    3a38:	f3 1f       	adc	r31, r19
    3a3a:	80 81       	ld	r24, Z
    3a3c:	81 30       	cpi	r24, 0x01	; 1
    3a3e:	21 f4       	brne	.+8      	; 0x3a48 <three_way+0x4c8>
		{
			way_left = 1;
    3a40:	80 93 4c 04 	sts	0x044C, r24	; 0x80044c <way_left>
			two_way();
    3a44:	0e 94 06 16 	call	0x2c0c	; 0x2c0c <two_way>
		}
		if (trail_east < trail_south && trail_east < trail_west)
    3a48:	80 91 56 07 	lds	r24, 0x0756	; 0x800756 <trail_east>
    3a4c:	90 91 51 07 	lds	r25, 0x0751	; 0x800751 <trail_south>
    3a50:	89 17       	cp	r24, r25
    3a52:	48 f4       	brcc	.+18     	; 0x3a66 <three_way+0x4e6>
    3a54:	20 91 55 07 	lds	r18, 0x0755	; 0x800755 <trail_west>
    3a58:	82 17       	cp	r24, r18
    3a5a:	28 f4       	brcc	.+10     	; 0x3a66 <three_way+0x4e6>
		{
			rotate_left();
    3a5c:	0e 94 0c 12 	call	0x2418	; 0x2418 <rotate_left>
			forward();
    3a60:	0e 94 9e 12 	call	0x253c	; 0x253c <forward>
    3a64:	3e c1       	rjmp	.+636    	; 0x3ce2 <three_way+0x762>
		}
		else if (trail_south < trail_east && trail_south < trail_west)
    3a66:	98 17       	cp	r25, r24
    3a68:	38 f4       	brcc	.+14     	; 0x3a78 <three_way+0x4f8>
    3a6a:	20 91 55 07 	lds	r18, 0x0755	; 0x800755 <trail_west>
    3a6e:	92 17       	cp	r25, r18
    3a70:	18 f4       	brcc	.+6      	; 0x3a78 <three_way+0x4f8>
		{
			forward();
    3a72:	0e 94 9e 12 	call	0x253c	; 0x253c <forward>
    3a76:	35 c1       	rjmp	.+618    	; 0x3ce2 <three_way+0x762>
		}
		else if (trail_west < trail_east && trail_west < trail_south)
    3a78:	20 91 55 07 	lds	r18, 0x0755	; 0x800755 <trail_west>
    3a7c:	28 17       	cp	r18, r24
    3a7e:	38 f4       	brcc	.+14     	; 0x3a8e <three_way+0x50e>
    3a80:	29 17       	cp	r18, r25
    3a82:	28 f4       	brcc	.+10     	; 0x3a8e <three_way+0x50e>
		{
			rotate_right();
    3a84:	0e 94 55 12 	call	0x24aa	; 0x24aa <rotate_right>
			forward();
    3a88:	0e 94 9e 12 	call	0x253c	; 0x253c <forward>
    3a8c:	2a c1       	rjmp	.+596    	; 0x3ce2 <three_way+0x762>
		}
		else if (trail_east == trail_south && trail_east == trail_west)
    3a8e:	89 13       	cpse	r24, r25
    3a90:	3c c0       	rjmp	.+120    	; 0x3b0a <three_way+0x58a>
    3a92:	82 13       	cpse	r24, r18
    3a94:	3a c0       	rjmp	.+116    	; 0x3b0a <three_way+0x58a>
		{
			if (pot_east < pot_south && pot_east < pot_west)
    3a96:	90 91 54 07 	lds	r25, 0x0754	; 0x800754 <pot_east>
    3a9a:	80 91 4f 07 	lds	r24, 0x074F	; 0x80074f <pot_south>
    3a9e:	98 17       	cp	r25, r24
    3aa0:	48 f4       	brcc	.+18     	; 0x3ab4 <three_way+0x534>
    3aa2:	20 91 52 07 	lds	r18, 0x0752	; 0x800752 <pot_west>
    3aa6:	92 17       	cp	r25, r18
    3aa8:	28 f4       	brcc	.+10     	; 0x3ab4 <three_way+0x534>
			{
				rotate_left();
    3aaa:	0e 94 0c 12 	call	0x2418	; 0x2418 <rotate_left>
				forward();
    3aae:	0e 94 9e 12 	call	0x253c	; 0x253c <forward>
    3ab2:	17 c1       	rjmp	.+558    	; 0x3ce2 <three_way+0x762>
			}
			else if (pot_south < pot_east && pot_south < pot_west)
    3ab4:	89 17       	cp	r24, r25
    3ab6:	38 f4       	brcc	.+14     	; 0x3ac6 <three_way+0x546>
    3ab8:	20 91 52 07 	lds	r18, 0x0752	; 0x800752 <pot_west>
    3abc:	82 17       	cp	r24, r18
    3abe:	18 f4       	brcc	.+6      	; 0x3ac6 <three_way+0x546>
			{
				forward();
    3ac0:	0e 94 9e 12 	call	0x253c	; 0x253c <forward>
    3ac4:	0e c1       	rjmp	.+540    	; 0x3ce2 <three_way+0x762>
			}
			else if (pot_west < pot_east && pot_west < pot_south)
    3ac6:	20 91 52 07 	lds	r18, 0x0752	; 0x800752 <pot_west>
    3aca:	29 17       	cp	r18, r25
    3acc:	38 f4       	brcc	.+14     	; 0x3adc <three_way+0x55c>
    3ace:	28 17       	cp	r18, r24
    3ad0:	28 f4       	brcc	.+10     	; 0x3adc <three_way+0x55c>
			{
				rotate_right();
    3ad2:	0e 94 55 12 	call	0x24aa	; 0x24aa <rotate_right>
				forward();
    3ad6:	0e 94 9e 12 	call	0x253c	; 0x253c <forward>
    3ada:	03 c1       	rjmp	.+518    	; 0x3ce2 <three_way+0x762>
			}
			else if (pot_east == pot_south && pot_south == pot_west)
    3adc:	98 13       	cpse	r25, r24
    3ade:	07 c0       	rjmp	.+14     	; 0x3aee <three_way+0x56e>
    3ae0:	82 13       	cpse	r24, r18
    3ae2:	05 c0       	rjmp	.+10     	; 0x3aee <three_way+0x56e>
			{
				rotate_right();
    3ae4:	0e 94 55 12 	call	0x24aa	; 0x24aa <rotate_right>
				forward();
    3ae8:	0e 94 9e 12 	call	0x253c	; 0x253c <forward>
    3aec:	fa c0       	rjmp	.+500    	; 0x3ce2 <three_way+0x762>
			}
			else if (pot_south == pot_west || pot_west == pot_east)
    3aee:	82 17       	cp	r24, r18
    3af0:	11 f0       	breq	.+4      	; 0x3af6 <three_way+0x576>
    3af2:	92 13       	cpse	r25, r18
    3af4:	05 c0       	rjmp	.+10     	; 0x3b00 <three_way+0x580>
			{
				rotate_right();
    3af6:	0e 94 55 12 	call	0x24aa	; 0x24aa <rotate_right>
				forward();
    3afa:	0e 94 9e 12 	call	0x253c	; 0x253c <forward>
    3afe:	f1 c0       	rjmp	.+482    	; 0x3ce2 <three_way+0x762>
			}
			else if (pot_east == pot_south)
    3b00:	98 13       	cpse	r25, r24
    3b02:	ef c0       	rjmp	.+478    	; 0x3ce2 <three_way+0x762>
			{
				forward();
    3b04:	0e 94 9e 12 	call	0x253c	; 0x253c <forward>
    3b08:	ec c0       	rjmp	.+472    	; 0x3ce2 <three_way+0x762>
			}
		}

		else if (trail_east == trail_south)
    3b0a:	89 13       	cpse	r24, r25
    3b0c:	11 c0       	rjmp	.+34     	; 0x3b30 <three_way+0x5b0>
		{
			if (pot_south <= pot_east)
    3b0e:	90 91 4f 07 	lds	r25, 0x074F	; 0x80074f <pot_south>
    3b12:	80 91 54 07 	lds	r24, 0x0754	; 0x800754 <pot_east>
    3b16:	89 17       	cp	r24, r25
    3b18:	18 f0       	brcs	.+6      	; 0x3b20 <three_way+0x5a0>
			{
				forward();
    3b1a:	0e 94 9e 12 	call	0x253c	; 0x253c <forward>
    3b1e:	e1 c0       	rjmp	.+450    	; 0x3ce2 <three_way+0x762>
			}
			else if (pot_south > pot_east)
    3b20:	89 17       	cp	r24, r25
    3b22:	08 f0       	brcs	.+2      	; 0x3b26 <three_way+0x5a6>
    3b24:	de c0       	rjmp	.+444    	; 0x3ce2 <three_way+0x762>
			{
				rotate_left();
    3b26:	0e 94 0c 12 	call	0x2418	; 0x2418 <rotate_left>
				forward();
    3b2a:	0e 94 9e 12 	call	0x253c	; 0x253c <forward>
    3b2e:	d9 c0       	rjmp	.+434    	; 0x3ce2 <three_way+0x762>
			}
		}
		else if (trail_east == trail_west)
    3b30:	82 13       	cpse	r24, r18
    3b32:	13 c0       	rjmp	.+38     	; 0x3b5a <three_way+0x5da>
		{
			if (pot_west <= pot_east)
    3b34:	90 91 52 07 	lds	r25, 0x0752	; 0x800752 <pot_west>
    3b38:	80 91 54 07 	lds	r24, 0x0754	; 0x800754 <pot_east>
    3b3c:	89 17       	cp	r24, r25
    3b3e:	28 f0       	brcs	.+10     	; 0x3b4a <three_way+0x5ca>
			{
				rotate_right();
    3b40:	0e 94 55 12 	call	0x24aa	; 0x24aa <rotate_right>
				forward();
    3b44:	0e 94 9e 12 	call	0x253c	; 0x253c <forward>
    3b48:	cc c0       	rjmp	.+408    	; 0x3ce2 <three_way+0x762>
			}
			else if (pot_west > pot_east)
    3b4a:	89 17       	cp	r24, r25
    3b4c:	08 f0       	brcs	.+2      	; 0x3b50 <three_way+0x5d0>
    3b4e:	c9 c0       	rjmp	.+402    	; 0x3ce2 <three_way+0x762>
			{
				rotate_left();
    3b50:	0e 94 0c 12 	call	0x2418	; 0x2418 <rotate_left>
				forward();
    3b54:	0e 94 9e 12 	call	0x253c	; 0x253c <forward>
    3b58:	c4 c0       	rjmp	.+392    	; 0x3ce2 <three_way+0x762>
			}
		}
		else if (trail_south == trail_west)
    3b5a:	92 13       	cpse	r25, r18
    3b5c:	c2 c0       	rjmp	.+388    	; 0x3ce2 <three_way+0x762>
		{
			if (pot_south < pot_west)
    3b5e:	90 91 4f 07 	lds	r25, 0x074F	; 0x80074f <pot_south>
    3b62:	80 91 52 07 	lds	r24, 0x0752	; 0x800752 <pot_west>
    3b66:	98 17       	cp	r25, r24
    3b68:	18 f4       	brcc	.+6      	; 0x3b70 <three_way+0x5f0>
			{
				forward();
    3b6a:	0e 94 9e 12 	call	0x253c	; 0x253c <forward>
    3b6e:	b9 c0       	rjmp	.+370    	; 0x3ce2 <three_way+0x762>
			}
			else if (pot_south >= pot_west)
    3b70:	98 17       	cp	r25, r24
    3b72:	08 f4       	brcc	.+2      	; 0x3b76 <three_way+0x5f6>
    3b74:	b6 c0       	rjmp	.+364    	; 0x3ce2 <three_way+0x762>
			{
				rotate_right();
    3b76:	0e 94 55 12 	call	0x24aa	; 0x24aa <rotate_right>
				forward();
    3b7a:	0e 94 9e 12 	call	0x253c	; 0x253c <forward>
    3b7e:	b1 c0       	rjmp	.+354    	; 0x3ce2 <three_way+0x762>
			}
		}
	}
	else if (face == west)
    3b80:	03 30       	cpi	r16, 0x03	; 3
    3b82:	09 f0       	breq	.+2      	; 0x3b86 <three_way+0x606>
    3b84:	ae c0       	rjmp	.+348    	; 0x3ce2 <three_way+0x762>
	{
		// Deadend: Front
		if (deadend[x_cor - 1][y_cor] == 1)
    3b86:	62 95       	swap	r22
    3b88:	72 95       	swap	r23
    3b8a:	70 7f       	andi	r23, 0xF0	; 240
    3b8c:	76 27       	eor	r23, r22
    3b8e:	60 7f       	andi	r22, 0xF0	; 240
    3b90:	76 27       	eor	r23, r22
    3b92:	63 5b       	subi	r22, 0xB3	; 179
    3b94:	7b 4f       	sbci	r23, 0xFB	; 251
    3b96:	26 0f       	add	r18, r22
    3b98:	37 1f       	adc	r19, r23
    3b9a:	e9 01       	movw	r28, r18
    3b9c:	28 81       	ld	r18, Y
    3b9e:	21 30       	cpi	r18, 0x01	; 1
    3ba0:	31 f4       	brne	.+12     	; 0x3bae <three_way+0x62e>
		{
			way_front = 1;
    3ba2:	81 e0       	ldi	r24, 0x01	; 1
    3ba4:	80 93 4e 06 	sts	0x064E, r24	; 0x80064e <way_front>
			two_way();
    3ba8:	0e 94 06 16 	call	0x2c0c	; 0x2c0c <two_way>
    3bac:	9a c0       	rjmp	.+308    	; 0x3ce2 <three_way+0x762>
		}
		// Deadend: Right
		else if (deadend[x_cor][y_cor + 1] == 1)
    3bae:	9c 01       	movw	r18, r24
    3bb0:	22 95       	swap	r18
    3bb2:	32 95       	swap	r19
    3bb4:	30 7f       	andi	r19, 0xF0	; 240
    3bb6:	32 27       	eor	r19, r18
    3bb8:	20 7f       	andi	r18, 0xF0	; 240
    3bba:	32 27       	eor	r19, r18
    3bbc:	23 5b       	subi	r18, 0xB3	; 179
    3bbe:	3b 4f       	sbci	r19, 0xFB	; 251
    3bc0:	a2 0f       	add	r26, r18
    3bc2:	b3 1f       	adc	r27, r19
    3bc4:	2c 91       	ld	r18, X
    3bc6:	21 30       	cpi	r18, 0x01	; 1
    3bc8:	31 f4       	brne	.+12     	; 0x3bd6 <three_way+0x656>
		{
			way_right = 1;
    3bca:	81 e0       	ldi	r24, 0x01	; 1
    3bcc:	80 93 4a 03 	sts	0x034A, r24	; 0x80034a <way_right>
			two_way();
    3bd0:	0e 94 06 16 	call	0x2c0c	; 0x2c0c <two_way>
    3bd4:	86 c0       	rjmp	.+268    	; 0x3ce2 <three_way+0x762>
		}
		// Deadend: Left
		else if (deadend[x_cor][y_cor - 1] == 1)
    3bd6:	82 95       	swap	r24
    3bd8:	92 95       	swap	r25
    3bda:	90 7f       	andi	r25, 0xF0	; 240
    3bdc:	98 27       	eor	r25, r24
    3bde:	80 7f       	andi	r24, 0xF0	; 240
    3be0:	98 27       	eor	r25, r24
    3be2:	83 5b       	subi	r24, 0xB3	; 179
    3be4:	9b 4f       	sbci	r25, 0xFB	; 251
    3be6:	e8 0f       	add	r30, r24
    3be8:	f9 1f       	adc	r31, r25
    3bea:	80 81       	ld	r24, Z
    3bec:	81 30       	cpi	r24, 0x01	; 1
    3bee:	29 f4       	brne	.+10     	; 0x3bfa <three_way+0x67a>
		{
			way_left = 1;
    3bf0:	80 93 4c 04 	sts	0x044C, r24	; 0x80044c <way_left>
			two_way();
    3bf4:	0e 94 06 16 	call	0x2c0c	; 0x2c0c <two_way>
    3bf8:	74 c0       	rjmp	.+232    	; 0x3ce2 <three_way+0x762>
		}
		else if (trail_west < trail_north && trail_west < trail_south)
    3bfa:	1a 15       	cp	r17, r10
    3bfc:	28 f4       	brcc	.+10     	; 0x3c08 <three_way+0x688>
    3bfe:	1b 15       	cp	r17, r11
    3c00:	18 f4       	brcc	.+6      	; 0x3c08 <three_way+0x688>
		{
			forward();
    3c02:	0e 94 9e 12 	call	0x253c	; 0x253c <forward>
    3c06:	6d c0       	rjmp	.+218    	; 0x3ce2 <three_way+0x762>
		}
		else if ((trail_north < trail_west && trail_north < trail_west))
    3c08:	a1 16       	cp	r10, r17
    3c0a:	28 f4       	brcc	.+10     	; 0x3c16 <three_way+0x696>
		{
			rotate_right();
    3c0c:	0e 94 55 12 	call	0x24aa	; 0x24aa <rotate_right>
			forward();
    3c10:	0e 94 9e 12 	call	0x253c	; 0x253c <forward>
    3c14:	66 c0       	rjmp	.+204    	; 0x3ce2 <three_way+0x762>
		}
		else if (trail_south < trail_west && trail_south < trail_north)
    3c16:	b1 16       	cp	r11, r17
    3c18:	38 f4       	brcc	.+14     	; 0x3c28 <three_way+0x6a8>
    3c1a:	ba 14       	cp	r11, r10
    3c1c:	28 f4       	brcc	.+10     	; 0x3c28 <three_way+0x6a8>
		{
			rotate_left();
    3c1e:	0e 94 0c 12 	call	0x2418	; 0x2418 <rotate_left>
			forward();
    3c22:	0e 94 9e 12 	call	0x253c	; 0x253c <forward>
    3c26:	5d c0       	rjmp	.+186    	; 0x3ce2 <three_way+0x762>
		}
		else if (trail_west == trail_north && trail_south == trail_west)
    3c28:	a1 12       	cpse	r10, r17
    3c2a:	32 c0       	rjmp	.+100    	; 0x3c90 <three_way+0x710>
    3c2c:	b1 12       	cpse	r11, r17
    3c2e:	30 c0       	rjmp	.+96     	; 0x3c90 <three_way+0x710>
		{
			if (pot_west < pot_north && pot_west < pot_south)
    3c30:	ef 14       	cp	r14, r15
    3c32:	28 f4       	brcc	.+10     	; 0x3c3e <three_way+0x6be>
    3c34:	ed 14       	cp	r14, r13
    3c36:	18 f4       	brcc	.+6      	; 0x3c3e <three_way+0x6be>
			{
				forward();
    3c38:	0e 94 9e 12 	call	0x253c	; 0x253c <forward>
    3c3c:	52 c0       	rjmp	.+164    	; 0x3ce2 <three_way+0x762>
			}
			else if (pot_north < pot_south && pot_north < pot_west)
    3c3e:	fd 14       	cp	r15, r13
    3c40:	38 f4       	brcc	.+14     	; 0x3c50 <three_way+0x6d0>
    3c42:	fe 14       	cp	r15, r14
    3c44:	28 f4       	brcc	.+10     	; 0x3c50 <three_way+0x6d0>
			{
				rotate_right();
    3c46:	0e 94 55 12 	call	0x24aa	; 0x24aa <rotate_right>
				forward();
    3c4a:	0e 94 9e 12 	call	0x253c	; 0x253c <forward>
    3c4e:	49 c0       	rjmp	.+146    	; 0x3ce2 <three_way+0x762>
			}
			else if (pot_south < pot_west && pot_south < pot_north)
    3c50:	de 14       	cp	r13, r14
    3c52:	38 f4       	brcc	.+14     	; 0x3c62 <three_way+0x6e2>
    3c54:	df 14       	cp	r13, r15
    3c56:	28 f4       	brcc	.+10     	; 0x3c62 <three_way+0x6e2>
			{
				rotate_left();
    3c58:	0e 94 0c 12 	call	0x2418	; 0x2418 <rotate_left>
				forward();
    3c5c:	0e 94 9e 12 	call	0x253c	; 0x253c <forward>
    3c60:	40 c0       	rjmp	.+128    	; 0x3ce2 <three_way+0x762>
			}
			else if (pot_west == pot_north && pot_west == pot_south)
    3c62:	fe 10       	cpse	r15, r14
    3c64:	07 c0       	rjmp	.+14     	; 0x3c74 <three_way+0x6f4>
    3c66:	de 10       	cpse	r13, r14
    3c68:	05 c0       	rjmp	.+10     	; 0x3c74 <three_way+0x6f4>
			{
				rotate_right();
    3c6a:	0e 94 55 12 	call	0x24aa	; 0x24aa <rotate_right>
				forward();
    3c6e:	0e 94 9e 12 	call	0x253c	; 0x253c <forward>
    3c72:	37 c0       	rjmp	.+110    	; 0x3ce2 <three_way+0x762>
			}
			else if (pot_west == pot_north || pot_north == pot_south)
    3c74:	fe 14       	cp	r15, r14
    3c76:	11 f0       	breq	.+4      	; 0x3c7c <three_way+0x6fc>
    3c78:	fd 10       	cpse	r15, r13
    3c7a:	05 c0       	rjmp	.+10     	; 0x3c86 <three_way+0x706>
			{
				rotate_right();
    3c7c:	0e 94 55 12 	call	0x24aa	; 0x24aa <rotate_right>
				forward();
    3c80:	0e 94 9e 12 	call	0x253c	; 0x253c <forward>
    3c84:	2e c0       	rjmp	.+92     	; 0x3ce2 <three_way+0x762>
			}
			else if (pot_north == pot_west)
    3c86:	fe 10       	cpse	r15, r14
    3c88:	2c c0       	rjmp	.+88     	; 0x3ce2 <three_way+0x762>
			{
				forward();
    3c8a:	0e 94 9e 12 	call	0x253c	; 0x253c <forward>
    3c8e:	29 c0       	rjmp	.+82     	; 0x3ce2 <three_way+0x762>
			}
		}

		else if (trail_west == trail_north)
    3c90:	a1 12       	cpse	r10, r17
    3c92:	0c c0       	rjmp	.+24     	; 0x3cac <three_way+0x72c>
		{
			if (pot_north <= pot_west)
    3c94:	ef 14       	cp	r14, r15
    3c96:	28 f0       	brcs	.+10     	; 0x3ca2 <three_way+0x722>
			{
				rotate_right();
    3c98:	0e 94 55 12 	call	0x24aa	; 0x24aa <rotate_right>
				forward();
    3c9c:	0e 94 9e 12 	call	0x253c	; 0x253c <forward>
    3ca0:	20 c0       	rjmp	.+64     	; 0x3ce2 <three_way+0x762>
			}
			else if (pot_north > pot_west)
    3ca2:	ef 14       	cp	r14, r15
    3ca4:	f0 f4       	brcc	.+60     	; 0x3ce2 <three_way+0x762>
			{
				forward();
    3ca6:	0e 94 9e 12 	call	0x253c	; 0x253c <forward>
    3caa:	1b c0       	rjmp	.+54     	; 0x3ce2 <three_way+0x762>
			}
		}
		else if (trail_west == trail_south)
    3cac:	b1 12       	cpse	r11, r17
    3cae:	0c c0       	rjmp	.+24     	; 0x3cc8 <three_way+0x748>
		{
			if (pot_south < pot_west)
    3cb0:	de 14       	cp	r13, r14
    3cb2:	28 f4       	brcc	.+10     	; 0x3cbe <three_way+0x73e>
			{
				rotate_left();
    3cb4:	0e 94 0c 12 	call	0x2418	; 0x2418 <rotate_left>
				forward();
    3cb8:	0e 94 9e 12 	call	0x253c	; 0x253c <forward>
    3cbc:	12 c0       	rjmp	.+36     	; 0x3ce2 <three_way+0x762>
			}
			else if (pot_south >= pot_west)
    3cbe:	de 14       	cp	r13, r14
    3cc0:	80 f0       	brcs	.+32     	; 0x3ce2 <three_way+0x762>
			{
				forward();
    3cc2:	0e 94 9e 12 	call	0x253c	; 0x253c <forward>
    3cc6:	0d c0       	rjmp	.+26     	; 0x3ce2 <three_way+0x762>
			}
		}
		else if (trail_north == trail_west)
    3cc8:	a1 12       	cpse	r10, r17
    3cca:	0b c0       	rjmp	.+22     	; 0x3ce2 <three_way+0x762>
		{
			if (pot_north <= pot_west)
    3ccc:	ef 14       	cp	r14, r15
    3cce:	28 f0       	brcs	.+10     	; 0x3cda <three_way+0x75a>
			{
				rotate_right();
    3cd0:	0e 94 55 12 	call	0x24aa	; 0x24aa <rotate_right>
				forward();
    3cd4:	0e 94 9e 12 	call	0x253c	; 0x253c <forward>
    3cd8:	04 c0       	rjmp	.+8      	; 0x3ce2 <three_way+0x762>
			}
			else if (pot_north > pot_west)
    3cda:	ef 14       	cp	r14, r15
    3cdc:	10 f4       	brcc	.+4      	; 0x3ce2 <three_way+0x762>
			{
				forward();
    3cde:	0e 94 9e 12 	call	0x253c	; 0x253c <forward>
			}
		}
	}
}
    3ce2:	df 91       	pop	r29
    3ce4:	cf 91       	pop	r28
    3ce6:	1f 91       	pop	r17
    3ce8:	0f 91       	pop	r16
    3cea:	ff 90       	pop	r15
    3cec:	ef 90       	pop	r14
    3cee:	df 90       	pop	r13
    3cf0:	cf 90       	pop	r12
    3cf2:	bf 90       	pop	r11
    3cf4:	af 90       	pop	r10
    3cf6:	9f 90       	pop	r9
    3cf8:	08 95       	ret

00003cfa <decisions>:
// Decision-making routine
void decisions()
{
    // Decision-making is a quite important subroutine. With information from the wall below,
    // the algorithm now can make decisions on whether to move forward, rotate, or make a turn.
    decision = way_left + way_front + way_right;
    3cfa:	90 91 4c 04 	lds	r25, 0x044C	; 0x80044c <way_left>
    3cfe:	80 91 4e 06 	lds	r24, 0x064E	; 0x80064e <way_front>
    3d02:	89 0f       	add	r24, r25
    3d04:	90 91 4a 03 	lds	r25, 0x034A	; 0x80034a <way_right>
    3d08:	89 0f       	add	r24, r25
    3d0a:	80 93 4b 03 	sts	0x034B, r24	; 0x80034b <decision>
    if (decision == 0)
    3d0e:	81 11       	cpse	r24, r1
    3d10:	03 c0       	rjmp	.+6      	; 0x3d18 <decisions+0x1e>
    {
        // When there are 3 possible ways open, three_way subroutine will be triggered.
        // It'll never happen in any 5x5 maze. So this three_way subroutine won't
        // needs to be developed.
        three_way();
    3d12:	0e 94 c0 1a 	call	0x3580	; 0x3580 <three_way>
    3d16:	08 95       	ret
    }
    else if (decision == 1)
    3d18:	81 30       	cpi	r24, 0x01	; 1
    3d1a:	19 f4       	brne	.+6      	; 0x3d22 <decisions+0x28>
    {
        // When there are more than one way to move, it'll execute two_way subroutine.
        two_way();
    3d1c:	0e 94 06 16 	call	0x2c0c	; 0x2c0c <two_way>
    3d20:	08 95       	ret
    }
    else if (decision == 2)
    3d22:	82 30       	cpi	r24, 0x02	; 2
    3d24:	19 f4       	brne	.+6      	; 0x3d2c <decisions+0x32>
    {
        // When there is one way to move, it'll execute oneway subroutine.
        oneway();
    3d26:	0e 94 a3 15 	call	0x2b46	; 0x2b46 <oneway>
    3d2a:	08 95       	ret
    }
    else if (decision == 3)
    3d2c:	83 30       	cpi	r24, 0x03	; 3
    3d2e:	11 f4       	brne	.+4      	; 0x3d34 <decisions+0x3a>
    {
        // When there is no way to move, it'll execute dead_end subroutine.
        dead_end();
    3d30:	0e 94 bc 15 	call	0x2b78	; 0x2b78 <dead_end>
    3d34:	08 95       	ret

00003d36 <MA_OVF0>:

// Function to toggle a GPIO pin for the left motor control
void MA_OVF0()
{
    // Toggle the specified bit (Motor_A_2) in the MOTOR_PORTS GPIO register
    TOG_BIT(*(volatile uint8_t*) MOTOR_PORTS, Motor_A_6);
    3d36:	90 b3       	in	r25, 0x10	; 16
    3d38:	80 e4       	ldi	r24, 0x40	; 64
    3d3a:	89 27       	eor	r24, r25
    3d3c:	80 bb       	out	0x10, r24	; 16
    3d3e:	08 95       	ret

00003d40 <MB_OVF0>:

// Function to toggle a GPIO pin for the right motor control
void MB_OVF0()
{
    // Toggle the specified bit (Motor_B_3) in the MOTOR_PORTS GPIO register
    TOG_BIT(*(volatile uint8_t*)MOTOR_PORTS, Motor_B_3);
    3d40:	90 b3       	in	r25, 0x10	; 16
    3d42:	88 e0       	ldi	r24, 0x08	; 8
    3d44:	89 27       	eor	r24, r25
    3d46:	80 bb       	out	0x10, r24	; 16
    3d48:	08 95       	ret

00003d4a <MA_CM0>:
}
void MA_CM0()
{
    // Toggle the specified bit (Motor_A_2) in the MOTOR_PORTS GPIO register
    TOG_BIT(*(volatile uint8_t*)MOTOR_PORTS, Motor_A_6);
    3d4a:	90 b3       	in	r25, 0x10	; 16
    3d4c:	80 e4       	ldi	r24, 0x40	; 64
    3d4e:	89 27       	eor	r24, r25
    3d50:	80 bb       	out	0x10, r24	; 16
    3d52:	08 95       	ret

00003d54 <MB_CM0>:
}
void MB_CM0()
{
    // Toggle the specified bit (Motor_A_2) in the MOTOR_PORTS GPIO register
    TOG_BIT(*(volatile uint8_t*)MOTOR_PORTS, Motor_B_3);
    3d54:	90 b3       	in	r25, 0x10	; 16
    3d56:	88 e0       	ldi	r24, 0x08	; 8
    3d58:	89 27       	eor	r24, r25
    3d5a:	80 bb       	out	0x10, r24	; 16
    3d5c:	08 95       	ret

00003d5e <calculatePID_M1>:
}

// Function to calculate PID control output
uint16_t calculatePID_M1(float input) // 150 ---> 200
{
    3d5e:	4f 92       	push	r4
    3d60:	5f 92       	push	r5
    3d62:	6f 92       	push	r6
    3d64:	7f 92       	push	r7
    3d66:	8f 92       	push	r8
    3d68:	9f 92       	push	r9
    3d6a:	af 92       	push	r10
    3d6c:	bf 92       	push	r11
    3d6e:	cf 92       	push	r12
    3d70:	df 92       	push	r13
    3d72:	ef 92       	push	r14
    3d74:	ff 92       	push	r15
    3d76:	9b 01       	movw	r18, r22
    3d78:	ac 01       	movw	r20, r24
    // Calculate PID control output based on the input value and PID constants
    float error = setpoint- input;
    3d7a:	60 e0       	ldi	r22, 0x00	; 0
    3d7c:	70 e0       	ldi	r23, 0x00	; 0
    3d7e:	88 e4       	ldi	r24, 0x48	; 72
    3d80:	93 e4       	ldi	r25, 0x43	; 67
    3d82:	0e 94 87 23 	call	0x470e	; 0x470e <__subsf3>
    3d86:	6b 01       	movw	r12, r22
    3d88:	7c 01       	movw	r14, r24
    integral += error;
    3d8a:	20 91 37 03 	lds	r18, 0x0337	; 0x800337 <integral>
    3d8e:	30 91 38 03 	lds	r19, 0x0338	; 0x800338 <integral+0x1>
    3d92:	40 91 39 03 	lds	r20, 0x0339	; 0x800339 <integral+0x2>
    3d96:	50 91 3a 03 	lds	r21, 0x033A	; 0x80033a <integral+0x3>
    3d9a:	0e 94 88 23 	call	0x4710	; 0x4710 <__addsf3>
    3d9e:	4b 01       	movw	r8, r22
    3da0:	5c 01       	movw	r10, r24
    3da2:	60 93 37 03 	sts	0x0337, r22	; 0x800337 <integral>
    3da6:	70 93 38 03 	sts	0x0338, r23	; 0x800338 <integral+0x1>
    3daa:	80 93 39 03 	sts	0x0339, r24	; 0x800339 <integral+0x2>
    3dae:	90 93 3a 03 	sts	0x033A, r25	; 0x80033a <integral+0x3>
    float derivative = error - prev_error;
    3db2:	20 91 3b 03 	lds	r18, 0x033B	; 0x80033b <prev_error>
    3db6:	30 91 3c 03 	lds	r19, 0x033C	; 0x80033c <prev_error+0x1>
    3dba:	40 91 3d 03 	lds	r20, 0x033D	; 0x80033d <prev_error+0x2>
    3dbe:	50 91 3e 03 	lds	r21, 0x033E	; 0x80033e <prev_error+0x3>
    3dc2:	c7 01       	movw	r24, r14
    3dc4:	b6 01       	movw	r22, r12
    3dc6:	0e 94 87 23 	call	0x470e	; 0x470e <__subsf3>
    3dca:	2b 01       	movw	r4, r22
    3dcc:	3c 01       	movw	r6, r24

    float pid_output = Kp * error + Ki * integral + Kd * derivative;
    3dce:	2a e0       	ldi	r18, 0x0A	; 10
    3dd0:	37 ed       	ldi	r19, 0xD7	; 215
    3dd2:	43 e2       	ldi	r20, 0x23	; 35
    3dd4:	5c e3       	ldi	r21, 0x3C	; 60
    3dd6:	c5 01       	movw	r24, r10
    3dd8:	b4 01       	movw	r22, r8
    3dda:	0e 94 23 25 	call	0x4a46	; 0x4a46 <__mulsf3>
    3dde:	9b 01       	movw	r18, r22
    3de0:	ac 01       	movw	r20, r24
    3de2:	c7 01       	movw	r24, r14
    3de4:	b6 01       	movw	r22, r12
    3de6:	0e 94 88 23 	call	0x4710	; 0x4710 <__addsf3>
    3dea:	4b 01       	movw	r8, r22
    3dec:	5c 01       	movw	r10, r24
    3dee:	2a e0       	ldi	r18, 0x0A	; 10
    3df0:	37 ed       	ldi	r19, 0xD7	; 215
    3df2:	43 e2       	ldi	r20, 0x23	; 35
    3df4:	5c e3       	ldi	r21, 0x3C	; 60
    3df6:	c3 01       	movw	r24, r6
    3df8:	b2 01       	movw	r22, r4
    3dfa:	0e 94 23 25 	call	0x4a46	; 0x4a46 <__mulsf3>
    3dfe:	9b 01       	movw	r18, r22
    3e00:	ac 01       	movw	r20, r24
    3e02:	c5 01       	movw	r24, r10
    3e04:	b4 01       	movw	r22, r8
    3e06:	0e 94 88 23 	call	0x4710	; 0x4710 <__addsf3>
    prev_error = error;
    3e0a:	c0 92 3b 03 	sts	0x033B, r12	; 0x80033b <prev_error>
    3e0e:	d0 92 3c 03 	sts	0x033C, r13	; 0x80033c <prev_error+0x1>
    3e12:	e0 92 3d 03 	sts	0x033D, r14	; 0x80033d <prev_error+0x2>
    3e16:	f0 92 3e 03 	sts	0x033E, r15	; 0x80033e <prev_error+0x3>
    return pid_output;
    3e1a:	0e 94 66 24 	call	0x48cc	; 0x48cc <__fixunssfsi>
}
    3e1e:	cb 01       	movw	r24, r22
    3e20:	ff 90       	pop	r15
    3e22:	ef 90       	pop	r14
    3e24:	df 90       	pop	r13
    3e26:	cf 90       	pop	r12
    3e28:	bf 90       	pop	r11
    3e2a:	af 90       	pop	r10
    3e2c:	9f 90       	pop	r9
    3e2e:	8f 90       	pop	r8
    3e30:	7f 90       	pop	r7
    3e32:	6f 90       	pop	r6
    3e34:	5f 90       	pop	r5
    3e36:	4f 90       	pop	r4
    3e38:	08 95       	ret

00003e3a <calculatePID_M2>:

uint16_t calculatePID_M2(float input) // 150 ---> 200
{
    3e3a:	4f 92       	push	r4
    3e3c:	5f 92       	push	r5
    3e3e:	6f 92       	push	r6
    3e40:	7f 92       	push	r7
    3e42:	8f 92       	push	r8
    3e44:	9f 92       	push	r9
    3e46:	af 92       	push	r10
    3e48:	bf 92       	push	r11
    3e4a:	cf 92       	push	r12
    3e4c:	df 92       	push	r13
    3e4e:	ef 92       	push	r14
    3e50:	ff 92       	push	r15
    3e52:	9b 01       	movw	r18, r22
    3e54:	ac 01       	movw	r20, r24
    // Calculate PID control output based on the input value and PID constants
    float error = setpoint - input;
    3e56:	60 e0       	ldi	r22, 0x00	; 0
    3e58:	70 e0       	ldi	r23, 0x00	; 0
    3e5a:	88 e4       	ldi	r24, 0x48	; 72
    3e5c:	93 e4       	ldi	r25, 0x43	; 67
    3e5e:	0e 94 87 23 	call	0x470e	; 0x470e <__subsf3>
    3e62:	6b 01       	movw	r12, r22
    3e64:	7c 01       	movw	r14, r24
    integral_2 += error;
    3e66:	20 91 33 03 	lds	r18, 0x0333	; 0x800333 <integral_2>
    3e6a:	30 91 34 03 	lds	r19, 0x0334	; 0x800334 <integral_2+0x1>
    3e6e:	40 91 35 03 	lds	r20, 0x0335	; 0x800335 <integral_2+0x2>
    3e72:	50 91 36 03 	lds	r21, 0x0336	; 0x800336 <integral_2+0x3>
    3e76:	0e 94 88 23 	call	0x4710	; 0x4710 <__addsf3>
    3e7a:	4b 01       	movw	r8, r22
    3e7c:	5c 01       	movw	r10, r24
    3e7e:	60 93 33 03 	sts	0x0333, r22	; 0x800333 <integral_2>
    3e82:	70 93 34 03 	sts	0x0334, r23	; 0x800334 <integral_2+0x1>
    3e86:	80 93 35 03 	sts	0x0335, r24	; 0x800335 <integral_2+0x2>
    3e8a:	90 93 36 03 	sts	0x0336, r25	; 0x800336 <integral_2+0x3>
    float derivative = error - prev_error_2;
    3e8e:	20 91 2f 03 	lds	r18, 0x032F	; 0x80032f <prev_error_2>
    3e92:	30 91 30 03 	lds	r19, 0x0330	; 0x800330 <prev_error_2+0x1>
    3e96:	40 91 31 03 	lds	r20, 0x0331	; 0x800331 <prev_error_2+0x2>
    3e9a:	50 91 32 03 	lds	r21, 0x0332	; 0x800332 <prev_error_2+0x3>
    3e9e:	c7 01       	movw	r24, r14
    3ea0:	b6 01       	movw	r22, r12
    3ea2:	0e 94 87 23 	call	0x470e	; 0x470e <__subsf3>
    3ea6:	2b 01       	movw	r4, r22
    3ea8:	3c 01       	movw	r6, r24

    float pid_output = Kp * (error) + Ki * integral_2 + Kd * derivative;
    3eaa:	2a e0       	ldi	r18, 0x0A	; 10
    3eac:	37 ed       	ldi	r19, 0xD7	; 215
    3eae:	43 e2       	ldi	r20, 0x23	; 35
    3eb0:	5c e3       	ldi	r21, 0x3C	; 60
    3eb2:	c5 01       	movw	r24, r10
    3eb4:	b4 01       	movw	r22, r8
    3eb6:	0e 94 23 25 	call	0x4a46	; 0x4a46 <__mulsf3>
    3eba:	9b 01       	movw	r18, r22
    3ebc:	ac 01       	movw	r20, r24
    3ebe:	c7 01       	movw	r24, r14
    3ec0:	b6 01       	movw	r22, r12
    3ec2:	0e 94 88 23 	call	0x4710	; 0x4710 <__addsf3>
    3ec6:	4b 01       	movw	r8, r22
    3ec8:	5c 01       	movw	r10, r24
    3eca:	2a e0       	ldi	r18, 0x0A	; 10
    3ecc:	37 ed       	ldi	r19, 0xD7	; 215
    3ece:	43 e2       	ldi	r20, 0x23	; 35
    3ed0:	5c e3       	ldi	r21, 0x3C	; 60
    3ed2:	c3 01       	movw	r24, r6
    3ed4:	b2 01       	movw	r22, r4
    3ed6:	0e 94 23 25 	call	0x4a46	; 0x4a46 <__mulsf3>
    3eda:	9b 01       	movw	r18, r22
    3edc:	ac 01       	movw	r20, r24
    3ede:	c5 01       	movw	r24, r10
    3ee0:	b4 01       	movw	r22, r8
    3ee2:	0e 94 88 23 	call	0x4710	; 0x4710 <__addsf3>
    prev_error_2 = error;
    3ee6:	c0 92 2f 03 	sts	0x032F, r12	; 0x80032f <prev_error_2>
    3eea:	d0 92 30 03 	sts	0x0330, r13	; 0x800330 <prev_error_2+0x1>
    3eee:	e0 92 31 03 	sts	0x0331, r14	; 0x800331 <prev_error_2+0x2>
    3ef2:	f0 92 32 03 	sts	0x0332, r15	; 0x800332 <prev_error_2+0x3>
    return pid_output;
    3ef6:	0e 94 66 24 	call	0x48cc	; 0x48cc <__fixunssfsi>
}
    3efa:	cb 01       	movw	r24, r22
    3efc:	ff 90       	pop	r15
    3efe:	ef 90       	pop	r14
    3f00:	df 90       	pop	r13
    3f02:	cf 90       	pop	r12
    3f04:	bf 90       	pop	r11
    3f06:	af 90       	pop	r10
    3f08:	9f 90       	pop	r9
    3f0a:	8f 90       	pop	r8
    3f0c:	7f 90       	pop	r7
    3f0e:	6f 90       	pop	r6
    3f10:	5f 90       	pop	r5
    3f12:	4f 90       	pop	r4
    3f14:	08 95       	ret

00003f16 <customConstrain>:
uint8_t customConstrain(uint16_t value, uint8_t minVal, uint8_t maxVal)
{
    if (value < minVal)
    3f16:	26 2f       	mov	r18, r22
    3f18:	30 e0       	ldi	r19, 0x00	; 0
    3f1a:	82 17       	cp	r24, r18
    3f1c:	93 07       	cpc	r25, r19
    3f1e:	30 f0       	brcs	.+12     	; 0x3f2c <customConstrain+0x16>
        return minVal;
    else if (value > maxVal)
    3f20:	24 2f       	mov	r18, r20
    3f22:	30 e0       	ldi	r19, 0x00	; 0
    3f24:	28 17       	cp	r18, r24
    3f26:	39 07       	cpc	r19, r25
    3f28:	18 f0       	brcs	.+6      	; 0x3f30 <customConstrain+0x1a>
        return maxVal;
    else
        return value;
    3f2a:	08 95       	ret
    return pid_output;
}
uint8_t customConstrain(uint16_t value, uint8_t minVal, uint8_t maxVal)
{
    if (value < minVal)
        return minVal;
    3f2c:	86 2f       	mov	r24, r22
    3f2e:	08 95       	ret
    else if (value > maxVal)
        return maxVal;
    3f30:	84 2f       	mov	r24, r20
    else
        return value;
}
    3f32:	08 95       	ret

00003f34 <PID_Controller>:
// PID Controller function
void PID_Controller(uint8_t Moves)
{
    3f34:	8f 92       	push	r8
    3f36:	9f 92       	push	r9
    3f38:	af 92       	push	r10
    3f3a:	bf 92       	push	r11
    3f3c:	cf 92       	push	r12
    3f3e:	df 92       	push	r13
    3f40:	ef 92       	push	r14
    3f42:	ff 92       	push	r15
    3f44:	0f 93       	push	r16
    3f46:	1f 93       	push	r17
    3f48:	cf 93       	push	r28
    3f4a:	df 93       	push	r29
    3f4c:	c8 2f       	mov	r28, r24

    // Calculate left and right motor speeds in RPM (Revolutions Per Minute) based on encoder counts
    // Adjust 'ticksPerResolution' as needed for your specific encoder and system

    float ticksPerResolution = 26;
    float leftSpeed = (ticks_l / ticksPerResolution) * 60;  // Convert to RPM
    3f4e:	60 91 06 01 	lds	r22, 0x0106	; 0x800106 <ticks_l>
    3f52:	70 91 07 01 	lds	r23, 0x0107	; 0x800107 <ticks_l+0x1>
    3f56:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <ticks_l+0x2>
    3f5a:	90 91 09 01 	lds	r25, 0x0109	; 0x800109 <ticks_l+0x3>
    3f5e:	0e 94 95 24 	call	0x492a	; 0x492a <__floatunsisf>
    3f62:	20 e0       	ldi	r18, 0x00	; 0
    3f64:	30 e0       	ldi	r19, 0x00	; 0
    3f66:	40 ed       	ldi	r20, 0xD0	; 208
    3f68:	51 e4       	ldi	r21, 0x41	; 65
    3f6a:	0e 94 f4 23 	call	0x47e8	; 0x47e8 <__divsf3>
    3f6e:	20 e0       	ldi	r18, 0x00	; 0
    3f70:	30 e0       	ldi	r19, 0x00	; 0
    3f72:	40 e7       	ldi	r20, 0x70	; 112
    3f74:	52 e4       	ldi	r21, 0x42	; 66
    3f76:	0e 94 23 25 	call	0x4a46	; 0x4a46 <__mulsf3>
    3f7a:	6b 01       	movw	r12, r22
    3f7c:	7c 01       	movw	r14, r24
    float rightSpeed = (ticks_r / ticksPerResolution) * 60; // Convert to RPM
    3f7e:	60 91 0a 01 	lds	r22, 0x010A	; 0x80010a <ticks_r>
    3f82:	70 91 0b 01 	lds	r23, 0x010B	; 0x80010b <ticks_r+0x1>
    3f86:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <ticks_r+0x2>
    3f8a:	90 91 0d 01 	lds	r25, 0x010D	; 0x80010d <ticks_r+0x3>
    3f8e:	0e 94 95 24 	call	0x492a	; 0x492a <__floatunsisf>
    3f92:	20 e0       	ldi	r18, 0x00	; 0
    3f94:	30 e0       	ldi	r19, 0x00	; 0
    3f96:	40 ed       	ldi	r20, 0xD0	; 208
    3f98:	51 e4       	ldi	r21, 0x41	; 65
    3f9a:	0e 94 f4 23 	call	0x47e8	; 0x47e8 <__divsf3>
    3f9e:	20 e0       	ldi	r18, 0x00	; 0
    3fa0:	30 e0       	ldi	r19, 0x00	; 0
    3fa2:	40 e7       	ldi	r20, 0x70	; 112
    3fa4:	52 e4       	ldi	r21, 0x42	; 66
    3fa6:	0e 94 23 25 	call	0x4a46	; 0x4a46 <__mulsf3>
    3faa:	4b 01       	movw	r8, r22
    3fac:	5c 01       	movw	r10, r24

    // Apply PID control to adjust motor speeds individually
    uint16_t leftOutput = calculatePID_M1(leftSpeed);
    3fae:	c7 01       	movw	r24, r14
    3fb0:	b6 01       	movw	r22, r12
    3fb2:	0e 94 af 1e 	call	0x3d5e	; 0x3d5e <calculatePID_M1>
    3fb6:	7c 01       	movw	r14, r24
    uint16_t rightOutput = calculatePID_M2(rightSpeed);
    3fb8:	c5 01       	movw	r24, r10
    3fba:	b4 01       	movw	r22, r8
    3fbc:	0e 94 1d 1f 	call	0x3e3a	; 0x3e3a <calculatePID_M2>
    3fc0:	8c 01       	movw	r16, r24

    // Constrain the PID control output to ensure it falls within a valid range
    uint8_t Speed_1 = customConstrain(leftOutput, 0, 255);
    3fc2:	4f ef       	ldi	r20, 0xFF	; 255
    3fc4:	60 e0       	ldi	r22, 0x00	; 0
    3fc6:	c7 01       	movw	r24, r14
    3fc8:	0e 94 8b 1f 	call	0x3f16	; 0x3f16 <customConstrain>
    3fcc:	d8 2f       	mov	r29, r24
    uint8_t Speed_2 = customConstrain(rightOutput, 0, 255);
    3fce:	4f ef       	ldi	r20, 0xFF	; 255
    3fd0:	60 e0       	ldi	r22, 0x00	; 0
    3fd2:	c8 01       	movw	r24, r16
    3fd4:	0e 94 8b 1f 	call	0x3f16	; 0x3f16 <customConstrain>

    // Call the 'Movements()' function to control the motors based on calculated speeds
    Movements(Moves, Speed_1, Speed_2);
    3fd8:	48 2f       	mov	r20, r24
    3fda:	6d 2f       	mov	r22, r29
    3fdc:	8c 2f       	mov	r24, r28
    3fde:	0e 94 67 13 	call	0x26ce	; 0x26ce <Movements>
    // Delay for control update interval
    delay_ms(100); // Adjust the delay as needed for your application
    3fe2:	24 e6       	ldi	r18, 0x64	; 100
    3fe4:	30 e0       	ldi	r19, 0x00	; 0
    3fe6:	40 e0       	ldi	r20, 0x00	; 0
    3fe8:	50 e0       	ldi	r21, 0x00	; 0
    3fea:	60 e0       	ldi	r22, 0x00	; 0
    3fec:	70 e0       	ldi	r23, 0x00	; 0
    3fee:	80 e0       	ldi	r24, 0x00	; 0
    3ff0:	90 e0       	ldi	r25, 0x00	; 0
    3ff2:	0e 94 32 23 	call	0x4664	; 0x4664 <delay_ms>
    3ff6:	df 91       	pop	r29
    3ff8:	cf 91       	pop	r28
    3ffa:	1f 91       	pop	r17
    3ffc:	0f 91       	pop	r16
    3ffe:	ff 90       	pop	r15
    4000:	ef 90       	pop	r14
    4002:	df 90       	pop	r13
    4004:	cf 90       	pop	r12
    4006:	bf 90       	pop	r11
    4008:	af 90       	pop	r10
    400a:	9f 90       	pop	r9
    400c:	8f 90       	pop	r8
    400e:	08 95       	ret

00004010 <Get_counter_value>:
#include "Bit_Math.h"

// Function to calculate the total counter value including overflow counts
uint32_t Get_counter_value()
{
	return (TCNT0 + (TIMER0_u8_OVF_Number * 256)); // Calculate total counts
    4010:	82 b7       	in	r24, 0x32	; 50
    4012:	60 91 45 03 	lds	r22, 0x0345	; 0x800345 <TIMER0_u8_OVF_Number>
    4016:	70 e0       	ldi	r23, 0x00	; 0
    4018:	76 2f       	mov	r23, r22
    401a:	66 27       	eor	r22, r22
    401c:	68 0f       	add	r22, r24
    401e:	71 1d       	adc	r23, r1
    4020:	07 2e       	mov	r0, r23
    4022:	00 0c       	add	r0, r0
    4024:	88 0b       	sbc	r24, r24
    4026:	99 0b       	sbc	r25, r25
}
    4028:	08 95       	ret

0000402a <Ultra_Init>:

// Initialize the ultrasonic sensor
void Ultra_Init(S_GPIO_t *portName, uint8_t trig_pin, uint8_t echo_pin)
{
    402a:	0f 93       	push	r16
    402c:	1f 93       	push	r17
    402e:	cf 93       	push	r28
    4030:	8c 01       	movw	r16, r24
    4032:	c4 2f       	mov	r28, r20
	// Configure the trigger and echo pins as output and input respectively
	MCAL_GPIO_SET_Pin(portName, Output, trig_pin);
    4034:	46 2f       	mov	r20, r22
    4036:	61 e0       	ldi	r22, 0x01	; 1
    4038:	0e 94 2b 21 	call	0x4256	; 0x4256 <MCAL_GPIO_SET_Pin>
	MCAL_GPIO_SET_Pin(portName, Input, echo_pin);
    403c:	4c 2f       	mov	r20, r28
    403e:	60 e0       	ldi	r22, 0x00	; 0
    4040:	c8 01       	movw	r24, r16
    4042:	0e 94 2b 21 	call	0x4256	; 0x4256 <MCAL_GPIO_SET_Pin>
	MCAL_GPIO_WritePin(portName, echo_pin, LOW);
    4046:	6c 2f       	mov	r22, r28
    4048:	70 e0       	ldi	r23, 0x00	; 0
    404a:	40 e0       	ldi	r20, 0x00	; 0
    404c:	c8 01       	movw	r24, r16
    404e:	0e 94 3e 21 	call	0x427c	; 0x427c <MCAL_GPIO_WritePin>
}
    4052:	cf 91       	pop	r28
    4054:	1f 91       	pop	r17
    4056:	0f 91       	pop	r16
    4058:	08 95       	ret

0000405a <GetUltrasonicDistance>:

// Measure and return the distance using the ultrasonic sensor
uint16_t GetUltrasonicDistance(S_GPIO_t *portName, uint8_t trig_pin, uint8_t echo_pin)
{
    405a:	ff 92       	push	r15
    405c:	0f 93       	push	r16
    405e:	1f 93       	push	r17
    4060:	cf 93       	push	r28
    4062:	df 93       	push	r29
    4064:	8c 01       	movw	r16, r24
    4066:	f4 2e       	mov	r15, r20
	uint16_t distance;

	// Trigger the ultrasonic sensor
	MCAL_GPIO_WritePin(portName, trig_pin, HIGH);
    4068:	c6 2f       	mov	r28, r22
    406a:	d0 e0       	ldi	r29, 0x00	; 0
    406c:	41 e0       	ldi	r20, 0x01	; 1
    406e:	be 01       	movw	r22, r28
    4070:	0e 94 3e 21 	call	0x427c	; 0x427c <MCAL_GPIO_WritePin>
	delay_us(10);
    4074:	2a e0       	ldi	r18, 0x0A	; 10
    4076:	30 e0       	ldi	r19, 0x00	; 0
    4078:	40 e0       	ldi	r20, 0x00	; 0
    407a:	50 e0       	ldi	r21, 0x00	; 0
    407c:	60 e0       	ldi	r22, 0x00	; 0
    407e:	70 e0       	ldi	r23, 0x00	; 0
    4080:	80 e0       	ldi	r24, 0x00	; 0
    4082:	90 e0       	ldi	r25, 0x00	; 0
    4084:	0e 94 e3 22 	call	0x45c6	; 0x45c6 <delay_us>
	MCAL_GPIO_WritePin(portName, trig_pin, LOW);
    4088:	40 e0       	ldi	r20, 0x00	; 0
    408a:	be 01       	movw	r22, r28
    408c:	c8 01       	movw	r24, r16
    408e:	0e 94 3e 21 	call	0x427c	; 0x427c <MCAL_GPIO_WritePin>

	// Measure the time for the echo to return
	while (!(MCAL_GPIO_ReadPin(portName, echo_pin)))
    4092:	cf 2d       	mov	r28, r15
    4094:	d0 e0       	ldi	r29, 0x00	; 0
    4096:	be 01       	movw	r22, r28
    4098:	c8 01       	movw	r24, r16
    409a:	0e 94 34 21 	call	0x4268	; 0x4268 <MCAL_GPIO_ReadPin>
    409e:	88 23       	and	r24, r24
    40a0:	c1 f3       	breq	.-16     	; 0x4092 <GetUltrasonicDistance+0x38>
		;

	TIMER0_u8_OVF_Number = 0; // Clear overflow count
    40a2:	10 92 45 03 	sts	0x0345, r1	; 0x800345 <TIMER0_u8_OVF_Number>
	TIMER0_CALLBACK_Overflow_INTERRUPT(NULL);
    40a6:	80 e0       	ldi	r24, 0x00	; 0
    40a8:	90 e0       	ldi	r25, 0x00	; 0
    40aa:	0e 94 b3 21 	call	0x4366	; 0x4366 <TIMER0_CALLBACK_Overflow_INTERRUPT>
	TIMER0_SetCounter(0);
    40ae:	80 e0       	ldi	r24, 0x00	; 0
    40b0:	0e 94 a9 21 	call	0x4352	; 0x4352 <TIMER0_SetCounter>
	TIMER0_Start();
    40b4:	0e 94 90 21 	call	0x4320	; 0x4320 <TIMER0_Start>

	while (MCAL_GPIO_ReadPin(portName, echo_pin))
    40b8:	be 01       	movw	r22, r28
    40ba:	c8 01       	movw	r24, r16
    40bc:	0e 94 34 21 	call	0x4268	; 0x4268 <MCAL_GPIO_ReadPin>
    40c0:	81 11       	cpse	r24, r1
    40c2:	fa cf       	rjmp	.-12     	; 0x40b8 <GetUltrasonicDistance+0x5e>
		;

	TIMER0_Stop();
    40c4:	0e 94 9a 21 	call	0x4334	; 0x4334 <TIMER0_Stop>
	uint32_t Total_ticks = Get_counter_value();
    40c8:	0e 94 08 20 	call	0x4010	; 0x4010 <Get_counter_value>

	uint32_t elapsedTime = Total_ticks * (PRESCALER / CPU_F);					// 64 stands for the preScaler
    40cc:	0e 94 95 24 	call	0x492a	; 0x492a <__floatunsisf>
    40d0:	2d eb       	ldi	r18, 0xBD	; 189
    40d2:	37 e3       	ldi	r19, 0x37	; 55
    40d4:	46 e0       	ldi	r20, 0x06	; 6
    40d6:	57 e3       	ldi	r21, 0x37	; 55
    40d8:	0e 94 23 25 	call	0x4a46	; 0x4a46 <__mulsf3>
    40dc:	0e 94 66 24 	call	0x48cc	; 0x48cc <__fixunssfsi>
																			// 8000000.0 is the cpu freq
	distance = (elapsedTime * SPEED_OF_SOUND_CM_PER_US * MM_PER_CM) / 2; 	// Distance in millimeters
    40e0:	0e 94 95 24 	call	0x492a	; 0x492a <__floatunsisf>
    40e4:	28 e2       	ldi	r18, 0x28	; 40
    40e6:	3e e7       	ldi	r19, 0x7E	; 126
    40e8:	4c e0       	ldi	r20, 0x0C	; 12
    40ea:	5d e3       	ldi	r21, 0x3D	; 61
    40ec:	0e 94 23 25 	call	0x4a46	; 0x4a46 <__mulsf3>
    40f0:	20 e0       	ldi	r18, 0x00	; 0
    40f2:	30 e0       	ldi	r19, 0x00	; 0
    40f4:	40 e2       	ldi	r20, 0x20	; 32
    40f6:	51 e4       	ldi	r21, 0x41	; 65
    40f8:	0e 94 23 25 	call	0x4a46	; 0x4a46 <__mulsf3>
    40fc:	20 e0       	ldi	r18, 0x00	; 0
    40fe:	30 e0       	ldi	r19, 0x00	; 0
    4100:	40 e0       	ldi	r20, 0x00	; 0
    4102:	5f e3       	ldi	r21, 0x3F	; 63
    4104:	0e 94 23 25 	call	0x4a46	; 0x4a46 <__mulsf3>
    4108:	0e 94 66 24 	call	0x48cc	; 0x48cc <__fixunssfsi>

	return distance;
}
    410c:	cb 01       	movw	r24, r22
    410e:	df 91       	pop	r29
    4110:	cf 91       	pop	r28
    4112:	1f 91       	pop	r17
    4114:	0f 91       	pop	r16
    4116:	ff 90       	pop	r15
    4118:	08 95       	ret

0000411a <Maze_Navigate>:

void Maze_Navigate()
{
	// This function is responsible for navigating the maze.
	// Check if the maze solving is finished.
	finishcheck(); 
    411a:	0e 94 02 15 	call	0x2a04	; 0x2a04 <finishcheck>
	if (Navegating_times == DONE_Navigating)
    411e:	80 91 2e 03 	lds	r24, 0x032E	; 0x80032e <Navegating_times>
    4122:	83 30       	cpi	r24, 0x03	; 3
    4124:	11 f4       	brne	.+4      	; 0x412a <Maze_Navigate+0x10>
	Go_Back();
    4126:	0e 94 6b 15 	call	0x2ad6	; 0x2ad6 <Go_Back>
	// Check for walls and update maze information.
	wallcheck();
    412a:	0e 94 db 14 	call	0x29b6	; 0x29b6 <wallcheck>
	// Make navigation decisions based on the current state.
	decisions();
    412e:	0e 94 7d 1e 	call	0x3cfa	; 0x3cfa <decisions>
	// Perform the next move based on the decisions.
	Oop(); 
    4132:	0e 94 4d 14 	call	0x289a	; 0x289a <Oop>
	// Delay for a half second (500 milliseconds).
	delay_ms(500); 
    4136:	24 ef       	ldi	r18, 0xF4	; 244
    4138:	31 e0       	ldi	r19, 0x01	; 1
    413a:	40 e0       	ldi	r20, 0x00	; 0
    413c:	50 e0       	ldi	r21, 0x00	; 0
    413e:	60 e0       	ldi	r22, 0x00	; 0
    4140:	70 e0       	ldi	r23, 0x00	; 0
    4142:	80 e0       	ldi	r24, 0x00	; 0
    4144:	90 e0       	ldi	r25, 0x00	; 0
    4146:	0e 94 32 23 	call	0x4664	; 0x4664 <delay_ms>
    414a:	08 95       	ret

0000414c <Maze_Run>:
}

void Maze_Run()
{
	// Find the lowest path through the maze.
	Find_Lowest_Path();
    414c:	0e 94 a3 11 	call	0x2346	; 0x2346 <Find_Lowest_Path>
	wallcheck();
    4150:	0e 94 db 14 	call	0x29b6	; 0x29b6 <wallcheck>
    4154:	08 95       	ret

00004156 <main>:
}

int main()
{
	// Initialize the micro-controller and peripherals.
	G_Init();
    4156:	0e 94 dc 00 	call	0x1b8	; 0x1b8 <G_Init>
	while (1)
	{
		// Check if the navigation switch is on (GPIOA_PIN_0) and the run switch is off (GPIOA_PIN_1).
		if (MCAL_GPIO_ReadPin(Switches_PORT, NAV_switch) && !MCAL_GPIO_ReadPin(Switches_PORT, RUN_switch))
    415a:	60 e0       	ldi	r22, 0x00	; 0
    415c:	70 e0       	ldi	r23, 0x00	; 0
    415e:	86 e3       	ldi	r24, 0x36	; 54
    4160:	90 e0       	ldi	r25, 0x00	; 0
    4162:	0e 94 34 21 	call	0x4268	; 0x4268 <MCAL_GPIO_ReadPin>
    4166:	88 23       	and	r24, r24
    4168:	61 f0       	breq	.+24     	; 0x4182 <main+0x2c>
    416a:	61 e0       	ldi	r22, 0x01	; 1
    416c:	70 e0       	ldi	r23, 0x00	; 0
    416e:	86 e3       	ldi	r24, 0x36	; 54
    4170:	90 e0       	ldi	r25, 0x00	; 0
    4172:	0e 94 34 21 	call	0x4268	; 0x4268 <MCAL_GPIO_ReadPin>
    4176:	81 11       	cpse	r24, r1
    4178:	04 c0       	rjmp	.+8      	; 0x4182 <main+0x2c>
		{
			// Set the navigation mode flag.
			isNavigating = 1;
    417a:	81 e0       	ldi	r24, 0x01	; 1
    417c:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
    4180:	11 c0       	rjmp	.+34     	; 0x41a4 <main+0x4e>
		}
		// Check if the navigation switch is off and the run switch is on.
		else if (!MCAL_GPIO_ReadPin(Switches_PORT, NAV_switch) && MCAL_GPIO_ReadPin(Switches_PORT, RUN_switch))
    4182:	60 e0       	ldi	r22, 0x00	; 0
    4184:	70 e0       	ldi	r23, 0x00	; 0
    4186:	86 e3       	ldi	r24, 0x36	; 54
    4188:	90 e0       	ldi	r25, 0x00	; 0
    418a:	0e 94 34 21 	call	0x4268	; 0x4268 <MCAL_GPIO_ReadPin>
    418e:	81 11       	cpse	r24, r1
    4190:	09 c0       	rjmp	.+18     	; 0x41a4 <main+0x4e>
    4192:	61 e0       	ldi	r22, 0x01	; 1
    4194:	70 e0       	ldi	r23, 0x00	; 0
    4196:	86 e3       	ldi	r24, 0x36	; 54
    4198:	90 e0       	ldi	r25, 0x00	; 0
    419a:	0e 94 34 21 	call	0x4268	; 0x4268 <MCAL_GPIO_ReadPin>
    419e:	81 11       	cpse	r24, r1
		{
			// Set the run mode flag.
			isNavigating = 0;
    41a0:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__DATA_REGION_ORIGIN__>
		}
		// Check the current mode and execute the corresponding function.
		if (isNavigating)
    41a4:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
    41a8:	88 23       	and	r24, r24
    41aa:	19 f0       	breq	.+6      	; 0x41b2 <main+0x5c>
		{
			// Execute the maze navigation function.
			Maze_Navigate();
    41ac:	0e 94 8d 20 	call	0x411a	; 0x411a <Maze_Navigate>
    41b0:	d4 cf       	rjmp	.-88     	; 0x415a <main+0x4>
		}
		else if (!isNavigating)
    41b2:	81 11       	cpse	r24, r1
    41b4:	03 c0       	rjmp	.+6      	; 0x41bc <main+0x66>
		{
			// Execute the maze solving function.
			Maze_Run();
    41b6:	0e 94 a6 20 	call	0x414c	; 0x414c <Maze_Run>
    41ba:	cf cf       	rjmp	.-98     	; 0x415a <main+0x4>
		}
		else
		{
			// Handle any other case (shouldn't reach this point).
			Oop();
    41bc:	0e 94 4d 14 	call	0x289a	; 0x289a <Oop>
    41c0:	cc cf       	rjmp	.-104    	; 0x415a <main+0x4>

000041c2 <EEPROM_write>:
    for (uint16_t i = 0; i < nbyte; i++)
    {
        EEPROM_write(start_byte + i, *str); /* Write each byte to EEPROM */
        str++;                              // Select Next Byte
    }
}
    41c2:	f9 99       	sbic	0x1f, 1	; 31
    41c4:	fe cf       	rjmp	.-4      	; 0x41c2 <EEPROM_write>
    41c6:	81 bd       	out	0x21, r24	; 33
    41c8:	60 bd       	out	0x20, r22	; 32
    41ca:	8f b3       	in	r24, 0x1f	; 31
    41cc:	84 60       	ori	r24, 0x04	; 4
    41ce:	8f bb       	out	0x1f, r24	; 31
    41d0:	8f b3       	in	r24, 0x1f	; 31
    41d2:	82 60       	ori	r24, 0x02	; 2
    41d4:	8f bb       	out	0x1f, r24	; 31
    41d6:	08 95       	ret

000041d8 <EEPROM_erase>:
    41d8:	0f 93       	push	r16
    41da:	1f 93       	push	r17
    41dc:	cf 93       	push	r28
    41de:	df 93       	push	r29
    41e0:	ec 01       	movw	r28, r24
    41e2:	8b 01       	movw	r16, r22
    41e4:	05 c0       	rjmp	.+10     	; 0x41f0 <EEPROM_erase+0x18>
    41e6:	6f ef       	ldi	r22, 0xFF	; 255
    41e8:	ce 01       	movw	r24, r28
    41ea:	0e 94 e1 20 	call	0x41c2	; 0x41c2 <EEPROM_write>
    41ee:	21 96       	adiw	r28, 0x01	; 1
    41f0:	c0 17       	cp	r28, r16
    41f2:	d1 07       	cpc	r29, r17
    41f4:	c0 f3       	brcs	.-16     	; 0x41e6 <EEPROM_erase+0xe>
    41f6:	df 91       	pop	r29
    41f8:	cf 91       	pop	r28
    41fa:	1f 91       	pop	r17
    41fc:	0f 91       	pop	r16
    41fe:	08 95       	ret

00004200 <EEPROM_read>:

uint8_t EEPROM_read(uint8_t address)
{
    // Wait for completion of previous write
    while (EEPROM->EECR & (1 << EEPROM_EEWE))
    4200:	f9 99       	sbic	0x1f, 1	; 31
    4202:	fe cf       	rjmp	.-4      	; 0x4200 <EEPROM_read>
        ;

    // Set up address register
    EEPROM->EEARL = address;
    4204:	81 bd       	out	0x21, r24	; 33

    // Start eeprom read by setting EERE
    EEPROM->EECR |= (1 << EEPROM_EERE);
    4206:	8f b3       	in	r24, 0x1f	; 31
    4208:	81 60       	ori	r24, 0x01	; 1
    420a:	8f bb       	out	0x1f, r24	; 31

    // Return data from data register
    return EEPROM->EEDR;
    420c:	80 b5       	in	r24, 0x20	; 32
}
    420e:	08 95       	ret

00004210 <MCAL_GPIO_SET_PinMode_and_number>:
}
uint16_t MCAL_GPIO_ReadPORT(S_GPIO_t *GPIOx)
{
    // Read the entire port state
    return GPIOx->PIN;
}
    4210:	fb 01       	movw	r30, r22
    4212:	21 81       	ldd	r18, Z+1	; 0x01
    4214:	21 11       	cpse	r18, r1
    4216:	10 c0       	rjmp	.+32     	; 0x4238 <MCAL_GPIO_SET_PinMode_and_number+0x28>
    4218:	fc 01       	movw	r30, r24
    421a:	41 81       	ldd	r20, Z+1	; 0x01
    421c:	21 e0       	ldi	r18, 0x01	; 1
    421e:	30 e0       	ldi	r19, 0x00	; 0
    4220:	fb 01       	movw	r30, r22
    4222:	00 80       	ld	r0, Z
    4224:	02 c0       	rjmp	.+4      	; 0x422a <MCAL_GPIO_SET_PinMode_and_number+0x1a>
    4226:	22 0f       	add	r18, r18
    4228:	33 1f       	adc	r19, r19
    422a:	0a 94       	dec	r0
    422c:	e2 f7       	brpl	.-8      	; 0x4226 <MCAL_GPIO_SET_PinMode_and_number+0x16>
    422e:	20 95       	com	r18
    4230:	24 23       	and	r18, r20
    4232:	fc 01       	movw	r30, r24
    4234:	21 83       	std	Z+1, r18	; 0x01
    4236:	08 95       	ret
    4238:	fc 01       	movw	r30, r24
    423a:	41 81       	ldd	r20, Z+1	; 0x01
    423c:	21 e0       	ldi	r18, 0x01	; 1
    423e:	30 e0       	ldi	r19, 0x00	; 0
    4240:	fb 01       	movw	r30, r22
    4242:	00 80       	ld	r0, Z
    4244:	02 c0       	rjmp	.+4      	; 0x424a <MCAL_GPIO_SET_PinMode_and_number+0x3a>
    4246:	22 0f       	add	r18, r18
    4248:	33 1f       	adc	r19, r19
    424a:	0a 94       	dec	r0
    424c:	e2 f7       	brpl	.-8      	; 0x4246 <MCAL_GPIO_SET_PinMode_and_number+0x36>
    424e:	24 2b       	or	r18, r20
    4250:	fc 01       	movw	r30, r24
    4252:	21 83       	std	Z+1, r18	; 0x01
    4254:	08 95       	ret

00004256 <MCAL_GPIO_SET_Pin>:
    4256:	e0 e0       	ldi	r30, 0x00	; 0
    4258:	f0 e0       	ldi	r31, 0x00	; 0
    425a:	61 83       	std	Z+1, r22	; 0x01
    425c:	40 83       	st	Z, r20
    425e:	60 e0       	ldi	r22, 0x00	; 0
    4260:	70 e0       	ldi	r23, 0x00	; 0
    4262:	0e 94 08 21 	call	0x4210	; 0x4210 <MCAL_GPIO_SET_PinMode_and_number>
    4266:	08 95       	ret

00004268 <MCAL_GPIO_ReadPin>:
    4268:	fc 01       	movw	r30, r24
    426a:	80 81       	ld	r24, Z
    426c:	90 e0       	ldi	r25, 0x00	; 0
    426e:	02 c0       	rjmp	.+4      	; 0x4274 <MCAL_GPIO_ReadPin+0xc>
    4270:	95 95       	asr	r25
    4272:	87 95       	ror	r24
    4274:	6a 95       	dec	r22
    4276:	e2 f7       	brpl	.-8      	; 0x4270 <MCAL_GPIO_ReadPin+0x8>
    4278:	81 70       	andi	r24, 0x01	; 1
    427a:	08 95       	ret

0000427c <MCAL_GPIO_WritePin>:
void MCAL_GPIO_WritePin(S_GPIO_t *GPIOx, uint16_t Pin_Number, GPIO_PIN_State value)
{
    427c:	fc 01       	movw	r30, r24
    // Write the specified value to the pin
    if (value == HIGH)
    427e:	41 30       	cpi	r20, 0x01	; 1
    4280:	59 f4       	brne	.+22     	; 0x4298 <MCAL_GPIO_WritePin+0x1c>
    {
        SET_BIT(GPIOx->PORT, Pin_Number);
    4282:	22 81       	ldd	r18, Z+2	; 0x02
    4284:	81 e0       	ldi	r24, 0x01	; 1
    4286:	90 e0       	ldi	r25, 0x00	; 0
    4288:	02 c0       	rjmp	.+4      	; 0x428e <MCAL_GPIO_WritePin+0x12>
    428a:	88 0f       	add	r24, r24
    428c:	99 1f       	adc	r25, r25
    428e:	6a 95       	dec	r22
    4290:	e2 f7       	brpl	.-8      	; 0x428a <MCAL_GPIO_WritePin+0xe>
    4292:	82 2b       	or	r24, r18
    4294:	82 83       	std	Z+2, r24	; 0x02
    4296:	08 95       	ret
    }
    else
    {
        CLR_BIT(GPIOx->PORT, Pin_Number);
    4298:	92 81       	ldd	r25, Z+2	; 0x02
    429a:	21 e0       	ldi	r18, 0x01	; 1
    429c:	30 e0       	ldi	r19, 0x00	; 0
    429e:	02 c0       	rjmp	.+4      	; 0x42a4 <MCAL_GPIO_WritePin+0x28>
    42a0:	22 0f       	add	r18, r18
    42a2:	33 1f       	adc	r19, r19
    42a4:	6a 95       	dec	r22
    42a6:	e2 f7       	brpl	.-8      	; 0x42a0 <MCAL_GPIO_WritePin+0x24>
    42a8:	20 95       	com	r18
    42aa:	29 23       	and	r18, r25
    42ac:	22 83       	std	Z+2, r18	; 0x02
    42ae:	08 95       	ret

000042b0 <GIE_enable>:
#include "MCAL_interrupt.h"
#include "Bit_Math.h"

void GIE_enable(void)
{
	SET_BIT(SREG,SREG_BIT7);
    42b0:	8f b7       	in	r24, 0x3f	; 63
    42b2:	80 68       	ori	r24, 0x80	; 128
    42b4:	8f bf       	out	0x3f, r24	; 63
    42b6:	08 95       	ret

000042b8 <GIE_disable>:
}
void GIE_disable(void)
{
	CLR_BIT(SREG,SREG_BIT7);
    42b8:	8f b7       	in	r24, 0x3f	; 63
    42ba:	8f 77       	andi	r24, 0x7F	; 127
    42bc:	8f bf       	out	0x3f, r24	; 63
    42be:	08 95       	ret

000042c0 <INT_0_init>:
		case LOW_LEVEL:
		CLR_BIT(MCUCR,MCUCR_ISC00);
		CLR_BIT(MCUCR,MCUCR_ISC01);
		break;
		case falling_edge:
		CLR_BIT(MCUCR,MCUCR_ISC00);
    42c0:	85 b7       	in	r24, 0x35	; 53
    42c2:	8e 7f       	andi	r24, 0xFE	; 254
    42c4:	85 bf       	out	0x35, r24	; 53
		SET_BIT(MCUCR,MCUCR_ISC01);
    42c6:	85 b7       	in	r24, 0x35	; 53
    42c8:	82 60       	ori	r24, 0x02	; 2
    42ca:	85 bf       	out	0x35, r24	; 53
		case on_change:// Falling and Rising Edge
		SET_BIT(MCUCR,MCUCR_ISC00);
		CLR_BIT(MCUCR,MCUCR_ISC01);
		break;
	}
	SET_BIT(GICR,GICR_INT0_PIN);
    42cc:	8b b7       	in	r24, 0x3b	; 59
    42ce:	80 64       	ori	r24, 0x40	; 64
    42d0:	8b bf       	out	0x3b, r24	; 59
    42d2:	08 95       	ret

000042d4 <INT_1_init>:
		case LOW_LEVEL:
		CLR_BIT(MCUCR,MCUCR_ISC10);
		CLR_BIT(MCUCR,MCUCR_ISC11);
		break;
		case falling_edge:
		CLR_BIT(MCUCR,MCUCR_ISC10);
    42d4:	85 b7       	in	r24, 0x35	; 53
    42d6:	8b 7f       	andi	r24, 0xFB	; 251
    42d8:	85 bf       	out	0x35, r24	; 53
		SET_BIT(MCUCR,MCUCR_ISC11);
    42da:	85 b7       	in	r24, 0x35	; 53
    42dc:	88 60       	ori	r24, 0x08	; 8
    42de:	85 bf       	out	0x35, r24	; 53
		case on_change:
		SET_BIT(MCUCR,MCUCR_ISC10);
		CLR_BIT(MCUCR,MCUCR_ISC11);
		break;
	}
	SET_BIT(GICR,GICR_INT1_PIN);
    42e0:	8b b7       	in	r24, 0x3b	; 59
    42e2:	80 68       	ori	r24, 0x80	; 128
    42e4:	8b bf       	out	0x3b, r24	; 59
    42e6:	08 95       	ret

000042e8 <INT_2_init>:
void INT_2_init(uint8_t x)
{
	switch(Sense_Control)
	{
		case falling_edge:
		CLR_BIT(MCUCSR,MCUCSR_ISC2_PIN);
    42e8:	84 b7       	in	r24, 0x34	; 52
    42ea:	8f 7b       	andi	r24, 0xBF	; 191
    42ec:	84 bf       	out	0x34, r24	; 52
		break;
		case rising_edge:
		SET_BIT(MCUCSR,MCUCSR_ISC2_PIN);
		break;
	}
	SET_BIT(GICR,GICR_INT2_PIN);
    42ee:	8b b7       	in	r24, 0x3b	; 59
    42f0:	80 62       	ori	r24, 0x20	; 32
    42f2:	8b bf       	out	0x3b, r24	; 59
    42f4:	08 95       	ret

000042f6 <INT0_CallBack>:
void (* INT1_ISR) (void) = NULL;
void (* INT2_ISR) (void) = NULL;

void INT0_CallBack(void (* func)(void))
{
	if(func != NULL)
    42f6:	00 97       	sbiw	r24, 0x00	; 0
    42f8:	21 f0       	breq	.+8      	; 0x4302 <INT0_CallBack+0xc>
	{
		INT0_ISR = func;
    42fa:	90 93 44 03 	sts	0x0344, r25	; 0x800344 <INT0_ISR+0x1>
    42fe:	80 93 43 03 	sts	0x0343, r24	; 0x800343 <INT0_ISR>
    4302:	08 95       	ret

00004304 <INT1_CallBack>:
	}
}
void INT1_CallBack(void (* func)(void))
{
	if(func != NULL)
    4304:	00 97       	sbiw	r24, 0x00	; 0
    4306:	21 f0       	breq	.+8      	; 0x4310 <INT1_CallBack+0xc>
	{
		INT1_ISR = func;
    4308:	90 93 42 03 	sts	0x0342, r25	; 0x800342 <INT1_ISR+0x1>
    430c:	80 93 41 03 	sts	0x0341, r24	; 0x800341 <INT1_ISR>
    4310:	08 95       	ret

00004312 <INT2_CallBack>:
	}
}

void INT2_CallBack(void (* func)(void))
{
	if(func != NULL)
    4312:	00 97       	sbiw	r24, 0x00	; 0
    4314:	21 f0       	breq	.+8      	; 0x431e <INT2_CallBack+0xc>
	{
		INT2_ISR = func;
    4316:	90 93 40 03 	sts	0x0340, r25	; 0x800340 <INT2_ISR+0x1>
    431a:	80 93 3f 03 	sts	0x033F, r24	; 0x80033f <INT2_ISR>
    431e:	08 95       	ret

00004320 <TIMER0_Start>:
	WDTCR = 0x00;
}
// use WDT_TimeOut_t
void WDT_ON(uint8_t time)
{
	SET_BIT(WDTCR, time);
    4320:	93 b7       	in	r25, 0x33	; 51
    4322:	e0 91 59 07 	lds	r30, 0x0759	; 0x800759 <Global_configuartion>
    4326:	f0 91 5a 07 	lds	r31, 0x075A	; 0x80075a <Global_configuartion+0x1>
    432a:	83 81       	ldd	r24, Z+3	; 0x03
    432c:	89 2b       	or	r24, r25
    432e:	83 bf       	out	0x33, r24	; 51
    4330:	80 e0       	ldi	r24, 0x00	; 0
    4332:	08 95       	ret

00004334 <TIMER0_Stop>:
    4334:	83 b7       	in	r24, 0x33	; 51
    4336:	88 7f       	andi	r24, 0xF8	; 248
    4338:	83 bf       	out	0x33, r24	; 51
    433a:	80 e0       	ldi	r24, 0x00	; 0
    433c:	08 95       	ret

0000433e <TIMER0_SetCompare>:
    433e:	cf 93       	push	r28
    4340:	c8 2f       	mov	r28, r24
    4342:	0e 94 5c 21 	call	0x42b8	; 0x42b8 <GIE_disable>
    4346:	cc bf       	out	0x3c, r28	; 60
    4348:	0e 94 58 21 	call	0x42b0	; 0x42b0 <GIE_enable>
    434c:	80 e0       	ldi	r24, 0x00	; 0
    434e:	cf 91       	pop	r28
    4350:	08 95       	ret

00004352 <TIMER0_SetCounter>:
    4352:	cf 93       	push	r28
    4354:	c8 2f       	mov	r28, r24
    4356:	0e 94 5c 21 	call	0x42b8	; 0x42b8 <GIE_disable>
    435a:	c2 bf       	out	0x32, r28	; 50
    435c:	0e 94 58 21 	call	0x42b0	; 0x42b0 <GIE_enable>
    4360:	80 e0       	ldi	r24, 0x00	; 0
    4362:	cf 91       	pop	r28
    4364:	08 95       	ret

00004366 <TIMER0_CALLBACK_Overflow_INTERRUPT>:
    4366:	90 93 47 03 	sts	0x0347, r25	; 0x800347 <CALLBACK_OVER_FLOW+0x1>
    436a:	80 93 46 03 	sts	0x0346, r24	; 0x800346 <CALLBACK_OVER_FLOW>
    436e:	08 95       	ret

00004370 <TIMER0_CALLBACK_CompareMatch_INTERRUPT>:
    4370:	90 93 67 07 	sts	0x0767, r25	; 0x800767 <CALLBACK_COMPARE+0x1>
    4374:	80 93 66 07 	sts	0x0766, r24	; 0x800766 <CALLBACK_COMPARE>
    4378:	08 95       	ret

0000437a <TIMER0_Init_PWM>:
    437a:	fc 01       	movw	r30, r24
    437c:	24 81       	ldd	r18, Z+4	; 0x04
    437e:	20 34       	cpi	r18, 0x40	; 64
    4380:	39 f4       	brne	.+14     	; 0x4390 <TIMER0_Init_PWM+0x16>
    4382:	23 b7       	in	r18, 0x33	; 51
    4384:	20 64       	ori	r18, 0x40	; 64
    4386:	23 bf       	out	0x33, r18	; 51
    4388:	23 b7       	in	r18, 0x33	; 51
    438a:	28 60       	ori	r18, 0x08	; 8
    438c:	23 bf       	out	0x33, r18	; 51
    438e:	08 c0       	rjmp	.+16     	; 0x43a0 <TIMER0_Init_PWM+0x26>
    4390:	28 30       	cpi	r18, 0x08	; 8
    4392:	31 f4       	brne	.+12     	; 0x43a0 <TIMER0_Init_PWM+0x26>
    4394:	23 b7       	in	r18, 0x33	; 51
    4396:	2f 7b       	andi	r18, 0xBF	; 191
    4398:	23 bf       	out	0x33, r18	; 51
    439a:	23 b7       	in	r18, 0x33	; 51
    439c:	28 60       	ori	r18, 0x08	; 8
    439e:	23 bf       	out	0x33, r18	; 51
    43a0:	fc 01       	movw	r30, r24
    43a2:	85 81       	ldd	r24, Z+5	; 0x05
    43a4:	82 30       	cpi	r24, 0x02	; 2
    43a6:	39 f4       	brne	.+14     	; 0x43b6 <TIMER0_Init_PWM+0x3c>
    43a8:	83 b7       	in	r24, 0x33	; 51
    43aa:	80 61       	ori	r24, 0x10	; 16
    43ac:	83 bf       	out	0x33, r24	; 51
    43ae:	83 b7       	in	r24, 0x33	; 51
    43b0:	8f 7d       	andi	r24, 0xDF	; 223
    43b2:	83 bf       	out	0x33, r24	; 51
    43b4:	08 95       	ret
    43b6:	81 30       	cpi	r24, 0x01	; 1
    43b8:	31 f4       	brne	.+12     	; 0x43c6 <TIMER0_Init_PWM+0x4c>
    43ba:	83 b7       	in	r24, 0x33	; 51
    43bc:	80 62       	ori	r24, 0x20	; 32
    43be:	83 bf       	out	0x33, r24	; 51
    43c0:	83 b7       	in	r24, 0x33	; 51
    43c2:	80 61       	ori	r24, 0x10	; 16
    43c4:	83 bf       	out	0x33, r24	; 51
    43c6:	08 95       	ret

000043c8 <TIMER0_Init>:
    43c8:	cf 93       	push	r28
    43ca:	12 be       	out	0x32, r1	; 50
    43cc:	00 97       	sbiw	r24, 0x00	; 0
    43ce:	09 f4       	brne	.+2      	; 0x43d2 <TIMER0_Init+0xa>
    43d0:	46 c0       	rjmp	.+140    	; 0x445e <TIMER0_Init+0x96>
    43d2:	90 93 5a 07 	sts	0x075A, r25	; 0x80075a <Global_configuartion+0x1>
    43d6:	80 93 59 07 	sts	0x0759, r24	; 0x800759 <Global_configuartion>
    43da:	fc 01       	movw	r30, r24
    43dc:	80 81       	ld	r24, Z
    43de:	88 23       	and	r24, r24
    43e0:	11 f0       	breq	.+4      	; 0x43e6 <TIMER0_Init+0x1e>
    43e2:	88 30       	cpi	r24, 0x08	; 8
    43e4:	29 f4       	brne	.+10     	; 0x43f0 <TIMER0_Init+0x28>
    43e6:	93 b7       	in	r25, 0x33	; 51
    43e8:	89 2b       	or	r24, r25
    43ea:	83 bf       	out	0x33, r24	; 51
    43ec:	c0 e0       	ldi	r28, 0x00	; 0
    43ee:	01 c0       	rjmp	.+2      	; 0x43f2 <TIMER0_Init+0x2a>
    43f0:	c1 e0       	ldi	r28, 0x01	; 1
    43f2:	e0 91 59 07 	lds	r30, 0x0759	; 0x800759 <Global_configuartion>
    43f6:	f0 91 5a 07 	lds	r31, 0x075A	; 0x80075a <Global_configuartion+0x1>
    43fa:	83 81       	ldd	r24, Z+3	; 0x03
    43fc:	88 30       	cpi	r24, 0x08	; 8
    43fe:	20 f4       	brcc	.+8      	; 0x4408 <TIMER0_Init+0x40>
    4400:	93 b7       	in	r25, 0x33	; 51
    4402:	89 2b       	or	r24, r25
    4404:	83 bf       	out	0x33, r24	; 51
    4406:	01 c0       	rjmp	.+2      	; 0x440a <TIMER0_Init+0x42>
    4408:	c1 e0       	ldi	r28, 0x01	; 1
    440a:	e0 91 59 07 	lds	r30, 0x0759	; 0x800759 <Global_configuartion>
    440e:	f0 91 5a 07 	lds	r31, 0x075A	; 0x80075a <Global_configuartion+0x1>
    4412:	82 81       	ldd	r24, Z+2	; 0x02
    4414:	82 30       	cpi	r24, 0x02	; 2
    4416:	21 f4       	brne	.+8      	; 0x4420 <TIMER0_Init+0x58>
    4418:	99 b7       	in	r25, 0x39	; 57
    441a:	89 2b       	or	r24, r25
    441c:	89 bf       	out	0x39, r24	; 57
    441e:	04 c0       	rjmp	.+8      	; 0x4428 <TIMER0_Init+0x60>
    4420:	89 b7       	in	r24, 0x39	; 57
    4422:	8d 7f       	andi	r24, 0xFD	; 253
    4424:	89 bf       	out	0x39, r24	; 57
    4426:	c1 e0       	ldi	r28, 0x01	; 1
    4428:	e0 91 59 07 	lds	r30, 0x0759	; 0x800759 <Global_configuartion>
    442c:	f0 91 5a 07 	lds	r31, 0x075A	; 0x80075a <Global_configuartion+0x1>
    4430:	81 81       	ldd	r24, Z+1	; 0x01
    4432:	81 30       	cpi	r24, 0x01	; 1
    4434:	21 f4       	brne	.+8      	; 0x443e <TIMER0_Init+0x76>
    4436:	99 b7       	in	r25, 0x39	; 57
    4438:	89 2b       	or	r24, r25
    443a:	89 bf       	out	0x39, r24	; 57
    443c:	03 c0       	rjmp	.+6      	; 0x4444 <TIMER0_Init+0x7c>
    443e:	89 b7       	in	r24, 0x39	; 57
    4440:	8e 7f       	andi	r24, 0xFE	; 254
    4442:	89 bf       	out	0x39, r24	; 57
    4444:	e0 91 59 07 	lds	r30, 0x0759	; 0x800759 <Global_configuartion>
    4448:	f0 91 5a 07 	lds	r31, 0x075A	; 0x80075a <Global_configuartion+0x1>
    444c:	94 81       	ldd	r25, Z+4	; 0x04
    444e:	98 30       	cpi	r25, 0x08	; 8
    4450:	11 f0       	breq	.+4      	; 0x4456 <TIMER0_Init+0x8e>
    4452:	90 34       	cpi	r25, 0x40	; 64
    4454:	31 f4       	brne	.+12     	; 0x4462 <TIMER0_Init+0x9a>
    4456:	cf 01       	movw	r24, r30
    4458:	0e 94 bd 21 	call	0x437a	; 0x437a <TIMER0_Init_PWM>
    445c:	03 c0       	rjmp	.+6      	; 0x4464 <TIMER0_Init+0x9c>
    445e:	c1 e0       	ldi	r28, 0x01	; 1
    4460:	01 c0       	rjmp	.+2      	; 0x4464 <TIMER0_Init+0x9c>
    4462:	c1 e0       	ldi	r28, 0x01	; 1
    4464:	8c 2f       	mov	r24, r28
    4466:	cf 91       	pop	r28
    4468:	08 95       	ret

0000446a <TIMER1_Init>:
    446a:	fc 01       	movw	r30, r24
    446c:	1d bc       	out	0x2d, r1	; 45
    446e:	1c bc       	out	0x2c, r1	; 44
    4470:	97 e0       	ldi	r25, 0x07	; 7
    4472:	af e5       	ldi	r26, 0x5F	; 95
    4474:	b7 e0       	ldi	r27, 0x07	; 7
    4476:	01 90       	ld	r0, Z+
    4478:	0d 92       	st	X+, r0
    447a:	9a 95       	dec	r25
    447c:	e1 f7       	brne	.-8      	; 0x4476 <TIMER1_Init+0xc>
    447e:	ef e5       	ldi	r30, 0x5F	; 95
    4480:	f7 e0       	ldi	r31, 0x07	; 7
    4482:	80 81       	ld	r24, Z
    4484:	48 2f       	mov	r20, r24
    4486:	43 70       	andi	r20, 0x03	; 3
    4488:	8c 70       	andi	r24, 0x0C	; 12
    448a:	90 e0       	ldi	r25, 0x00	; 0
    448c:	88 0f       	add	r24, r24
    448e:	99 1f       	adc	r25, r25
    4490:	58 2f       	mov	r21, r24
    4492:	22 81       	ldd	r18, Z+2	; 0x02
    4494:	28 30       	cpi	r18, 0x08	; 8
    4496:	20 f4       	brcc	.+8      	; 0x44a0 <TIMER1_Init+0x36>
    4498:	52 2f       	mov	r21, r18
    449a:	58 2b       	or	r21, r24
    449c:	80 e0       	ldi	r24, 0x00	; 0
    449e:	01 c0       	rjmp	.+2      	; 0x44a2 <TIMER1_Init+0x38>
    44a0:	81 e0       	ldi	r24, 0x01	; 1
    44a2:	90 91 64 07 	lds	r25, 0x0764	; 0x800764 <G_TIMER1_Config+0x5>
    44a6:	94 30       	cpi	r25, 0x04	; 4
    44a8:	21 f4       	brne	.+8      	; 0x44b2 <TIMER1_Init+0x48>
    44aa:	99 b7       	in	r25, 0x39	; 57
    44ac:	94 60       	ori	r25, 0x04	; 4
    44ae:	99 bf       	out	0x39, r25	; 57
    44b0:	01 c0       	rjmp	.+2      	; 0x44b4 <TIMER1_Init+0x4a>
    44b2:	81 e0       	ldi	r24, 0x01	; 1
    44b4:	30 91 60 07 	lds	r19, 0x0760	; 0x800760 <G_TIMER1_Config+0x1>
    44b8:	31 11       	cpse	r19, r1
    44ba:	08 c0       	rjmp	.+16     	; 0x44cc <TIMER1_Init+0x62>
    44bc:	90 91 62 07 	lds	r25, 0x0762	; 0x800762 <G_TIMER1_Config+0x3>
    44c0:	90 31       	cpi	r25, 0x10	; 16
    44c2:	09 f5       	brne	.+66     	; 0x4506 <TIMER1_Init+0x9c>
    44c4:	29 b7       	in	r18, 0x39	; 57
    44c6:	92 2b       	or	r25, r18
    44c8:	99 bf       	out	0x39, r25	; 57
    44ca:	24 c0       	rjmp	.+72     	; 0x4514 <TIMER1_Init+0xaa>
    44cc:	31 30       	cpi	r19, 0x01	; 1
    44ce:	41 f4       	brne	.+16     	; 0x44e0 <TIMER1_Init+0x76>
    44d0:	90 91 63 07 	lds	r25, 0x0763	; 0x800763 <G_TIMER1_Config+0x4>
    44d4:	98 30       	cpi	r25, 0x08	; 8
    44d6:	c9 f4       	brne	.+50     	; 0x450a <TIMER1_Init+0xa0>
    44d8:	29 b7       	in	r18, 0x39	; 57
    44da:	92 2b       	or	r25, r18
    44dc:	99 bf       	out	0x39, r25	; 57
    44de:	1a c0       	rjmp	.+52     	; 0x4514 <TIMER1_Init+0xaa>
    44e0:	32 30       	cpi	r19, 0x02	; 2
    44e2:	a9 f4       	brne	.+42     	; 0x450e <TIMER1_Init+0xa4>
    44e4:	90 91 62 07 	lds	r25, 0x0762	; 0x800762 <G_TIMER1_Config+0x3>
    44e8:	90 31       	cpi	r25, 0x10	; 16
    44ea:	21 f4       	brne	.+8      	; 0x44f4 <TIMER1_Init+0x8a>
    44ec:	29 b7       	in	r18, 0x39	; 57
    44ee:	92 2b       	or	r25, r18
    44f0:	99 bf       	out	0x39, r25	; 57
    44f2:	01 c0       	rjmp	.+2      	; 0x44f6 <TIMER1_Init+0x8c>
    44f4:	81 e0       	ldi	r24, 0x01	; 1
    44f6:	90 91 63 07 	lds	r25, 0x0763	; 0x800763 <G_TIMER1_Config+0x4>
    44fa:	98 30       	cpi	r25, 0x08	; 8
    44fc:	51 f4       	brne	.+20     	; 0x4512 <TIMER1_Init+0xa8>
    44fe:	29 b7       	in	r18, 0x39	; 57
    4500:	92 2b       	or	r25, r18
    4502:	99 bf       	out	0x39, r25	; 57
    4504:	07 c0       	rjmp	.+14     	; 0x4514 <TIMER1_Init+0xaa>
    4506:	81 e0       	ldi	r24, 0x01	; 1
    4508:	05 c0       	rjmp	.+10     	; 0x4514 <TIMER1_Init+0xaa>
    450a:	81 e0       	ldi	r24, 0x01	; 1
    450c:	03 c0       	rjmp	.+6      	; 0x4514 <TIMER1_Init+0xaa>
    450e:	81 e0       	ldi	r24, 0x01	; 1
    4510:	01 c0       	rjmp	.+2      	; 0x4514 <TIMER1_Init+0xaa>
    4512:	81 e0       	ldi	r24, 0x01	; 1
    4514:	30 91 5f 07 	lds	r19, 0x075F	; 0x80075f <G_TIMER1_Config>
    4518:	33 23       	and	r19, r19
    451a:	39 f0       	breq	.+14     	; 0x452a <TIMER1_Init+0xc0>
    451c:	34 30       	cpi	r19, 0x04	; 4
    451e:	29 f0       	breq	.+10     	; 0x452a <TIMER1_Init+0xc0>
    4520:	3c 30       	cpi	r19, 0x0C	; 12
    4522:	19 f0       	breq	.+6      	; 0x452a <TIMER1_Init+0xc0>
    4524:	90 91 65 07 	lds	r25, 0x0765	; 0x800765 <G_TIMER1_Config+0x6>
    4528:	49 2b       	or	r20, r25
    452a:	2f b5       	in	r18, 0x2f	; 47
    452c:	24 2b       	or	r18, r20
    452e:	2f bd       	out	0x2f, r18	; 47
    4530:	9e b5       	in	r25, 0x2e	; 46
    4532:	95 2b       	or	r25, r21
    4534:	9e bd       	out	0x2e, r25	; 46
    4536:	08 95       	ret

00004538 <TIMER1_Start>:
    4538:	9e b5       	in	r25, 0x2e	; 46
    453a:	80 91 61 07 	lds	r24, 0x0761	; 0x800761 <G_TIMER1_Config+0x2>
    453e:	89 2b       	or	r24, r25
    4540:	8e bd       	out	0x2e, r24	; 46
    4542:	80 e0       	ldi	r24, 0x00	; 0
    4544:	08 95       	ret

00004546 <TIMER1_Stop>:
    4546:	8e b5       	in	r24, 0x2e	; 46
    4548:	1e bc       	out	0x2e, r1	; 46
    454a:	80 e0       	ldi	r24, 0x00	; 0
    454c:	08 95       	ret

0000454e <TIMER1_SetICR1Value>:
    454e:	cf 93       	push	r28
    4550:	df 93       	push	r29
    4552:	ec 01       	movw	r28, r24
    4554:	0e 94 5c 21 	call	0x42b8	; 0x42b8 <GIE_disable>
    4558:	d7 bd       	out	0x27, r29	; 39
    455a:	c6 bd       	out	0x26, r28	; 38
    455c:	0e 94 58 21 	call	0x42b0	; 0x42b0 <GIE_enable>
    4560:	80 e0       	ldi	r24, 0x00	; 0
    4562:	df 91       	pop	r29
    4564:	cf 91       	pop	r28
    4566:	08 95       	ret

00004568 <TIMER1_SetCompareValue>:
    4568:	0f 93       	push	r16
    456a:	1f 93       	push	r17
    456c:	cf 93       	push	r28
    456e:	8c 01       	movw	r16, r24
    4570:	c6 2f       	mov	r28, r22
    4572:	0e 94 5c 21 	call	0x42b8	; 0x42b8 <GIE_disable>
    4576:	c2 30       	cpi	r28, 0x02	; 2
    4578:	31 f4       	brne	.+12     	; 0x4586 <TIMER1_SetCompareValue+0x1e>
    457a:	1b bd       	out	0x2b, r17	; 43
    457c:	0a bd       	out	0x2a, r16	; 42
    457e:	19 bd       	out	0x29, r17	; 41
    4580:	08 bd       	out	0x28, r16	; 40
    4582:	c0 e0       	ldi	r28, 0x00	; 0
    4584:	0c c0       	rjmp	.+24     	; 0x459e <TIMER1_SetCompareValue+0x36>
    4586:	c1 11       	cpse	r28, r1
    4588:	03 c0       	rjmp	.+6      	; 0x4590 <TIMER1_SetCompareValue+0x28>
    458a:	1b bd       	out	0x2b, r17	; 43
    458c:	0a bd       	out	0x2a, r16	; 42
    458e:	07 c0       	rjmp	.+14     	; 0x459e <TIMER1_SetCompareValue+0x36>
    4590:	c1 30       	cpi	r28, 0x01	; 1
    4592:	21 f4       	brne	.+8      	; 0x459c <TIMER1_SetCompareValue+0x34>
    4594:	19 bd       	out	0x29, r17	; 41
    4596:	08 bd       	out	0x28, r16	; 40
    4598:	c0 e0       	ldi	r28, 0x00	; 0
    459a:	01 c0       	rjmp	.+2      	; 0x459e <TIMER1_SetCompareValue+0x36>
    459c:	c1 e0       	ldi	r28, 0x01	; 1
    459e:	0e 94 58 21 	call	0x42b0	; 0x42b0 <GIE_enable>
    45a2:	8c 2f       	mov	r24, r28
    45a4:	cf 91       	pop	r28
    45a6:	1f 91       	pop	r17
    45a8:	0f 91       	pop	r16
    45aa:	08 95       	ret

000045ac <TIMER1_SetCounterValue>:
    45ac:	cf 93       	push	r28
    45ae:	df 93       	push	r29
    45b0:	ec 01       	movw	r28, r24
    45b2:	0e 94 5c 21 	call	0x42b8	; 0x42b8 <GIE_disable>
    45b6:	dd bd       	out	0x2d, r29	; 45
    45b8:	cc bd       	out	0x2c, r28	; 44
    45ba:	0e 94 58 21 	call	0x42b0	; 0x42b0 <GIE_enable>
    45be:	80 e0       	ldi	r24, 0x00	; 0
    45c0:	df 91       	pop	r29
    45c2:	cf 91       	pop	r28
    45c4:	08 95       	ret

000045c6 <delay_us>:
}
// Function to delay in microseconds
void delay_us(uint64_t us)
{
    45c6:	7f 92       	push	r7
    45c8:	8f 92       	push	r8
    45ca:	9f 92       	push	r9
    45cc:	af 92       	push	r10
    45ce:	bf 92       	push	r11
    45d0:	cf 92       	push	r12
    45d2:	df 92       	push	r13
    45d4:	ef 92       	push	r14
    45d6:	ff 92       	push	r15
    45d8:	0f 93       	push	r16
    45da:	1f 93       	push	r17
    45dc:	cf 93       	push	r28
    45de:	df 93       	push	r29
	us *= 8; // 8 cycles per microsecond for 8 MHz clock
    45e0:	03 e0       	ldi	r16, 0x03	; 3
    45e2:	0e 94 90 25 	call	0x4b20	; 0x4b20 <__ashldi3>
    45e6:	f2 2e       	mov	r15, r18
    45e8:	03 2f       	mov	r16, r19
    45ea:	14 2f       	mov	r17, r20
    45ec:	d5 2f       	mov	r29, r21
    45ee:	c6 2f       	mov	r28, r22
    45f0:	b7 2f       	mov	r27, r23
    45f2:	f8 2f       	mov	r31, r24
    45f4:	e9 2f       	mov	r30, r25
	while (us--)
    45f6:	09 c0       	rjmp	.+18     	; 0x460a <delay_us+0x44>
	{
		asm volatile("nop"); // No operation assembly instruction
    45f8:	00 00       	nop
}
// Function to delay in microseconds
void delay_us(uint64_t us)
{
	us *= 8; // 8 cycles per microsecond for 8 MHz clock
	while (us--)
    45fa:	f7 2c       	mov	r15, r7
    45fc:	08 2d       	mov	r16, r8
    45fe:	19 2d       	mov	r17, r9
    4600:	da 2d       	mov	r29, r10
    4602:	cb 2d       	mov	r28, r11
    4604:	bc 2d       	mov	r27, r12
    4606:	fd 2d       	mov	r31, r13
    4608:	ee 2d       	mov	r30, r14
    460a:	2f 2d       	mov	r18, r15
    460c:	30 2f       	mov	r19, r16
    460e:	41 2f       	mov	r20, r17
    4610:	5d 2f       	mov	r21, r29
    4612:	6c 2f       	mov	r22, r28
    4614:	7b 2f       	mov	r23, r27
    4616:	8f 2f       	mov	r24, r31
    4618:	9e 2f       	mov	r25, r30
    461a:	af ef       	ldi	r26, 0xFF	; 255
    461c:	0e 94 a9 25 	call	0x4b52	; 0x4b52 <__adddi3_s8>
    4620:	72 2e       	mov	r7, r18
    4622:	83 2e       	mov	r8, r19
    4624:	94 2e       	mov	r9, r20
    4626:	a5 2e       	mov	r10, r21
    4628:	b6 2e       	mov	r11, r22
    462a:	c7 2e       	mov	r12, r23
    462c:	d8 2e       	mov	r13, r24
    462e:	e9 2e       	mov	r14, r25
    4630:	2f 2d       	mov	r18, r15
    4632:	30 2f       	mov	r19, r16
    4634:	41 2f       	mov	r20, r17
    4636:	5d 2f       	mov	r21, r29
    4638:	6c 2f       	mov	r22, r28
    463a:	7b 2f       	mov	r23, r27
    463c:	8f 2f       	mov	r24, r31
    463e:	9e 2f       	mov	r25, r30
    4640:	a0 e0       	ldi	r26, 0x00	; 0
    4642:	0e 94 b5 25 	call	0x4b6a	; 0x4b6a <__cmpdi2_s8>
    4646:	c1 f6       	brne	.-80     	; 0x45f8 <delay_us+0x32>
	{
		asm volatile("nop"); // No operation assembly instruction
	}
}
    4648:	df 91       	pop	r29
    464a:	cf 91       	pop	r28
    464c:	1f 91       	pop	r17
    464e:	0f 91       	pop	r16
    4650:	ff 90       	pop	r15
    4652:	ef 90       	pop	r14
    4654:	df 90       	pop	r13
    4656:	cf 90       	pop	r12
    4658:	bf 90       	pop	r11
    465a:	af 90       	pop	r10
    465c:	9f 90       	pop	r9
    465e:	8f 90       	pop	r8
    4660:	7f 90       	pop	r7
    4662:	08 95       	ret

00004664 <delay_ms>:
// Function to delay in milliseconds
void delay_ms(uint64_t ms)
{
    4664:	7f 92       	push	r7
    4666:	8f 92       	push	r8
    4668:	9f 92       	push	r9
    466a:	af 92       	push	r10
    466c:	bf 92       	push	r11
    466e:	cf 92       	push	r12
    4670:	df 92       	push	r13
    4672:	ef 92       	push	r14
    4674:	ff 92       	push	r15
    4676:	0f 93       	push	r16
    4678:	1f 93       	push	r17
    467a:	cf 93       	push	r28
    467c:	df 93       	push	r29
    467e:	f2 2e       	mov	r15, r18
    4680:	03 2f       	mov	r16, r19
    4682:	14 2f       	mov	r17, r20
    4684:	d5 2f       	mov	r29, r21
    4686:	c6 2f       	mov	r28, r22
    4688:	b7 2f       	mov	r27, r23
    468a:	f8 2f       	mov	r31, r24
    468c:	e9 2f       	mov	r30, r25
	while (ms--)
    468e:	12 c0       	rjmp	.+36     	; 0x46b4 <delay_ms+0x50>
	{
		delay_us(1000); // Delay for 1000 microseconds (1 ms)
    4690:	28 ee       	ldi	r18, 0xE8	; 232
    4692:	33 e0       	ldi	r19, 0x03	; 3
    4694:	40 e0       	ldi	r20, 0x00	; 0
    4696:	50 e0       	ldi	r21, 0x00	; 0
    4698:	60 e0       	ldi	r22, 0x00	; 0
    469a:	70 e0       	ldi	r23, 0x00	; 0
    469c:	80 e0       	ldi	r24, 0x00	; 0
    469e:	90 e0       	ldi	r25, 0x00	; 0
    46a0:	0e 94 e3 22 	call	0x45c6	; 0x45c6 <delay_us>
	}
}
// Function to delay in milliseconds
void delay_ms(uint64_t ms)
{
	while (ms--)
    46a4:	f7 2c       	mov	r15, r7
    46a6:	08 2d       	mov	r16, r8
    46a8:	19 2d       	mov	r17, r9
    46aa:	da 2d       	mov	r29, r10
    46ac:	cb 2d       	mov	r28, r11
    46ae:	bc 2d       	mov	r27, r12
    46b0:	fd 2d       	mov	r31, r13
    46b2:	ee 2d       	mov	r30, r14
    46b4:	2f 2d       	mov	r18, r15
    46b6:	30 2f       	mov	r19, r16
    46b8:	41 2f       	mov	r20, r17
    46ba:	5d 2f       	mov	r21, r29
    46bc:	6c 2f       	mov	r22, r28
    46be:	7b 2f       	mov	r23, r27
    46c0:	8f 2f       	mov	r24, r31
    46c2:	9e 2f       	mov	r25, r30
    46c4:	af ef       	ldi	r26, 0xFF	; 255
    46c6:	0e 94 a9 25 	call	0x4b52	; 0x4b52 <__adddi3_s8>
    46ca:	72 2e       	mov	r7, r18
    46cc:	83 2e       	mov	r8, r19
    46ce:	94 2e       	mov	r9, r20
    46d0:	a5 2e       	mov	r10, r21
    46d2:	b6 2e       	mov	r11, r22
    46d4:	c7 2e       	mov	r12, r23
    46d6:	d8 2e       	mov	r13, r24
    46d8:	e9 2e       	mov	r14, r25
    46da:	2f 2d       	mov	r18, r15
    46dc:	30 2f       	mov	r19, r16
    46de:	41 2f       	mov	r20, r17
    46e0:	5d 2f       	mov	r21, r29
    46e2:	6c 2f       	mov	r22, r28
    46e4:	7b 2f       	mov	r23, r27
    46e6:	8f 2f       	mov	r24, r31
    46e8:	9e 2f       	mov	r25, r30
    46ea:	a0 e0       	ldi	r26, 0x00	; 0
    46ec:	0e 94 b5 25 	call	0x4b6a	; 0x4b6a <__cmpdi2_s8>
    46f0:	79 f6       	brne	.-98     	; 0x4690 <delay_ms+0x2c>
	{
		delay_us(1000); // Delay for 1000 microseconds (1 ms)
	}
}
    46f2:	df 91       	pop	r29
    46f4:	cf 91       	pop	r28
    46f6:	1f 91       	pop	r17
    46f8:	0f 91       	pop	r16
    46fa:	ff 90       	pop	r15
    46fc:	ef 90       	pop	r14
    46fe:	df 90       	pop	r13
    4700:	cf 90       	pop	r12
    4702:	bf 90       	pop	r11
    4704:	af 90       	pop	r10
    4706:	9f 90       	pop	r9
    4708:	8f 90       	pop	r8
    470a:	7f 90       	pop	r7
    470c:	08 95       	ret

0000470e <__subsf3>:
    470e:	50 58       	subi	r21, 0x80	; 128

00004710 <__addsf3>:
    4710:	bb 27       	eor	r27, r27
    4712:	aa 27       	eor	r26, r26
    4714:	0e 94 9f 23 	call	0x473e	; 0x473e <__addsf3x>
    4718:	0c 94 e9 24 	jmp	0x49d2	; 0x49d2 <__fp_round>
    471c:	0e 94 db 24 	call	0x49b6	; 0x49b6 <__fp_pscA>
    4720:	38 f0       	brcs	.+14     	; 0x4730 <__addsf3+0x20>
    4722:	0e 94 e2 24 	call	0x49c4	; 0x49c4 <__fp_pscB>
    4726:	20 f0       	brcs	.+8      	; 0x4730 <__addsf3+0x20>
    4728:	39 f4       	brne	.+14     	; 0x4738 <__addsf3+0x28>
    472a:	9f 3f       	cpi	r25, 0xFF	; 255
    472c:	19 f4       	brne	.+6      	; 0x4734 <__addsf3+0x24>
    472e:	26 f4       	brtc	.+8      	; 0x4738 <__addsf3+0x28>
    4730:	0c 94 d8 24 	jmp	0x49b0	; 0x49b0 <__fp_nan>
    4734:	0e f4       	brtc	.+2      	; 0x4738 <__addsf3+0x28>
    4736:	e0 95       	com	r30
    4738:	e7 fb       	bst	r30, 7
    473a:	0c 94 d2 24 	jmp	0x49a4	; 0x49a4 <__fp_inf>

0000473e <__addsf3x>:
    473e:	e9 2f       	mov	r30, r25
    4740:	0e 94 fa 24 	call	0x49f4	; 0x49f4 <__fp_split3>
    4744:	58 f3       	brcs	.-42     	; 0x471c <__addsf3+0xc>
    4746:	ba 17       	cp	r27, r26
    4748:	62 07       	cpc	r22, r18
    474a:	73 07       	cpc	r23, r19
    474c:	84 07       	cpc	r24, r20
    474e:	95 07       	cpc	r25, r21
    4750:	20 f0       	brcs	.+8      	; 0x475a <__addsf3x+0x1c>
    4752:	79 f4       	brne	.+30     	; 0x4772 <__addsf3x+0x34>
    4754:	a6 f5       	brtc	.+104    	; 0x47be <__addsf3x+0x80>
    4756:	0c 94 1c 25 	jmp	0x4a38	; 0x4a38 <__fp_zero>
    475a:	0e f4       	brtc	.+2      	; 0x475e <__addsf3x+0x20>
    475c:	e0 95       	com	r30
    475e:	0b 2e       	mov	r0, r27
    4760:	ba 2f       	mov	r27, r26
    4762:	a0 2d       	mov	r26, r0
    4764:	0b 01       	movw	r0, r22
    4766:	b9 01       	movw	r22, r18
    4768:	90 01       	movw	r18, r0
    476a:	0c 01       	movw	r0, r24
    476c:	ca 01       	movw	r24, r20
    476e:	a0 01       	movw	r20, r0
    4770:	11 24       	eor	r1, r1
    4772:	ff 27       	eor	r31, r31
    4774:	59 1b       	sub	r21, r25
    4776:	99 f0       	breq	.+38     	; 0x479e <__addsf3x+0x60>
    4778:	59 3f       	cpi	r21, 0xF9	; 249
    477a:	50 f4       	brcc	.+20     	; 0x4790 <__addsf3x+0x52>
    477c:	50 3e       	cpi	r21, 0xE0	; 224
    477e:	68 f1       	brcs	.+90     	; 0x47da <__addsf3x+0x9c>
    4780:	1a 16       	cp	r1, r26
    4782:	f0 40       	sbci	r31, 0x00	; 0
    4784:	a2 2f       	mov	r26, r18
    4786:	23 2f       	mov	r18, r19
    4788:	34 2f       	mov	r19, r20
    478a:	44 27       	eor	r20, r20
    478c:	58 5f       	subi	r21, 0xF8	; 248
    478e:	f3 cf       	rjmp	.-26     	; 0x4776 <__addsf3x+0x38>
    4790:	46 95       	lsr	r20
    4792:	37 95       	ror	r19
    4794:	27 95       	ror	r18
    4796:	a7 95       	ror	r26
    4798:	f0 40       	sbci	r31, 0x00	; 0
    479a:	53 95       	inc	r21
    479c:	c9 f7       	brne	.-14     	; 0x4790 <__addsf3x+0x52>
    479e:	7e f4       	brtc	.+30     	; 0x47be <__addsf3x+0x80>
    47a0:	1f 16       	cp	r1, r31
    47a2:	ba 0b       	sbc	r27, r26
    47a4:	62 0b       	sbc	r22, r18
    47a6:	73 0b       	sbc	r23, r19
    47a8:	84 0b       	sbc	r24, r20
    47aa:	ba f0       	brmi	.+46     	; 0x47da <__addsf3x+0x9c>
    47ac:	91 50       	subi	r25, 0x01	; 1
    47ae:	a1 f0       	breq	.+40     	; 0x47d8 <__addsf3x+0x9a>
    47b0:	ff 0f       	add	r31, r31
    47b2:	bb 1f       	adc	r27, r27
    47b4:	66 1f       	adc	r22, r22
    47b6:	77 1f       	adc	r23, r23
    47b8:	88 1f       	adc	r24, r24
    47ba:	c2 f7       	brpl	.-16     	; 0x47ac <__addsf3x+0x6e>
    47bc:	0e c0       	rjmp	.+28     	; 0x47da <__addsf3x+0x9c>
    47be:	ba 0f       	add	r27, r26
    47c0:	62 1f       	adc	r22, r18
    47c2:	73 1f       	adc	r23, r19
    47c4:	84 1f       	adc	r24, r20
    47c6:	48 f4       	brcc	.+18     	; 0x47da <__addsf3x+0x9c>
    47c8:	87 95       	ror	r24
    47ca:	77 95       	ror	r23
    47cc:	67 95       	ror	r22
    47ce:	b7 95       	ror	r27
    47d0:	f7 95       	ror	r31
    47d2:	9e 3f       	cpi	r25, 0xFE	; 254
    47d4:	08 f0       	brcs	.+2      	; 0x47d8 <__addsf3x+0x9a>
    47d6:	b0 cf       	rjmp	.-160    	; 0x4738 <__addsf3+0x28>
    47d8:	93 95       	inc	r25
    47da:	88 0f       	add	r24, r24
    47dc:	08 f0       	brcs	.+2      	; 0x47e0 <__addsf3x+0xa2>
    47de:	99 27       	eor	r25, r25
    47e0:	ee 0f       	add	r30, r30
    47e2:	97 95       	ror	r25
    47e4:	87 95       	ror	r24
    47e6:	08 95       	ret

000047e8 <__divsf3>:
    47e8:	0e 94 08 24 	call	0x4810	; 0x4810 <__divsf3x>
    47ec:	0c 94 e9 24 	jmp	0x49d2	; 0x49d2 <__fp_round>
    47f0:	0e 94 e2 24 	call	0x49c4	; 0x49c4 <__fp_pscB>
    47f4:	58 f0       	brcs	.+22     	; 0x480c <__divsf3+0x24>
    47f6:	0e 94 db 24 	call	0x49b6	; 0x49b6 <__fp_pscA>
    47fa:	40 f0       	brcs	.+16     	; 0x480c <__divsf3+0x24>
    47fc:	29 f4       	brne	.+10     	; 0x4808 <__divsf3+0x20>
    47fe:	5f 3f       	cpi	r21, 0xFF	; 255
    4800:	29 f0       	breq	.+10     	; 0x480c <__divsf3+0x24>
    4802:	0c 94 d2 24 	jmp	0x49a4	; 0x49a4 <__fp_inf>
    4806:	51 11       	cpse	r21, r1
    4808:	0c 94 1d 25 	jmp	0x4a3a	; 0x4a3a <__fp_szero>
    480c:	0c 94 d8 24 	jmp	0x49b0	; 0x49b0 <__fp_nan>

00004810 <__divsf3x>:
    4810:	0e 94 fa 24 	call	0x49f4	; 0x49f4 <__fp_split3>
    4814:	68 f3       	brcs	.-38     	; 0x47f0 <__divsf3+0x8>

00004816 <__divsf3_pse>:
    4816:	99 23       	and	r25, r25
    4818:	b1 f3       	breq	.-20     	; 0x4806 <__divsf3+0x1e>
    481a:	55 23       	and	r21, r21
    481c:	91 f3       	breq	.-28     	; 0x4802 <__divsf3+0x1a>
    481e:	95 1b       	sub	r25, r21
    4820:	55 0b       	sbc	r21, r21
    4822:	bb 27       	eor	r27, r27
    4824:	aa 27       	eor	r26, r26
    4826:	62 17       	cp	r22, r18
    4828:	73 07       	cpc	r23, r19
    482a:	84 07       	cpc	r24, r20
    482c:	38 f0       	brcs	.+14     	; 0x483c <__divsf3_pse+0x26>
    482e:	9f 5f       	subi	r25, 0xFF	; 255
    4830:	5f 4f       	sbci	r21, 0xFF	; 255
    4832:	22 0f       	add	r18, r18
    4834:	33 1f       	adc	r19, r19
    4836:	44 1f       	adc	r20, r20
    4838:	aa 1f       	adc	r26, r26
    483a:	a9 f3       	breq	.-22     	; 0x4826 <__divsf3_pse+0x10>
    483c:	35 d0       	rcall	.+106    	; 0x48a8 <__divsf3_pse+0x92>
    483e:	0e 2e       	mov	r0, r30
    4840:	3a f0       	brmi	.+14     	; 0x4850 <__divsf3_pse+0x3a>
    4842:	e0 e8       	ldi	r30, 0x80	; 128
    4844:	32 d0       	rcall	.+100    	; 0x48aa <__divsf3_pse+0x94>
    4846:	91 50       	subi	r25, 0x01	; 1
    4848:	50 40       	sbci	r21, 0x00	; 0
    484a:	e6 95       	lsr	r30
    484c:	00 1c       	adc	r0, r0
    484e:	ca f7       	brpl	.-14     	; 0x4842 <__divsf3_pse+0x2c>
    4850:	2b d0       	rcall	.+86     	; 0x48a8 <__divsf3_pse+0x92>
    4852:	fe 2f       	mov	r31, r30
    4854:	29 d0       	rcall	.+82     	; 0x48a8 <__divsf3_pse+0x92>
    4856:	66 0f       	add	r22, r22
    4858:	77 1f       	adc	r23, r23
    485a:	88 1f       	adc	r24, r24
    485c:	bb 1f       	adc	r27, r27
    485e:	26 17       	cp	r18, r22
    4860:	37 07       	cpc	r19, r23
    4862:	48 07       	cpc	r20, r24
    4864:	ab 07       	cpc	r26, r27
    4866:	b0 e8       	ldi	r27, 0x80	; 128
    4868:	09 f0       	breq	.+2      	; 0x486c <__divsf3_pse+0x56>
    486a:	bb 0b       	sbc	r27, r27
    486c:	80 2d       	mov	r24, r0
    486e:	bf 01       	movw	r22, r30
    4870:	ff 27       	eor	r31, r31
    4872:	93 58       	subi	r25, 0x83	; 131
    4874:	5f 4f       	sbci	r21, 0xFF	; 255
    4876:	3a f0       	brmi	.+14     	; 0x4886 <__divsf3_pse+0x70>
    4878:	9e 3f       	cpi	r25, 0xFE	; 254
    487a:	51 05       	cpc	r21, r1
    487c:	78 f0       	brcs	.+30     	; 0x489c <__divsf3_pse+0x86>
    487e:	0c 94 d2 24 	jmp	0x49a4	; 0x49a4 <__fp_inf>
    4882:	0c 94 1d 25 	jmp	0x4a3a	; 0x4a3a <__fp_szero>
    4886:	5f 3f       	cpi	r21, 0xFF	; 255
    4888:	e4 f3       	brlt	.-8      	; 0x4882 <__divsf3_pse+0x6c>
    488a:	98 3e       	cpi	r25, 0xE8	; 232
    488c:	d4 f3       	brlt	.-12     	; 0x4882 <__divsf3_pse+0x6c>
    488e:	86 95       	lsr	r24
    4890:	77 95       	ror	r23
    4892:	67 95       	ror	r22
    4894:	b7 95       	ror	r27
    4896:	f7 95       	ror	r31
    4898:	9f 5f       	subi	r25, 0xFF	; 255
    489a:	c9 f7       	brne	.-14     	; 0x488e <__divsf3_pse+0x78>
    489c:	88 0f       	add	r24, r24
    489e:	91 1d       	adc	r25, r1
    48a0:	96 95       	lsr	r25
    48a2:	87 95       	ror	r24
    48a4:	97 f9       	bld	r25, 7
    48a6:	08 95       	ret
    48a8:	e1 e0       	ldi	r30, 0x01	; 1
    48aa:	66 0f       	add	r22, r22
    48ac:	77 1f       	adc	r23, r23
    48ae:	88 1f       	adc	r24, r24
    48b0:	bb 1f       	adc	r27, r27
    48b2:	62 17       	cp	r22, r18
    48b4:	73 07       	cpc	r23, r19
    48b6:	84 07       	cpc	r24, r20
    48b8:	ba 07       	cpc	r27, r26
    48ba:	20 f0       	brcs	.+8      	; 0x48c4 <__divsf3_pse+0xae>
    48bc:	62 1b       	sub	r22, r18
    48be:	73 0b       	sbc	r23, r19
    48c0:	84 0b       	sbc	r24, r20
    48c2:	ba 0b       	sbc	r27, r26
    48c4:	ee 1f       	adc	r30, r30
    48c6:	88 f7       	brcc	.-30     	; 0x48aa <__divsf3_pse+0x94>
    48c8:	e0 95       	com	r30
    48ca:	08 95       	ret

000048cc <__fixunssfsi>:
    48cc:	0e 94 02 25 	call	0x4a04	; 0x4a04 <__fp_splitA>
    48d0:	88 f0       	brcs	.+34     	; 0x48f4 <__fixunssfsi+0x28>
    48d2:	9f 57       	subi	r25, 0x7F	; 127
    48d4:	98 f0       	brcs	.+38     	; 0x48fc <__fixunssfsi+0x30>
    48d6:	b9 2f       	mov	r27, r25
    48d8:	99 27       	eor	r25, r25
    48da:	b7 51       	subi	r27, 0x17	; 23
    48dc:	b0 f0       	brcs	.+44     	; 0x490a <__fixunssfsi+0x3e>
    48de:	e1 f0       	breq	.+56     	; 0x4918 <__fixunssfsi+0x4c>
    48e0:	66 0f       	add	r22, r22
    48e2:	77 1f       	adc	r23, r23
    48e4:	88 1f       	adc	r24, r24
    48e6:	99 1f       	adc	r25, r25
    48e8:	1a f0       	brmi	.+6      	; 0x48f0 <__fixunssfsi+0x24>
    48ea:	ba 95       	dec	r27
    48ec:	c9 f7       	brne	.-14     	; 0x48e0 <__fixunssfsi+0x14>
    48ee:	14 c0       	rjmp	.+40     	; 0x4918 <__fixunssfsi+0x4c>
    48f0:	b1 30       	cpi	r27, 0x01	; 1
    48f2:	91 f0       	breq	.+36     	; 0x4918 <__fixunssfsi+0x4c>
    48f4:	0e 94 1c 25 	call	0x4a38	; 0x4a38 <__fp_zero>
    48f8:	b1 e0       	ldi	r27, 0x01	; 1
    48fa:	08 95       	ret
    48fc:	0c 94 1c 25 	jmp	0x4a38	; 0x4a38 <__fp_zero>
    4900:	67 2f       	mov	r22, r23
    4902:	78 2f       	mov	r23, r24
    4904:	88 27       	eor	r24, r24
    4906:	b8 5f       	subi	r27, 0xF8	; 248
    4908:	39 f0       	breq	.+14     	; 0x4918 <__fixunssfsi+0x4c>
    490a:	b9 3f       	cpi	r27, 0xF9	; 249
    490c:	cc f3       	brlt	.-14     	; 0x4900 <__fixunssfsi+0x34>
    490e:	86 95       	lsr	r24
    4910:	77 95       	ror	r23
    4912:	67 95       	ror	r22
    4914:	b3 95       	inc	r27
    4916:	d9 f7       	brne	.-10     	; 0x490e <__fixunssfsi+0x42>
    4918:	3e f4       	brtc	.+14     	; 0x4928 <__fixunssfsi+0x5c>
    491a:	90 95       	com	r25
    491c:	80 95       	com	r24
    491e:	70 95       	com	r23
    4920:	61 95       	neg	r22
    4922:	7f 4f       	sbci	r23, 0xFF	; 255
    4924:	8f 4f       	sbci	r24, 0xFF	; 255
    4926:	9f 4f       	sbci	r25, 0xFF	; 255
    4928:	08 95       	ret

0000492a <__floatunsisf>:
    492a:	e8 94       	clt
    492c:	09 c0       	rjmp	.+18     	; 0x4940 <__floatsisf+0x12>

0000492e <__floatsisf>:
    492e:	97 fb       	bst	r25, 7
    4930:	3e f4       	brtc	.+14     	; 0x4940 <__floatsisf+0x12>
    4932:	90 95       	com	r25
    4934:	80 95       	com	r24
    4936:	70 95       	com	r23
    4938:	61 95       	neg	r22
    493a:	7f 4f       	sbci	r23, 0xFF	; 255
    493c:	8f 4f       	sbci	r24, 0xFF	; 255
    493e:	9f 4f       	sbci	r25, 0xFF	; 255
    4940:	99 23       	and	r25, r25
    4942:	a9 f0       	breq	.+42     	; 0x496e <__floatsisf+0x40>
    4944:	f9 2f       	mov	r31, r25
    4946:	96 e9       	ldi	r25, 0x96	; 150
    4948:	bb 27       	eor	r27, r27
    494a:	93 95       	inc	r25
    494c:	f6 95       	lsr	r31
    494e:	87 95       	ror	r24
    4950:	77 95       	ror	r23
    4952:	67 95       	ror	r22
    4954:	b7 95       	ror	r27
    4956:	f1 11       	cpse	r31, r1
    4958:	f8 cf       	rjmp	.-16     	; 0x494a <__floatsisf+0x1c>
    495a:	fa f4       	brpl	.+62     	; 0x499a <__floatsisf+0x6c>
    495c:	bb 0f       	add	r27, r27
    495e:	11 f4       	brne	.+4      	; 0x4964 <__floatsisf+0x36>
    4960:	60 ff       	sbrs	r22, 0
    4962:	1b c0       	rjmp	.+54     	; 0x499a <__floatsisf+0x6c>
    4964:	6f 5f       	subi	r22, 0xFF	; 255
    4966:	7f 4f       	sbci	r23, 0xFF	; 255
    4968:	8f 4f       	sbci	r24, 0xFF	; 255
    496a:	9f 4f       	sbci	r25, 0xFF	; 255
    496c:	16 c0       	rjmp	.+44     	; 0x499a <__floatsisf+0x6c>
    496e:	88 23       	and	r24, r24
    4970:	11 f0       	breq	.+4      	; 0x4976 <__floatsisf+0x48>
    4972:	96 e9       	ldi	r25, 0x96	; 150
    4974:	11 c0       	rjmp	.+34     	; 0x4998 <__floatsisf+0x6a>
    4976:	77 23       	and	r23, r23
    4978:	21 f0       	breq	.+8      	; 0x4982 <__floatsisf+0x54>
    497a:	9e e8       	ldi	r25, 0x8E	; 142
    497c:	87 2f       	mov	r24, r23
    497e:	76 2f       	mov	r23, r22
    4980:	05 c0       	rjmp	.+10     	; 0x498c <__floatsisf+0x5e>
    4982:	66 23       	and	r22, r22
    4984:	71 f0       	breq	.+28     	; 0x49a2 <__floatsisf+0x74>
    4986:	96 e8       	ldi	r25, 0x86	; 134
    4988:	86 2f       	mov	r24, r22
    498a:	70 e0       	ldi	r23, 0x00	; 0
    498c:	60 e0       	ldi	r22, 0x00	; 0
    498e:	2a f0       	brmi	.+10     	; 0x499a <__floatsisf+0x6c>
    4990:	9a 95       	dec	r25
    4992:	66 0f       	add	r22, r22
    4994:	77 1f       	adc	r23, r23
    4996:	88 1f       	adc	r24, r24
    4998:	da f7       	brpl	.-10     	; 0x4990 <__floatsisf+0x62>
    499a:	88 0f       	add	r24, r24
    499c:	96 95       	lsr	r25
    499e:	87 95       	ror	r24
    49a0:	97 f9       	bld	r25, 7
    49a2:	08 95       	ret

000049a4 <__fp_inf>:
    49a4:	97 f9       	bld	r25, 7
    49a6:	9f 67       	ori	r25, 0x7F	; 127
    49a8:	80 e8       	ldi	r24, 0x80	; 128
    49aa:	70 e0       	ldi	r23, 0x00	; 0
    49ac:	60 e0       	ldi	r22, 0x00	; 0
    49ae:	08 95       	ret

000049b0 <__fp_nan>:
    49b0:	9f ef       	ldi	r25, 0xFF	; 255
    49b2:	80 ec       	ldi	r24, 0xC0	; 192
    49b4:	08 95       	ret

000049b6 <__fp_pscA>:
    49b6:	00 24       	eor	r0, r0
    49b8:	0a 94       	dec	r0
    49ba:	16 16       	cp	r1, r22
    49bc:	17 06       	cpc	r1, r23
    49be:	18 06       	cpc	r1, r24
    49c0:	09 06       	cpc	r0, r25
    49c2:	08 95       	ret

000049c4 <__fp_pscB>:
    49c4:	00 24       	eor	r0, r0
    49c6:	0a 94       	dec	r0
    49c8:	12 16       	cp	r1, r18
    49ca:	13 06       	cpc	r1, r19
    49cc:	14 06       	cpc	r1, r20
    49ce:	05 06       	cpc	r0, r21
    49d0:	08 95       	ret

000049d2 <__fp_round>:
    49d2:	09 2e       	mov	r0, r25
    49d4:	03 94       	inc	r0
    49d6:	00 0c       	add	r0, r0
    49d8:	11 f4       	brne	.+4      	; 0x49de <__fp_round+0xc>
    49da:	88 23       	and	r24, r24
    49dc:	52 f0       	brmi	.+20     	; 0x49f2 <__fp_round+0x20>
    49de:	bb 0f       	add	r27, r27
    49e0:	40 f4       	brcc	.+16     	; 0x49f2 <__fp_round+0x20>
    49e2:	bf 2b       	or	r27, r31
    49e4:	11 f4       	brne	.+4      	; 0x49ea <__fp_round+0x18>
    49e6:	60 ff       	sbrs	r22, 0
    49e8:	04 c0       	rjmp	.+8      	; 0x49f2 <__fp_round+0x20>
    49ea:	6f 5f       	subi	r22, 0xFF	; 255
    49ec:	7f 4f       	sbci	r23, 0xFF	; 255
    49ee:	8f 4f       	sbci	r24, 0xFF	; 255
    49f0:	9f 4f       	sbci	r25, 0xFF	; 255
    49f2:	08 95       	ret

000049f4 <__fp_split3>:
    49f4:	57 fd       	sbrc	r21, 7
    49f6:	90 58       	subi	r25, 0x80	; 128
    49f8:	44 0f       	add	r20, r20
    49fa:	55 1f       	adc	r21, r21
    49fc:	59 f0       	breq	.+22     	; 0x4a14 <__fp_splitA+0x10>
    49fe:	5f 3f       	cpi	r21, 0xFF	; 255
    4a00:	71 f0       	breq	.+28     	; 0x4a1e <__fp_splitA+0x1a>
    4a02:	47 95       	ror	r20

00004a04 <__fp_splitA>:
    4a04:	88 0f       	add	r24, r24
    4a06:	97 fb       	bst	r25, 7
    4a08:	99 1f       	adc	r25, r25
    4a0a:	61 f0       	breq	.+24     	; 0x4a24 <__fp_splitA+0x20>
    4a0c:	9f 3f       	cpi	r25, 0xFF	; 255
    4a0e:	79 f0       	breq	.+30     	; 0x4a2e <__fp_splitA+0x2a>
    4a10:	87 95       	ror	r24
    4a12:	08 95       	ret
    4a14:	12 16       	cp	r1, r18
    4a16:	13 06       	cpc	r1, r19
    4a18:	14 06       	cpc	r1, r20
    4a1a:	55 1f       	adc	r21, r21
    4a1c:	f2 cf       	rjmp	.-28     	; 0x4a02 <__fp_split3+0xe>
    4a1e:	46 95       	lsr	r20
    4a20:	f1 df       	rcall	.-30     	; 0x4a04 <__fp_splitA>
    4a22:	08 c0       	rjmp	.+16     	; 0x4a34 <__fp_splitA+0x30>
    4a24:	16 16       	cp	r1, r22
    4a26:	17 06       	cpc	r1, r23
    4a28:	18 06       	cpc	r1, r24
    4a2a:	99 1f       	adc	r25, r25
    4a2c:	f1 cf       	rjmp	.-30     	; 0x4a10 <__fp_splitA+0xc>
    4a2e:	86 95       	lsr	r24
    4a30:	71 05       	cpc	r23, r1
    4a32:	61 05       	cpc	r22, r1
    4a34:	08 94       	sec
    4a36:	08 95       	ret

00004a38 <__fp_zero>:
    4a38:	e8 94       	clt

00004a3a <__fp_szero>:
    4a3a:	bb 27       	eor	r27, r27
    4a3c:	66 27       	eor	r22, r22
    4a3e:	77 27       	eor	r23, r23
    4a40:	cb 01       	movw	r24, r22
    4a42:	97 f9       	bld	r25, 7
    4a44:	08 95       	ret

00004a46 <__mulsf3>:
    4a46:	0e 94 36 25 	call	0x4a6c	; 0x4a6c <__mulsf3x>
    4a4a:	0c 94 e9 24 	jmp	0x49d2	; 0x49d2 <__fp_round>
    4a4e:	0e 94 db 24 	call	0x49b6	; 0x49b6 <__fp_pscA>
    4a52:	38 f0       	brcs	.+14     	; 0x4a62 <__mulsf3+0x1c>
    4a54:	0e 94 e2 24 	call	0x49c4	; 0x49c4 <__fp_pscB>
    4a58:	20 f0       	brcs	.+8      	; 0x4a62 <__mulsf3+0x1c>
    4a5a:	95 23       	and	r25, r21
    4a5c:	11 f0       	breq	.+4      	; 0x4a62 <__mulsf3+0x1c>
    4a5e:	0c 94 d2 24 	jmp	0x49a4	; 0x49a4 <__fp_inf>
    4a62:	0c 94 d8 24 	jmp	0x49b0	; 0x49b0 <__fp_nan>
    4a66:	11 24       	eor	r1, r1
    4a68:	0c 94 1d 25 	jmp	0x4a3a	; 0x4a3a <__fp_szero>

00004a6c <__mulsf3x>:
    4a6c:	0e 94 fa 24 	call	0x49f4	; 0x49f4 <__fp_split3>
    4a70:	70 f3       	brcs	.-36     	; 0x4a4e <__mulsf3+0x8>

00004a72 <__mulsf3_pse>:
    4a72:	95 9f       	mul	r25, r21
    4a74:	c1 f3       	breq	.-16     	; 0x4a66 <__mulsf3+0x20>
    4a76:	95 0f       	add	r25, r21
    4a78:	50 e0       	ldi	r21, 0x00	; 0
    4a7a:	55 1f       	adc	r21, r21
    4a7c:	62 9f       	mul	r22, r18
    4a7e:	f0 01       	movw	r30, r0
    4a80:	72 9f       	mul	r23, r18
    4a82:	bb 27       	eor	r27, r27
    4a84:	f0 0d       	add	r31, r0
    4a86:	b1 1d       	adc	r27, r1
    4a88:	63 9f       	mul	r22, r19
    4a8a:	aa 27       	eor	r26, r26
    4a8c:	f0 0d       	add	r31, r0
    4a8e:	b1 1d       	adc	r27, r1
    4a90:	aa 1f       	adc	r26, r26
    4a92:	64 9f       	mul	r22, r20
    4a94:	66 27       	eor	r22, r22
    4a96:	b0 0d       	add	r27, r0
    4a98:	a1 1d       	adc	r26, r1
    4a9a:	66 1f       	adc	r22, r22
    4a9c:	82 9f       	mul	r24, r18
    4a9e:	22 27       	eor	r18, r18
    4aa0:	b0 0d       	add	r27, r0
    4aa2:	a1 1d       	adc	r26, r1
    4aa4:	62 1f       	adc	r22, r18
    4aa6:	73 9f       	mul	r23, r19
    4aa8:	b0 0d       	add	r27, r0
    4aaa:	a1 1d       	adc	r26, r1
    4aac:	62 1f       	adc	r22, r18
    4aae:	83 9f       	mul	r24, r19
    4ab0:	a0 0d       	add	r26, r0
    4ab2:	61 1d       	adc	r22, r1
    4ab4:	22 1f       	adc	r18, r18
    4ab6:	74 9f       	mul	r23, r20
    4ab8:	33 27       	eor	r19, r19
    4aba:	a0 0d       	add	r26, r0
    4abc:	61 1d       	adc	r22, r1
    4abe:	23 1f       	adc	r18, r19
    4ac0:	84 9f       	mul	r24, r20
    4ac2:	60 0d       	add	r22, r0
    4ac4:	21 1d       	adc	r18, r1
    4ac6:	82 2f       	mov	r24, r18
    4ac8:	76 2f       	mov	r23, r22
    4aca:	6a 2f       	mov	r22, r26
    4acc:	11 24       	eor	r1, r1
    4ace:	9f 57       	subi	r25, 0x7F	; 127
    4ad0:	50 40       	sbci	r21, 0x00	; 0
    4ad2:	9a f0       	brmi	.+38     	; 0x4afa <__mulsf3_pse+0x88>
    4ad4:	f1 f0       	breq	.+60     	; 0x4b12 <__mulsf3_pse+0xa0>
    4ad6:	88 23       	and	r24, r24
    4ad8:	4a f0       	brmi	.+18     	; 0x4aec <__mulsf3_pse+0x7a>
    4ada:	ee 0f       	add	r30, r30
    4adc:	ff 1f       	adc	r31, r31
    4ade:	bb 1f       	adc	r27, r27
    4ae0:	66 1f       	adc	r22, r22
    4ae2:	77 1f       	adc	r23, r23
    4ae4:	88 1f       	adc	r24, r24
    4ae6:	91 50       	subi	r25, 0x01	; 1
    4ae8:	50 40       	sbci	r21, 0x00	; 0
    4aea:	a9 f7       	brne	.-22     	; 0x4ad6 <__mulsf3_pse+0x64>
    4aec:	9e 3f       	cpi	r25, 0xFE	; 254
    4aee:	51 05       	cpc	r21, r1
    4af0:	80 f0       	brcs	.+32     	; 0x4b12 <__mulsf3_pse+0xa0>
    4af2:	0c 94 d2 24 	jmp	0x49a4	; 0x49a4 <__fp_inf>
    4af6:	0c 94 1d 25 	jmp	0x4a3a	; 0x4a3a <__fp_szero>
    4afa:	5f 3f       	cpi	r21, 0xFF	; 255
    4afc:	e4 f3       	brlt	.-8      	; 0x4af6 <__mulsf3_pse+0x84>
    4afe:	98 3e       	cpi	r25, 0xE8	; 232
    4b00:	d4 f3       	brlt	.-12     	; 0x4af6 <__mulsf3_pse+0x84>
    4b02:	86 95       	lsr	r24
    4b04:	77 95       	ror	r23
    4b06:	67 95       	ror	r22
    4b08:	b7 95       	ror	r27
    4b0a:	f7 95       	ror	r31
    4b0c:	e7 95       	ror	r30
    4b0e:	9f 5f       	subi	r25, 0xFF	; 255
    4b10:	c1 f7       	brne	.-16     	; 0x4b02 <__mulsf3_pse+0x90>
    4b12:	fe 2b       	or	r31, r30
    4b14:	88 0f       	add	r24, r24
    4b16:	91 1d       	adc	r25, r1
    4b18:	96 95       	lsr	r25
    4b1a:	87 95       	ror	r24
    4b1c:	97 f9       	bld	r25, 7
    4b1e:	08 95       	ret

00004b20 <__ashldi3>:
    4b20:	0f 93       	push	r16
    4b22:	08 30       	cpi	r16, 0x08	; 8
    4b24:	90 f0       	brcs	.+36     	; 0x4b4a <__ashldi3+0x2a>
    4b26:	98 2f       	mov	r25, r24
    4b28:	87 2f       	mov	r24, r23
    4b2a:	76 2f       	mov	r23, r22
    4b2c:	65 2f       	mov	r22, r21
    4b2e:	54 2f       	mov	r21, r20
    4b30:	43 2f       	mov	r20, r19
    4b32:	32 2f       	mov	r19, r18
    4b34:	22 27       	eor	r18, r18
    4b36:	08 50       	subi	r16, 0x08	; 8
    4b38:	f4 cf       	rjmp	.-24     	; 0x4b22 <__ashldi3+0x2>
    4b3a:	22 0f       	add	r18, r18
    4b3c:	33 1f       	adc	r19, r19
    4b3e:	44 1f       	adc	r20, r20
    4b40:	55 1f       	adc	r21, r21
    4b42:	66 1f       	adc	r22, r22
    4b44:	77 1f       	adc	r23, r23
    4b46:	88 1f       	adc	r24, r24
    4b48:	99 1f       	adc	r25, r25
    4b4a:	0a 95       	dec	r16
    4b4c:	b2 f7       	brpl	.-20     	; 0x4b3a <__ashldi3+0x1a>
    4b4e:	0f 91       	pop	r16
    4b50:	08 95       	ret

00004b52 <__adddi3_s8>:
    4b52:	00 24       	eor	r0, r0
    4b54:	a7 fd       	sbrc	r26, 7
    4b56:	00 94       	com	r0
    4b58:	2a 0f       	add	r18, r26
    4b5a:	30 1d       	adc	r19, r0
    4b5c:	40 1d       	adc	r20, r0
    4b5e:	50 1d       	adc	r21, r0
    4b60:	60 1d       	adc	r22, r0
    4b62:	70 1d       	adc	r23, r0
    4b64:	80 1d       	adc	r24, r0
    4b66:	90 1d       	adc	r25, r0
    4b68:	08 95       	ret

00004b6a <__cmpdi2_s8>:
    4b6a:	00 24       	eor	r0, r0
    4b6c:	a7 fd       	sbrc	r26, 7
    4b6e:	00 94       	com	r0
    4b70:	2a 17       	cp	r18, r26
    4b72:	30 05       	cpc	r19, r0
    4b74:	40 05       	cpc	r20, r0
    4b76:	50 05       	cpc	r21, r0
    4b78:	60 05       	cpc	r22, r0
    4b7a:	70 05       	cpc	r23, r0
    4b7c:	80 05       	cpc	r24, r0
    4b7e:	90 05       	cpc	r25, r0
    4b80:	08 95       	ret

00004b82 <_exit>:
    4b82:	f8 94       	cli

00004b84 <__stop_program>:
    4b84:	ff cf       	rjmp	.-2      	; 0x4b84 <__stop_program>
